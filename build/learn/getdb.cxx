/* Generated by Cython 3.0.0a11 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0a11"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000AB
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS 1
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(p))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__getdb
#define __PYX_HAVE_API__getdb
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <string.h>
#include <string>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <vector>
#include "lgraph/lgraph_types.h"
#include "lgraph/lgraph_vertex_index_iterator.h"
#include "lgraph/lgraph_vertex_iterator.h"
#include "lgraph/lgraph_edge_iterator.h"
#include "../../include/lgraph/lgraph_utils.h"
#include "lgraph/lgraph_galaxy.h"
#include "lgraph/lgraph_txn.h"
#include "lgraph/lgraph_db.h"
#include <tuple>
#include "string.h"
#include "fma-common/string_util.h"
#include <functional>
#include "lgraph/olap_base.h"
#include "lgraph/lgraph_atomic.h"
#include "lgraph/olap_on_db.h"
#include <stdio.h>
#include "pythread.h"

    #if CYTHON_COMPILING_IN_PYPY
    #ifdef _MSC_VER
    #pragma message ("This module uses CPython specific internals of 'array.array', which are not available in PyPy.")
    #else
    #warning This module uses CPython specific internals of 'array.array', which are not available in PyPy.
    #endif
    #endif
    
#include <omp.h>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "getdb.py",
  "<stringsource>",
  "contextvars.pxd",
  "array.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* OptionalLocals.proto */
#if defined(CYTHON_USE_BOOST_OPTIONAL)
    #include <boost/optional.hpp>
    #define __Pyx_Optional_Type boost::optional
#else
    #include <optional>
    template <typename T>
    using __Pyx_Optional_Type = std::optional<T>;
#endif

/* #### Code section: numeric_typedefs ### */

/* "lgraph_db.pxd":8
 * from libcpp.pair cimport pair
 * 
 * ctypedef size_t size_t             # <<<<<<<<<<<<<<
 * ctypedef ssize_t ssize_t
 * ctypedef unsigned long uint64_t
 */

#line 8 "lgraph_db.pxd"
typedef size_t __pyx_t_9lgraph_db_size_t;

/* "lgraph_db.pxd":9
 * 
 * ctypedef size_t size_t
 * ctypedef ssize_t ssize_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned long uint64_t
 * ctypedef unsigned int uint32_t
 */

#line 9 "lgraph_db.pxd"
typedef Py_ssize_t __pyx_t_9lgraph_db_ssize_t;

/* "lgraph_db.pxd":10
 * ctypedef size_t size_t
 * ctypedef ssize_t ssize_t
 * ctypedef unsigned long uint64_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned int uint32_t
 * ctypedef signed long int64_t
 */

#line 10 "lgraph_db.pxd"
typedef unsigned long __pyx_t_9lgraph_db_uint64_t;

/* "lgraph_db.pxd":11
 * ctypedef ssize_t ssize_t
 * ctypedef unsigned long uint64_t
 * ctypedef unsigned int uint32_t             # <<<<<<<<<<<<<<
 * ctypedef signed long int64_t
 * ctypedef signed int int32_t
 */

#line 11 "lgraph_db.pxd"
typedef unsigned int __pyx_t_9lgraph_db_uint32_t;

/* "lgraph_db.pxd":12
 * ctypedef unsigned long uint64_t
 * ctypedef unsigned int uint32_t
 * ctypedef signed long int64_t             # <<<<<<<<<<<<<<
 * ctypedef signed int int32_t
 * ctypedef short int int16_t
 */

#line 12 "lgraph_db.pxd"
typedef long __pyx_t_9lgraph_db_int64_t;

/* "lgraph_db.pxd":13
 * ctypedef unsigned int uint32_t
 * ctypedef signed long int64_t
 * ctypedef signed int int32_t             # <<<<<<<<<<<<<<
 * ctypedef short int int16_t
 * ctypedef char int8_t
 */

#line 13 "lgraph_db.pxd"
typedef int __pyx_t_9lgraph_db_int32_t;

/* "lgraph_db.pxd":14
 * ctypedef signed long int64_t
 * ctypedef signed int int32_t
 * ctypedef short int int16_t             # <<<<<<<<<<<<<<
 * ctypedef char int8_t
 * ctypedef unsigned short int	uint16_t
 */

#line 14 "lgraph_db.pxd"
typedef short __pyx_t_9lgraph_db_int16_t;

/* "lgraph_db.pxd":15
 * ctypedef signed int int32_t
 * ctypedef short int int16_t
 * ctypedef char int8_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned short int	uint16_t
 * 
 */

#line 15 "lgraph_db.pxd"
typedef char __pyx_t_9lgraph_db_int8_t;

/* "lgraph_db.pxd":16
 * ctypedef short int int16_t
 * ctypedef char int8_t
 * ctypedef unsigned short int	uint16_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "lgraph/lgraph_types.h" namespace "lgraph_api":
 */

#line 16 "lgraph_db.pxd"
typedef unsigned short __pyx_t_9lgraph_db_uint16_t;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_5getdb_AllDb;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "olap_base.pxd":3
 * # distutils: language = c++
 * from libcpp.memory cimport shared_ptr
 * ctypedef const void* const_p_void             # <<<<<<<<<<<<<<
 * from lgraph_db cimport *
 * 
 */

#line 3 "olap_base.pxd"
typedef void const *__pyx_t_9olap_base_const_p_void;

#line 3 "olap_base.pxd"
struct __pyx_opt_args_7cpython_11contextvars_get_value;

#line 3 "olap_base.pxd"
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

#line 112 "cpython/contextvars.pxd"
struct __pyx_opt_args_7cpython_11contextvars_get_value {

#line 112 "cpython/contextvars.pxd"
  int __pyx_n;

#line 112 "cpython/contextvars.pxd"
  PyObject *default_value;

#line 112 "cpython/contextvars.pxd"
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

#line 129 "cpython/contextvars.pxd"
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {

#line 129 "cpython/contextvars.pxd"
  int __pyx_n;

#line 129 "cpython/contextvars.pxd"
  PyObject *default_value;

#line 129 "cpython/contextvars.pxd"
};

/* "getdb.py":18
 * 
 * @cython.cclass
 * class AllDb:             # <<<<<<<<<<<<<<
 *     g: cython.pointer(OlapOnDB[Empty])
 *     active: ParallelBitset
 */

#line 18 "getdb.py"
struct __pyx_obj_5getdb_AllDb {

#line 18 "getdb.py"
  PyObject_HEAD

#line 18 "getdb.py"
  struct __pyx_vtabstruct_5getdb_AllDb *__pyx_vtab;

#line 18 "getdb.py"
  lgraph_api::olap::OlapOnDB<struct lgraph_api::olap::Empty>  *g;

#line 18 "getdb.py"
  __Pyx_Optional_Type<lgraph_api::olap::ParallelBitset> active;

#line 18 "getdb.py"
  lgraph_api::GraphDB *db;

#line 18 "getdb.py"
  __pyx_t_9lgraph_db_size_t feature_num;

#line 18 "getdb.py"
  __Pyx_Optional_Type<lgraph_api::Transaction> txn;

#line 18 "getdb.py"
  __Pyx_memviewslice node;

#line 18 "getdb.py"
  int num_threads;

#line 18 "getdb.py"
  __Pyx_memviewslice flag;

#line 18 "getdb.py"
  __Pyx_memviewslice feature;

#line 18 "getdb.py"
  __Pyx_memviewslice label;

#line 18 "getdb.py"
  __Pyx_Optional_Type<std::string> label_key;

#line 18 "getdb.py"
  __Pyx_Optional_Type<std::string> feature_key;

#line 18 "getdb.py"
  __Pyx_memviewslice src_list;

#line 18 "getdb.py"
  __Pyx_Optional_Type<std::string> s_key;

#line 18 "getdb.py"
  __Pyx_memviewslice dst_list;

#line 18 "getdb.py"
  __Pyx_memviewslice local_node_num;

#line 18 "getdb.py"
  __Pyx_memviewslice local_edge_num;

#line 18 "getdb.py"
  __Pyx_memviewslice local_feature;

#line 18 "getdb.py"
  __Pyx_memviewslice local_node;

#line 18 "getdb.py"
  __Pyx_memviewslice local_label;

#line 18 "getdb.py"
  __Pyx_memviewslice index;

#line 18 "getdb.py"
  __Pyx_memviewslice edge_index;

#line 18 "getdb.py"
  __Pyx_memviewslice local_src_list;

#line 18 "getdb.py"
  __Pyx_memviewslice local_dst_list;

#line 18 "getdb.py"
};

#line 18 "getdb.py"


/* "View.MemoryView":113
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

#line 113 "View.MemoryView"
struct __pyx_array_obj {

#line 113 "View.MemoryView"
  PyObject_HEAD

#line 113 "View.MemoryView"
  struct __pyx_vtabstruct_array *__pyx_vtab;

#line 113 "View.MemoryView"
  char *data;

#line 113 "View.MemoryView"
  Py_ssize_t len;

#line 113 "View.MemoryView"
  char *format;

#line 113 "View.MemoryView"
  int ndim;

#line 113 "View.MemoryView"
  Py_ssize_t *_shape;

#line 113 "View.MemoryView"
  Py_ssize_t *_strides;

#line 113 "View.MemoryView"
  Py_ssize_t itemsize;

#line 113 "View.MemoryView"
  PyObject *mode;

#line 113 "View.MemoryView"
  PyObject *_format;

#line 113 "View.MemoryView"
  void (*callback_free_data)(void *);

#line 113 "View.MemoryView"
  int free_data;

#line 113 "View.MemoryView"
  int dtype_is_object;

#line 113 "View.MemoryView"
};

#line 113 "View.MemoryView"


/* "View.MemoryView":301
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */

#line 301 "View.MemoryView"
struct __pyx_MemviewEnum_obj {

#line 301 "View.MemoryView"
  PyObject_HEAD

#line 301 "View.MemoryView"
  PyObject *name;

#line 301 "View.MemoryView"
};

#line 301 "View.MemoryView"


/* "View.MemoryView":351
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview:             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

#line 351 "View.MemoryView"
struct __pyx_memoryview_obj {

#line 351 "View.MemoryView"
  PyObject_HEAD

#line 351 "View.MemoryView"
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;

#line 351 "View.MemoryView"
  PyObject *obj;

#line 351 "View.MemoryView"
  PyObject *_size;

#line 351 "View.MemoryView"
  PyObject *_array_interface;

#line 351 "View.MemoryView"
  PyThread_type_lock lock;

#line 351 "View.MemoryView"
  __pyx_atomic_int acquisition_count[2];

#line 351 "View.MemoryView"
  __pyx_atomic_int *acquisition_count_aligned_p;

#line 351 "View.MemoryView"
  Py_buffer view;

#line 351 "View.MemoryView"
  int flags;

#line 351 "View.MemoryView"
  int dtype_is_object;

#line 351 "View.MemoryView"
  __Pyx_TypeInfo *typeinfo;

#line 351 "View.MemoryView"
};

#line 351 "View.MemoryView"


/* "View.MemoryView":968
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

#line 968 "View.MemoryView"
struct __pyx_memoryviewslice_obj {

#line 968 "View.MemoryView"
  struct __pyx_memoryview_obj __pyx_base;

#line 968 "View.MemoryView"
  __Pyx_memviewslice from_slice;

#line 968 "View.MemoryView"
  PyObject *from_object;

#line 968 "View.MemoryView"
  PyObject *(*to_object_func)(char *);

#line 968 "View.MemoryView"
  int (*to_dtype_func)(char *, PyObject *);

#line 968 "View.MemoryView"
};

#line 968 "View.MemoryView"


#line 968 "View.MemoryView"


/* "getdb.py":18
 * 
 * @cython.cclass
 * class AllDb:             # <<<<<<<<<<<<<<
 *     g: cython.pointer(OlapOnDB[Empty])
 *     active: ParallelBitset
 */

#line 18 "getdb.py"


#line 18 "getdb.py"
struct __pyx_vtabstruct_5getdb_AllDb {

#line 18 "getdb.py"
  void (*MergeList)(struct __pyx_obj_5getdb_AllDb *);

#line 18 "getdb.py"
  __pyx_t_9lgraph_db_size_t (*Work)(struct __pyx_obj_5getdb_AllDb *, __pyx_t_9lgraph_db_size_t);

#line 18 "getdb.py"
  PyObject *(*run)(struct __pyx_obj_5getdb_AllDb *, lgraph_api::GraphDB *, lgraph_api::olap::OlapOnDB<struct lgraph_api::olap::Empty>  *, __pyx_t_9lgraph_db_size_t, PyObject *, PyObject *);

#line 18 "getdb.py"
};

#line 18 "getdb.py"
static struct __pyx_vtabstruct_5getdb_AllDb *__pyx_vtabptr_5getdb_AllDb;

#line 18 "getdb.py"


/* "View.MemoryView":113
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

#line 113 "View.MemoryView"


#line 113 "View.MemoryView"
struct __pyx_vtabstruct_array {

#line 113 "View.MemoryView"
  PyObject *(*get_memview)(struct __pyx_array_obj *);

#line 113 "View.MemoryView"
};

#line 113 "View.MemoryView"
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;

#line 113 "View.MemoryView"


/* "View.MemoryView":351
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview:             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

#line 351 "View.MemoryView"


#line 351 "View.MemoryView"
struct __pyx_vtabstruct_memoryview {

#line 351 "View.MemoryView"
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);

#line 351 "View.MemoryView"
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);

#line 351 "View.MemoryView"
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);

#line 351 "View.MemoryView"
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);

#line 351 "View.MemoryView"
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);

#line 351 "View.MemoryView"
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);

#line 351 "View.MemoryView"
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);

#line 351 "View.MemoryView"
  PyObject *(*_get_base)(struct __pyx_memoryview_obj *);

#line 351 "View.MemoryView"
};

#line 351 "View.MemoryView"
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;

#line 351 "View.MemoryView"


/* "View.MemoryView":968
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

#line 968 "View.MemoryView"


#line 968 "View.MemoryView"
struct __pyx_vtabstruct__memoryviewslice {

#line 968 "View.MemoryView"
  struct __pyx_vtabstruct_memoryview __pyx_base;

#line 968 "View.MemoryView"
};

#line 968 "View.MemoryView"
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define __Pyx_UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* ssize_strlen.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
static CYTHON_UNUSED int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
#if PY_MAJOR_VERSION >= 3
        unsigned long long *as_ulonglongs;
        long long *as_longlongs;
#endif
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    __Pyx_SET_SIZE(op, size);
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated && n*4 > self->allocated) {
        __Pyx_SET_SIZE(self, n);
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= n) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = newsize;
    return 0;
}
#endif

/* None.proto */
#include <new>

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_9lgraph_db_ssize_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_ssize_t(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_9lgraph_db_ssize_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_9lgraph_db_ssize_t(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_float(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_float(const char *itemp, PyObject *obj);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XCLEAR_MEMVIEW(slice, have_gil) __Pyx_XCLEAR_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static void __pyx_f_5getdb_5AllDb_MergeList(struct __pyx_obj_5getdb_AllDb *__pyx_v_self); /* proto*/
static __pyx_t_9lgraph_db_size_t __pyx_f_5getdb_5AllDb_Work(struct __pyx_obj_5getdb_AllDb *__pyx_v_self, __pyx_t_9lgraph_db_size_t __pyx_v_vi); /* proto*/
static PyObject *__pyx_f_5getdb_5AllDb_run(struct __pyx_obj_5getdb_AllDb *__pyx_v_self, lgraph_api::GraphDB *__pyx_v_db, lgraph_api::olap::OlapOnDB<struct lgraph_api::olap::Empty>  *__pyx_v_olapondb, __pyx_t_9lgraph_db_size_t __pyx_v_feature_num, PyObject *__pyx_v_NodeInfo, PyObject *__pyx_v_EdgeInfo); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto*/

/* Module declarations from "cython.view" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cython.dataclasses" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cython" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.memory" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.map" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.pair" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "lgraph_db" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "olap_base" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.version" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.exc" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.module" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.mem" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.tuple" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.list" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.sequence" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.mapping" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.iterator" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.number" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.int" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.bool" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;
#endif

/* Module declarations from "cpython.long" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.float" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.complex" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;
#endif

/* Module declarations from "cpython.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.unicode" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.pyport" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.dict" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.instance" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.function" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.method" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.weakref" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.getargs" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.pythread" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.pystate" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.cobject" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.oldbuffer" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.set" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.buffer" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.bytes" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.pycapsule" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.contextvars" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "array" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.array" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
#endif
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from "openmp" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "getdb" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_5getdb_AllDb = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
#endif
static PyObject *__pyx_collections_abc_Sequence = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyObject *__pyx_f_5getdb_Process(PyObject *, PyObject *, __pyx_t_9lgraph_db_size_t, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static int __pyx_array_allocate_buffer(struct __pyx_array_obj *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, PyObject *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, PyObject *); /*proto*/
static int __pyx_memoryview_err_no_memory(void); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_9lgraph_db_size_t = { "size_t", NULL, sizeof(__pyx_t_9lgraph_db_size_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_9lgraph_db_size_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_9lgraph_db_size_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_9lgraph_db_ssize_t = { "ssize_t", NULL, sizeof(__pyx_t_9lgraph_db_ssize_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_9lgraph_db_ssize_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_9lgraph_db_ssize_t), 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "getdb"
extern int __pyx_module_is_main_getdb;
int __pyx_module_is_main_getdb = 0;

/* Implementation of "getdb" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_IndexError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = ": ";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = "*";
static const char __pyx_k__6[] = "'";
static const char __pyx_k__7[] = ")";
static const char __pyx_k_db[] = "db_";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k__26[] = "?";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_got[] = " (got ";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_intp[] = "intp";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_AllDb[] = "AllDb";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_getdb[] = "getdb";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_uintp[] = "uintp";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_size_t[] = "size_t";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Process[] = "Process";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_EdgeInfo[] = "EdgeInfo";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_NodeInfo[] = "NodeInfo";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_olapondb[] = "olapondb";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_feature_num[] = "feature_num";
static const char __pyx_k_get_pointer[] = "get_pointer";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_feature_float[] = "feature_float";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_lgraph_db_python[] = "lgraph_db_python";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_AllDb___reduce_cython[] = "AllDb.__reduce_cython__";
static const char __pyx_k_Invalid_shape_in_axis[] = "Invalid shape in axis ";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_Cannot_index_with_type[] = "Cannot index with type '";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_AllDb___setstate_cython[] = "AllDb.__setstate_cython__";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static const char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static const char __pyx_k_lgraph_db_python_PyGraphDB[] = "lgraph_db_python.PyGraphDB";
static const char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_lgraph_db_python_PyOlapOnDB[] = "lgraph_db_python.PyOlapOnDB";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_self_active_self_db_self_g_self[] = "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling";
static const char __pyx_k_tugraph_db_learn_procedures_get[] = "/tugraph-db/learn/procedures/getdb.py";
static const char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got ";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis ";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension ";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_AllDb;
static PyObject *__pyx_n_s_AllDb___reduce_cython;
static PyObject *__pyx_n_s_AllDb___setstate_cython;
static PyObject *__pyx_kp_s_All_dimensions_preceding_dimensi;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_u_Cannot_index_with_type;
static PyObject *__pyx_kp_s_Cannot_transpose_memoryview_with;
static PyObject *__pyx_kp_s_Dimension_d_is_not_direct;
static PyObject *__pyx_n_s_EdgeInfo;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Index_out_of_bounds_axis_d;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_u_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_u_Invalid_shape_in_axis;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_NodeInfo;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_u_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Process;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_kp_s_Step_may_not_be_zero_axis_d;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_n_s__26;
static PyObject *__pyx_n_s__3;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_n_s_abc;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_kp_u_and;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_kp_s_collections_abc;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_db;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_b_feature_float;
static PyObject *__pyx_n_s_feature_num;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_get_pointer;
static PyObject *__pyx_n_s_getdb;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_u_got;
static PyObject *__pyx_kp_u_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_intp;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_b_label;
static PyObject *__pyx_n_s_lgraph_db_python;
static PyObject *__pyx_kp_s_lgraph_db_python_PyGraphDB;
static PyObject *__pyx_kp_s_lgraph_db_python_PyOlapOnDB;
static PyObject *__pyx_n_s_list;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_olapondb;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_active_self_db_self_g_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_size_t;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_kp_s_tugraph_db_learn_procedures_get;
static PyObject *__pyx_n_s_uintp;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_version_info;
static PyObject *__pyx_n_s_zeros;
#endif
/* #### Code section: decls ### */
static PyObject *__pyx_pf_5getdb_5AllDb___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5getdb_AllDb *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5getdb_5AllDb_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5getdb_AllDb *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5getdb_Process(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_, PyObject *__pyx_v_olapondb, __pyx_t_9lgraph_db_size_t __pyx_v_feature_num, PyObject *__pyx_v_NodeInfo, PyObject *__pyx_v_EdgeInfo); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5getdb_AllDb(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
#endif
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_slice__5;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__25;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_USE_MODULE_STATE
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  PyTypeObject *__pyx_ptype_7cpython_5array_array;
  PyTypeObject *__pyx_ptype_5getdb_AllDb;
  PyObject *__pyx_type_5getdb_AllDb;
  PyTypeObject *__pyx_array_type;
  PyObject *__pyx_type___pyx_array;
  PyTypeObject *__pyx_MemviewEnum_type;
  PyObject *__pyx_type___pyx_MemviewEnum;
  PyTypeObject *__pyx_memoryview_type;
  PyObject *__pyx_type___pyx_memoryview;
  PyTypeObject *__pyx_memoryviewslice_type;
  PyObject *__pyx_type___pyx_memoryviewslice;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_n_s_ASCII;
  PyObject *__pyx_n_s_AllDb;
  PyObject *__pyx_n_s_AllDb___reduce_cython;
  PyObject *__pyx_n_s_AllDb___setstate_cython;
  PyObject *__pyx_kp_s_All_dimensions_preceding_dimensi;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
  PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
  PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
  PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
  PyObject *__pyx_kp_u_Cannot_index_with_type;
  PyObject *__pyx_kp_s_Cannot_transpose_memoryview_with;
  PyObject *__pyx_kp_s_Dimension_d_is_not_direct;
  PyObject *__pyx_n_s_EdgeInfo;
  PyObject *__pyx_n_s_Ellipsis;
  PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_kp_s_Index_out_of_bounds_axis_d;
  PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
  PyObject *__pyx_kp_u_Invalid_mode_expected_c_or_fortr;
  PyObject *__pyx_kp_u_Invalid_shape_in_axis;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
  PyObject *__pyx_kp_s_MemoryView_of_r_object;
  PyObject *__pyx_n_s_NodeInfo;
  PyObject *__pyx_n_b_O;
  PyObject *__pyx_kp_u_Out_of_bounds_on_buffer_access_a;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_Process;
  PyObject *__pyx_n_s_Sequence;
  PyObject *__pyx_kp_s_Step_may_not_be_zero_axis_d;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_View_MemoryView;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_s__26;
  PyObject *__pyx_n_s__3;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_n_s_abc;
  PyObject *__pyx_n_s_allocate_buffer;
  PyObject *__pyx_kp_u_and;
  PyObject *__pyx_n_s_asarray;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_base;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_u_c;
  PyObject *__pyx_n_s_class;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_kp_s_collections_abc;
  PyObject *__pyx_kp_s_contiguous_and_direct;
  PyObject *__pyx_kp_s_contiguous_and_indirect;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_s_db;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_dtype_is_object;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_b_feature_float;
  PyObject *__pyx_n_s_feature_num;
  PyObject *__pyx_n_s_flags;
  PyObject *__pyx_n_s_float32;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_fortran;
  PyObject *__pyx_n_u_fortran;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get_pointer;
  PyObject *__pyx_n_s_getdb;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_kp_u_got;
  PyObject *__pyx_kp_u_got_differing_extents_in_dimensi;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_intp;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_itemsize;
  PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
  PyObject *__pyx_n_b_label;
  PyObject *__pyx_n_s_lgraph_db_python;
  PyObject *__pyx_kp_s_lgraph_db_python_PyGraphDB;
  PyObject *__pyx_kp_s_lgraph_db_python_PyOlapOnDB;
  PyObject *__pyx_n_s_list;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_memview;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_ndim;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_n_s_obj;
  PyObject *__pyx_n_s_olapondb;
  PyObject *__pyx_n_s_pack;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_Enum;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_register;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_active_self_db_self_g_self;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_size_t;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_step;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_kp_s_strided_and_direct;
  PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
  PyObject *__pyx_kp_s_strided_and_indirect;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_struct;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_kp_s_tugraph_db_learn_procedures_get;
  PyObject *__pyx_n_s_uintp;
  PyObject *__pyx_kp_s_unable_to_allocate_array_data;
  PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
  PyObject *__pyx_n_s_unpack;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_version_info;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_112105877;
  PyObject *__pyx_int_136983863;
  PyObject *__pyx_int_184977713;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_slice__5;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__25;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_5array_array);
  Py_CLEAR(clear_module_state->__pyx_ptype_5getdb_AllDb);
  Py_CLEAR(clear_module_state->__pyx_type_5getdb_AllDb);
  Py_CLEAR(clear_module_state->__pyx_array_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_array);
  Py_CLEAR(clear_module_state->__pyx_MemviewEnum_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_MemviewEnum);
  Py_CLEAR(clear_module_state->__pyx_memoryview_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryview);
  Py_CLEAR(clear_module_state->__pyx_memoryviewslice_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryviewslice);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_n_s_ASCII);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllDb);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllDb___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllDb___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_All_dimensions_preceding_dimensi);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Buffer_view_does_not_expose_stri);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Can_only_create_a_buffer_that_is);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_assign_to_read_only_memor);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_create_writable_memory_vi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_index_with_type);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_transpose_memoryview_with);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dimension_d_is_not_direct);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ellipsis);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Empty_shape_tuple_for_cython_arr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Index_out_of_bounds_axis_d);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Indirect_dimensions_not_supporte);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_mode_expected_c_or_fortr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_shape_in_axis);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_MemoryView_of_r_at_0x_x);
  Py_CLEAR(clear_module_state->__pyx_kp_s_MemoryView_of_r_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeInfo);
  Py_CLEAR(clear_module_state->__pyx_n_b_O);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Process);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sequence);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Step_may_not_be_zero_axis_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Unable_to_convert_item_to_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_View_MemoryView);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_s__26);
  Py_CLEAR(clear_module_state->__pyx_n_s__3);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_n_s_abc);
  Py_CLEAR(clear_module_state->__pyx_n_s_allocate_buffer);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and);
  Py_CLEAR(clear_module_state->__pyx_n_s_asarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_base);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_u_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_kp_s_collections_abc);
  Py_CLEAR(clear_module_state->__pyx_kp_s_contiguous_and_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_contiguous_and_indirect);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype_is_object);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_b_feature_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_feature_num);
  Py_CLEAR(clear_module_state->__pyx_n_s_flags);
  Py_CLEAR(clear_module_state->__pyx_n_s_float32);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_fortran);
  Py_CLEAR(clear_module_state->__pyx_n_u_fortran);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_pointer);
  Py_CLEAR(clear_module_state->__pyx_n_s_getdb);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_kp_u_got);
  Py_CLEAR(clear_module_state->__pyx_kp_u_got_differing_extents_in_dimensi);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_intp);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_itemsize);
  Py_CLEAR(clear_module_state->__pyx_kp_s_itemsize_0_for_cython_array);
  Py_CLEAR(clear_module_state->__pyx_n_b_label);
  Py_CLEAR(clear_module_state->__pyx_n_s_lgraph_db_python);
  Py_CLEAR(clear_module_state->__pyx_kp_s_lgraph_db_python_PyGraphDB);
  Py_CLEAR(clear_module_state->__pyx_kp_s_lgraph_db_python_PyOlapOnDB);
  Py_CLEAR(clear_module_state->__pyx_n_s_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_memview);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_obj);
  Py_CLEAR(clear_module_state->__pyx_n_s_olapondb);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_register);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_active_self_db_self_g_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_size_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_direct_or_indirect);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_indirect);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_struct);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_time);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tugraph_db_learn_procedures_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_uintp);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unable_to_allocate_array_data);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unable_to_allocate_shape_and_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_version_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_112105877);
  Py_CLEAR(clear_module_state->__pyx_int_136983863);
  Py_CLEAR(clear_module_state->__pyx_int_184977713);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_slice__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_5array_array);
  Py_VISIT(traverse_module_state->__pyx_ptype_5getdb_AllDb);
  Py_VISIT(traverse_module_state->__pyx_type_5getdb_AllDb);
  Py_VISIT(traverse_module_state->__pyx_array_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_array);
  Py_VISIT(traverse_module_state->__pyx_MemviewEnum_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_MemviewEnum);
  Py_VISIT(traverse_module_state->__pyx_memoryview_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryview);
  Py_VISIT(traverse_module_state->__pyx_memoryviewslice_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryviewslice);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_n_s_ASCII);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllDb);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllDb___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllDb___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_All_dimensions_preceding_dimensi);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Buffer_view_does_not_expose_stri);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Can_only_create_a_buffer_that_is);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_assign_to_read_only_memor);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_create_writable_memory_vi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_index_with_type);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_transpose_memoryview_with);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dimension_d_is_not_direct);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ellipsis);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Empty_shape_tuple_for_cython_arr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Index_out_of_bounds_axis_d);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Indirect_dimensions_not_supporte);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_mode_expected_c_or_fortr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_shape_in_axis);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_MemoryView_of_r_at_0x_x);
  Py_VISIT(traverse_module_state->__pyx_kp_s_MemoryView_of_r_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeInfo);
  Py_VISIT(traverse_module_state->__pyx_n_b_O);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Process);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sequence);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Step_may_not_be_zero_axis_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Unable_to_convert_item_to_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_View_MemoryView);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_s__26);
  Py_VISIT(traverse_module_state->__pyx_n_s__3);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_n_s_abc);
  Py_VISIT(traverse_module_state->__pyx_n_s_allocate_buffer);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and);
  Py_VISIT(traverse_module_state->__pyx_n_s_asarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_base);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_u_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_kp_s_collections_abc);
  Py_VISIT(traverse_module_state->__pyx_kp_s_contiguous_and_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_contiguous_and_indirect);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype_is_object);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_b_feature_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_feature_num);
  Py_VISIT(traverse_module_state->__pyx_n_s_flags);
  Py_VISIT(traverse_module_state->__pyx_n_s_float32);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_fortran);
  Py_VISIT(traverse_module_state->__pyx_n_u_fortran);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_pointer);
  Py_VISIT(traverse_module_state->__pyx_n_s_getdb);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_kp_u_got);
  Py_VISIT(traverse_module_state->__pyx_kp_u_got_differing_extents_in_dimensi);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_intp);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_itemsize);
  Py_VISIT(traverse_module_state->__pyx_kp_s_itemsize_0_for_cython_array);
  Py_VISIT(traverse_module_state->__pyx_n_b_label);
  Py_VISIT(traverse_module_state->__pyx_n_s_lgraph_db_python);
  Py_VISIT(traverse_module_state->__pyx_kp_s_lgraph_db_python_PyGraphDB);
  Py_VISIT(traverse_module_state->__pyx_kp_s_lgraph_db_python_PyOlapOnDB);
  Py_VISIT(traverse_module_state->__pyx_n_s_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_memview);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_obj);
  Py_VISIT(traverse_module_state->__pyx_n_s_olapondb);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_register);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_active_self_db_self_g_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_size_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_direct_or_indirect);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_indirect);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_struct);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_time);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tugraph_db_learn_procedures_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_uintp);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unable_to_allocate_array_data);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unable_to_allocate_shape_and_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_version_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_112105877);
  Py_VISIT(traverse_module_state->__pyx_int_136983863);
  Py_VISIT(traverse_module_state->__pyx_int_184977713);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_slice__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_USE_MODULE_STATE
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#define __pyx_ptype_7cpython_5array_array __pyx_mstate_global->__pyx_ptype_7cpython_5array_array
#define __pyx_ptype_5getdb_AllDb __pyx_mstate_global->__pyx_ptype_5getdb_AllDb
#define __pyx_type_5getdb_AllDb __pyx_mstate_global->__pyx_type_5getdb_AllDb
#define __pyx_array_type __pyx_mstate_global->__pyx_array_type
#define __pyx_type___pyx_array __pyx_mstate_global->__pyx_type___pyx_array
#define __pyx_MemviewEnum_type __pyx_mstate_global->__pyx_MemviewEnum_type
#define __pyx_type___pyx_MemviewEnum __pyx_mstate_global->__pyx_type___pyx_MemviewEnum
#define __pyx_memoryview_type __pyx_mstate_global->__pyx_memoryview_type
#define __pyx_type___pyx_memoryview __pyx_mstate_global->__pyx_type___pyx_memoryview
#define __pyx_memoryviewslice_type __pyx_mstate_global->__pyx_memoryviewslice_type
#define __pyx_type___pyx_memoryviewslice __pyx_mstate_global->__pyx_type___pyx_memoryviewslice
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_n_s_ASCII __pyx_mstate_global->__pyx_n_s_ASCII
#define __pyx_n_s_AllDb __pyx_mstate_global->__pyx_n_s_AllDb
#define __pyx_n_s_AllDb___reduce_cython __pyx_mstate_global->__pyx_n_s_AllDb___reduce_cython
#define __pyx_n_s_AllDb___setstate_cython __pyx_mstate_global->__pyx_n_s_AllDb___setstate_cython
#define __pyx_kp_s_All_dimensions_preceding_dimensi __pyx_mstate_global->__pyx_kp_s_All_dimensions_preceding_dimensi
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_kp_s_Buffer_view_does_not_expose_stri __pyx_mstate_global->__pyx_kp_s_Buffer_view_does_not_expose_stri
#define __pyx_kp_s_Can_only_create_a_buffer_that_is __pyx_mstate_global->__pyx_kp_s_Can_only_create_a_buffer_that_is
#define __pyx_kp_s_Cannot_assign_to_read_only_memor __pyx_mstate_global->__pyx_kp_s_Cannot_assign_to_read_only_memor
#define __pyx_kp_s_Cannot_create_writable_memory_vi __pyx_mstate_global->__pyx_kp_s_Cannot_create_writable_memory_vi
#define __pyx_kp_u_Cannot_index_with_type __pyx_mstate_global->__pyx_kp_u_Cannot_index_with_type
#define __pyx_kp_s_Cannot_transpose_memoryview_with __pyx_mstate_global->__pyx_kp_s_Cannot_transpose_memoryview_with
#define __pyx_kp_s_Dimension_d_is_not_direct __pyx_mstate_global->__pyx_kp_s_Dimension_d_is_not_direct
#define __pyx_n_s_EdgeInfo __pyx_mstate_global->__pyx_n_s_EdgeInfo
#define __pyx_n_s_Ellipsis __pyx_mstate_global->__pyx_n_s_Ellipsis
#define __pyx_kp_s_Empty_shape_tuple_for_cython_arr __pyx_mstate_global->__pyx_kp_s_Empty_shape_tuple_for_cython_arr
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_kp_s_Index_out_of_bounds_axis_d __pyx_mstate_global->__pyx_kp_s_Index_out_of_bounds_axis_d
#define __pyx_kp_s_Indirect_dimensions_not_supporte __pyx_mstate_global->__pyx_kp_s_Indirect_dimensions_not_supporte
#define __pyx_kp_u_Invalid_mode_expected_c_or_fortr __pyx_mstate_global->__pyx_kp_u_Invalid_mode_expected_c_or_fortr
#define __pyx_kp_u_Invalid_shape_in_axis __pyx_mstate_global->__pyx_kp_u_Invalid_shape_in_axis
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_s_MemoryView_of_r_at_0x_x __pyx_mstate_global->__pyx_kp_s_MemoryView_of_r_at_0x_x
#define __pyx_kp_s_MemoryView_of_r_object __pyx_mstate_global->__pyx_kp_s_MemoryView_of_r_object
#define __pyx_n_s_NodeInfo __pyx_mstate_global->__pyx_n_s_NodeInfo
#define __pyx_n_b_O __pyx_mstate_global->__pyx_n_b_O
#define __pyx_kp_u_Out_of_bounds_on_buffer_access_a __pyx_mstate_global->__pyx_kp_u_Out_of_bounds_on_buffer_access_a
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_Process __pyx_mstate_global->__pyx_n_s_Process
#define __pyx_n_s_Sequence __pyx_mstate_global->__pyx_n_s_Sequence
#define __pyx_kp_s_Step_may_not_be_zero_axis_d __pyx_mstate_global->__pyx_kp_s_Step_may_not_be_zero_axis_d
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_s_Unable_to_convert_item_to_object __pyx_mstate_global->__pyx_kp_s_Unable_to_convert_item_to_object
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_View_MemoryView __pyx_mstate_global->__pyx_n_s_View_MemoryView
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_s__26 __pyx_mstate_global->__pyx_n_s__26
#define __pyx_n_s__3 __pyx_mstate_global->__pyx_n_s__3
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_n_s_abc __pyx_mstate_global->__pyx_n_s_abc
#define __pyx_n_s_allocate_buffer __pyx_mstate_global->__pyx_n_s_allocate_buffer
#define __pyx_kp_u_and __pyx_mstate_global->__pyx_kp_u_and
#define __pyx_n_s_asarray __pyx_mstate_global->__pyx_n_s_asarray
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_base __pyx_mstate_global->__pyx_n_s_base
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_u_c __pyx_mstate_global->__pyx_n_u_c
#define __pyx_n_s_class __pyx_mstate_global->__pyx_n_s_class
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_kp_s_collections_abc __pyx_mstate_global->__pyx_kp_s_collections_abc
#define __pyx_kp_s_contiguous_and_direct __pyx_mstate_global->__pyx_kp_s_contiguous_and_direct
#define __pyx_kp_s_contiguous_and_indirect __pyx_mstate_global->__pyx_kp_s_contiguous_and_indirect
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_s_db __pyx_mstate_global->__pyx_n_s_db
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_dtype_is_object __pyx_mstate_global->__pyx_n_s_dtype_is_object
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_b_feature_float __pyx_mstate_global->__pyx_n_b_feature_float
#define __pyx_n_s_feature_num __pyx_mstate_global->__pyx_n_s_feature_num
#define __pyx_n_s_flags __pyx_mstate_global->__pyx_n_s_flags
#define __pyx_n_s_float32 __pyx_mstate_global->__pyx_n_s_float32
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_fortran __pyx_mstate_global->__pyx_n_s_fortran
#define __pyx_n_u_fortran __pyx_mstate_global->__pyx_n_u_fortran
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get_pointer __pyx_mstate_global->__pyx_n_s_get_pointer
#define __pyx_n_s_getdb __pyx_mstate_global->__pyx_n_s_getdb
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_kp_u_got __pyx_mstate_global->__pyx_kp_u_got
#define __pyx_kp_u_got_differing_extents_in_dimensi __pyx_mstate_global->__pyx_kp_u_got_differing_extents_in_dimensi
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_intp __pyx_mstate_global->__pyx_n_s_intp
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_itemsize __pyx_mstate_global->__pyx_n_s_itemsize
#define __pyx_kp_s_itemsize_0_for_cython_array __pyx_mstate_global->__pyx_kp_s_itemsize_0_for_cython_array
#define __pyx_n_b_label __pyx_mstate_global->__pyx_n_b_label
#define __pyx_n_s_lgraph_db_python __pyx_mstate_global->__pyx_n_s_lgraph_db_python
#define __pyx_kp_s_lgraph_db_python_PyGraphDB __pyx_mstate_global->__pyx_kp_s_lgraph_db_python_PyGraphDB
#define __pyx_kp_s_lgraph_db_python_PyOlapOnDB __pyx_mstate_global->__pyx_kp_s_lgraph_db_python_PyOlapOnDB
#define __pyx_n_s_list __pyx_mstate_global->__pyx_n_s_list
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_memview __pyx_mstate_global->__pyx_n_s_memview
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_ndim __pyx_mstate_global->__pyx_n_s_ndim
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_n_s_obj __pyx_mstate_global->__pyx_n_s_obj
#define __pyx_n_s_olapondb __pyx_mstate_global->__pyx_n_s_olapondb
#define __pyx_n_s_pack __pyx_mstate_global->__pyx_n_s_pack
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_Enum __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Enum
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_register __pyx_mstate_global->__pyx_n_s_register
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_active_self_db_self_g_self __pyx_mstate_global->__pyx_kp_s_self_active_self_db_self_g_self
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_size_t __pyx_mstate_global->__pyx_n_s_size_t
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_step __pyx_mstate_global->__pyx_n_s_step
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_kp_s_strided_and_direct __pyx_mstate_global->__pyx_kp_s_strided_and_direct
#define __pyx_kp_s_strided_and_direct_or_indirect __pyx_mstate_global->__pyx_kp_s_strided_and_direct_or_indirect
#define __pyx_kp_s_strided_and_indirect __pyx_mstate_global->__pyx_kp_s_strided_and_indirect
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_struct __pyx_mstate_global->__pyx_n_s_struct
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time
#define __pyx_kp_s_tugraph_db_learn_procedures_get __pyx_mstate_global->__pyx_kp_s_tugraph_db_learn_procedures_get
#define __pyx_n_s_uintp __pyx_mstate_global->__pyx_n_s_uintp
#define __pyx_kp_s_unable_to_allocate_array_data __pyx_mstate_global->__pyx_kp_s_unable_to_allocate_array_data
#define __pyx_kp_s_unable_to_allocate_shape_and_str __pyx_mstate_global->__pyx_kp_s_unable_to_allocate_shape_and_str
#define __pyx_n_s_unpack __pyx_mstate_global->__pyx_n_s_unpack
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_version_info __pyx_mstate_global->__pyx_n_s_version_info
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_112105877 __pyx_mstate_global->__pyx_int_112105877
#define __pyx_int_136983863 __pyx_mstate_global->__pyx_int_136983863
#define __pyx_int_184977713 __pyx_mstate_global->__pyx_int_184977713
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_slice__5 __pyx_mstate_global->__pyx_slice__5
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#endif
/* #### Code section: module_code ### */

/* "getdb.py":44
 *     local_dst_list: ssize_t[:,:]
 * 
 *     @cython.cfunc             # <<<<<<<<<<<<<<
 *     @cython.exceptval(check=False)
 *     def MergeList(self) ->cython.void:
 */

#line 44 "getdb.py"


#line 44 "getdb.py"
static void __pyx_f_5getdb_5AllDb_MergeList(struct __pyx_obj_5getdb_AllDb *__pyx_v_self) {
  __pyx_t_9lgraph_db_size_t __pyx_v_i
#line 44 "getdb.py"
;
  int __pyx_v_k
#line 44 "getdb.py"
;
  int __pyx_v_thread_id
#line 44 "getdb.py"
;

#line 44 "getdb.py"
  __Pyx_RefNannyDeclarations

#line 44 "getdb.py"
  int __pyx_t_1;

#line 44 "getdb.py"
  int __pyx_t_2;

#line 44 "getdb.py"
  int __pyx_t_3;

#line 44 "getdb.py"
  Py_ssize_t __pyx_t_4;

#line 44 "getdb.py"
  Py_ssize_t __pyx_t_5;

#line 44 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_6;

#line 44 "getdb.py"
  Py_ssize_t __pyx_t_7;

#line 44 "getdb.py"
  Py_ssize_t __pyx_t_8;

#line 44 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_9;

#line 44 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_10;

#line 44 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_11;

#line 44 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_12;

#line 44 "getdb.py"
  __Pyx_RefNannySetupContext("MergeList", 0);

  /* "getdb.py":50
 *         k: cython.int
 *         thread_id= cython.declare(cython.int)
 *         with cython.nogil, parallel():             # <<<<<<<<<<<<<<
 *             thread_id = omp_get_thread_num()
 *             for k in range(thread_id):
 */

#line 50 "getdb.py"
  {

#line 50 "getdb.py"
      #ifdef WITH_THREAD

#line 50 "getdb.py"
      PyThreadState *_save;

#line 50 "getdb.py"
      _save = NULL;

#line 50 "getdb.py"
      Py_UNBLOCK_THREADS

#line 50 "getdb.py"
      __Pyx_FastGIL_Remember();

#line 50 "getdb.py"
      #endif

#line 50 "getdb.py"
      /*try:*/ {

#line 50 "getdb.py"
        {

#line 50 "getdb.py"
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))

#line 50 "getdb.py"
                #undef likely

#line 50 "getdb.py"
                #undef unlikely

#line 50 "getdb.py"
                #define likely(x)   (x)

#line 50 "getdb.py"
                #define unlikely(x) (x)

#line 50 "getdb.py"
            #endif

#line 50 "getdb.py"
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_i, __pyx_v_k, __pyx_v_thread_id) private(__pyx_t_1, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9)
#line 50 "getdb.py"


#line 50 "getdb.py"
            #endif /* _OPENMP */

#line 50 "getdb.py"
            {

#line 50 "getdb.py"
                /* Initialize private variables to invalid values */

#line 50 "getdb.py"
                __pyx_v_i = ((__pyx_t_9lgraph_db_size_t)0xbad0bad0);

#line 50 "getdb.py"
                __pyx_v_k = ((int)0xbad0bad0);

#line 50 "getdb.py"
                __pyx_v_thread_id = ((int)0xbad0bad0);

                /* "getdb.py":51
 *         thread_id= cython.declare(cython.int)
 *         with cython.nogil, parallel():
 *             thread_id = omp_get_thread_num()             # <<<<<<<<<<<<<<
 *             for k in range(thread_id):
 *                 self.index[thread_id] += self.local_node_num[k]
 */

#line 51 "getdb.py"
                __pyx_v_thread_id = omp_get_thread_num();

                /* "getdb.py":52
 *         with cython.nogil, parallel():
 *             thread_id = omp_get_thread_num()
 *             for k in range(thread_id):             # <<<<<<<<<<<<<<
 *                 self.index[thread_id] += self.local_node_num[k]
 *                 self.edge_index[thread_id] += self.local_edge_num[k]
 */

#line 52 "getdb.py"
                __pyx_t_1 = __pyx_v_thread_id;

#line 52 "getdb.py"
                __pyx_t_2 = __pyx_t_1;

#line 52 "getdb.py"
                for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 52 "getdb.py"
                  __pyx_v_k = __pyx_t_3;

                  /* "getdb.py":53
 *             thread_id = omp_get_thread_num()
 *             for k in range(thread_id):
 *                 self.index[thread_id] += self.local_node_num[k]             # <<<<<<<<<<<<<<
 *                 self.edge_index[thread_id] += self.local_edge_num[k]
 *             memcpy(cython.address(self.node[self.index[thread_id]]), cython.address(self.local_node[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 */

#line 53 "getdb.py"
                  __pyx_t_4 = __pyx_v_k;

#line 53 "getdb.py"
                  __pyx_t_5 = __pyx_v_thread_id;

#line 53 "getdb.py"
                  *((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->index.data + __pyx_t_5 * __pyx_v_self->index.strides[0]) )) += (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_4 * __pyx_v_self->local_node_num.strides[0]) )));

                  /* "getdb.py":54
 *             for k in range(thread_id):
 *                 self.index[thread_id] += self.local_node_num[k]
 *                 self.edge_index[thread_id] += self.local_edge_num[k]             # <<<<<<<<<<<<<<
 *             memcpy(cython.address(self.node[self.index[thread_id]]), cython.address(self.local_node[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 *             memcpy(cython.address(self.label[self.index[thread_id]]), cython.address(self.local_label[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 */

#line 54 "getdb.py"
                  __pyx_t_4 = __pyx_v_k;

#line 54 "getdb.py"
                  __pyx_t_5 = __pyx_v_thread_id;

#line 54 "getdb.py"
                  *((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->edge_index.data + __pyx_t_5 * __pyx_v_self->edge_index.strides[0]) )) += (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_4 * __pyx_v_self->local_edge_num.strides[0]) )));

#line 54 "getdb.py"
                }

                /* "getdb.py":55
 *                 self.index[thread_id] += self.local_node_num[k]
 *                 self.edge_index[thread_id] += self.local_edge_num[k]
 *             memcpy(cython.address(self.node[self.index[thread_id]]), cython.address(self.local_node[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))             # <<<<<<<<<<<<<<
 *             memcpy(cython.address(self.label[self.index[thread_id]]), cython.address(self.local_label[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 *             for i in range(self.local_node_num[thread_id]):
 */

#line 55 "getdb.py"
                __pyx_t_4 = __pyx_v_thread_id;

#line 55 "getdb.py"
                __pyx_t_6 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->index.data + __pyx_t_4 * __pyx_v_self->index.strides[0]) )));

#line 55 "getdb.py"
                __pyx_t_5 = __pyx_v_thread_id;

#line 55 "getdb.py"
                __pyx_t_7 = 0;

#line 55 "getdb.py"
                __pyx_t_8 = __pyx_v_thread_id;

#line 55 "getdb.py"
                (void)(memcpy((&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=0 */ (__pyx_v_self->node.data + __pyx_t_6 * __pyx_v_self->node.strides[0]) )))), (&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_node.data + __pyx_t_5 * __pyx_v_self->local_node.strides[0]) ) + __pyx_t_7 * __pyx_v_self->local_node.strides[1]) )))), ((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_8 * __pyx_v_self->local_node_num.strides[0]) ))) * (sizeof(Py_ssize_t)))));

                /* "getdb.py":56
 *                 self.edge_index[thread_id] += self.local_edge_num[k]
 *             memcpy(cython.address(self.node[self.index[thread_id]]), cython.address(self.local_node[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 *             memcpy(cython.address(self.label[self.index[thread_id]]), cython.address(self.local_label[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))             # <<<<<<<<<<<<<<
 *             for i in range(self.local_node_num[thread_id]):
 *                 memcpy(cython.address(self.feature[self.index[thread_id] + i, 0]), cython.address(self.local_feature[thread_id, i, 0]), self.feature_num * cython.sizeof(cython.float))
 */

#line 56 "getdb.py"
                __pyx_t_8 = __pyx_v_thread_id;

#line 56 "getdb.py"
                __pyx_t_6 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->index.data + __pyx_t_8 * __pyx_v_self->index.strides[0]) )));

#line 56 "getdb.py"
                __pyx_t_7 = __pyx_v_thread_id;

#line 56 "getdb.py"
                __pyx_t_5 = 0;

#line 56 "getdb.py"
                __pyx_t_4 = __pyx_v_thread_id;

#line 56 "getdb.py"
                (void)(memcpy((&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=0 */ (__pyx_v_self->label.data + __pyx_t_6 * __pyx_v_self->label.strides[0]) )))), (&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_label.data + __pyx_t_7 * __pyx_v_self->local_label.strides[0]) ) + __pyx_t_5 * __pyx_v_self->local_label.strides[1]) )))), ((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_4 * __pyx_v_self->local_node_num.strides[0]) ))) * (sizeof(Py_ssize_t)))));

                /* "getdb.py":57
 *             memcpy(cython.address(self.node[self.index[thread_id]]), cython.address(self.local_node[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 *             memcpy(cython.address(self.label[self.index[thread_id]]), cython.address(self.local_label[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 *             for i in range(self.local_node_num[thread_id]):             # <<<<<<<<<<<<<<
 *                 memcpy(cython.address(self.feature[self.index[thread_id] + i, 0]), cython.address(self.local_feature[thread_id, i, 0]), self.feature_num * cython.sizeof(cython.float))
 *             memcpy(cython.address(self.src_list[self.edge_index[thread_id]]), cython.address(self.local_src_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 */

#line 57 "getdb.py"
                __pyx_t_4 = __pyx_v_thread_id;

#line 57 "getdb.py"
                __pyx_t_6 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_4 * __pyx_v_self->local_node_num.strides[0]) )));

#line 57 "getdb.py"
                __pyx_t_9 = __pyx_t_6;

#line 57 "getdb.py"
                for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {

#line 57 "getdb.py"
                  __pyx_v_i = __pyx_t_10;

                  /* "getdb.py":58
 *             memcpy(cython.address(self.label[self.index[thread_id]]), cython.address(self.local_label[thread_id, 0]), self.local_node_num[thread_id] * cython.sizeof(ssize_t))
 *             for i in range(self.local_node_num[thread_id]):
 *                 memcpy(cython.address(self.feature[self.index[thread_id] + i, 0]), cython.address(self.local_feature[thread_id, i, 0]), self.feature_num * cython.sizeof(cython.float))             # <<<<<<<<<<<<<<
 *             memcpy(cython.address(self.src_list[self.edge_index[thread_id]]), cython.address(self.local_src_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 *             memcpy(cython.address(self.dst_list[self.edge_index[thread_id]]), cython.address(self.local_dst_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 */

#line 58 "getdb.py"
                  __pyx_t_4 = __pyx_v_thread_id;

#line 58 "getdb.py"
                  __pyx_t_11 = ((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->index.data + __pyx_t_4 * __pyx_v_self->index.strides[0]) ))) + __pyx_v_i);

#line 58 "getdb.py"
                  __pyx_t_5 = 0;

#line 58 "getdb.py"
                  __pyx_t_7 = __pyx_v_thread_id;

#line 58 "getdb.py"
                  __pyx_t_12 = __pyx_v_i;

#line 58 "getdb.py"
                  __pyx_t_8 = 0;

#line 58 "getdb.py"
                  (void)(memcpy((&(*((float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->feature.data + __pyx_t_11 * __pyx_v_self->feature.strides[0]) ) + __pyx_t_5 * __pyx_v_self->feature.strides[1]) )))), (&(*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_feature.data + __pyx_t_7 * __pyx_v_self->local_feature.strides[0]) ) + __pyx_t_12 * __pyx_v_self->local_feature.strides[1]) ) + __pyx_t_8 * __pyx_v_self->local_feature.strides[2]) )))), (__pyx_v_self->feature_num * (sizeof(float)))));

#line 58 "getdb.py"
                }

                /* "getdb.py":59
 *             for i in range(self.local_node_num[thread_id]):
 *                 memcpy(cython.address(self.feature[self.index[thread_id] + i, 0]), cython.address(self.local_feature[thread_id, i, 0]), self.feature_num * cython.sizeof(cython.float))
 *             memcpy(cython.address(self.src_list[self.edge_index[thread_id]]), cython.address(self.local_src_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))             # <<<<<<<<<<<<<<
 *             memcpy(cython.address(self.dst_list[self.edge_index[thread_id]]), cython.address(self.local_dst_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 * 
 */

#line 59 "getdb.py"
                __pyx_t_8 = __pyx_v_thread_id;

#line 59 "getdb.py"
                __pyx_t_6 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->edge_index.data + __pyx_t_8 * __pyx_v_self->edge_index.strides[0]) )));

#line 59 "getdb.py"
                __pyx_t_7 = __pyx_v_thread_id;

#line 59 "getdb.py"
                __pyx_t_4 = 0;

#line 59 "getdb.py"
                __pyx_t_5 = __pyx_v_thread_id;

#line 59 "getdb.py"
                (void)(memcpy((&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=0 */ (__pyx_v_self->src_list.data + __pyx_t_6 * __pyx_v_self->src_list.strides[0]) )))), (&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_src_list.data + __pyx_t_7 * __pyx_v_self->local_src_list.strides[0]) ) + __pyx_t_4 * __pyx_v_self->local_src_list.strides[1]) )))), ((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_5 * __pyx_v_self->local_edge_num.strides[0]) ))) * (sizeof(Py_ssize_t)))));

                /* "getdb.py":60
 *                 memcpy(cython.address(self.feature[self.index[thread_id] + i, 0]), cython.address(self.local_feature[thread_id, i, 0]), self.feature_num * cython.sizeof(cython.float))
 *             memcpy(cython.address(self.src_list[self.edge_index[thread_id]]), cython.address(self.local_src_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 *             memcpy(cython.address(self.dst_list[self.edge_index[thread_id]]), cython.address(self.local_dst_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))             # <<<<<<<<<<<<<<
 * 
 *     @cython.cfunc
 */

#line 60 "getdb.py"
                __pyx_t_5 = __pyx_v_thread_id;

#line 60 "getdb.py"
                __pyx_t_6 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->edge_index.data + __pyx_t_5 * __pyx_v_self->edge_index.strides[0]) )));

#line 60 "getdb.py"
                __pyx_t_4 = __pyx_v_thread_id;

#line 60 "getdb.py"
                __pyx_t_7 = 0;

#line 60 "getdb.py"
                __pyx_t_8 = __pyx_v_thread_id;

#line 60 "getdb.py"
                (void)(memcpy((&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=0 */ (__pyx_v_self->dst_list.data + __pyx_t_6 * __pyx_v_self->dst_list.strides[0]) )))), (&(*((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_dst_list.data + __pyx_t_4 * __pyx_v_self->local_dst_list.strides[0]) ) + __pyx_t_7 * __pyx_v_self->local_dst_list.strides[1]) )))), ((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_8 * __pyx_v_self->local_edge_num.strides[0]) ))) * (sizeof(Py_ssize_t)))));

#line 60 "getdb.py"
            }

#line 60 "getdb.py"
        }

#line 60 "getdb.py"
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))

#line 60 "getdb.py"
            #undef likely

#line 60 "getdb.py"
            #undef unlikely

#line 60 "getdb.py"
            #define likely(x)   __builtin_expect(!!(x), 1)

#line 60 "getdb.py"
            #define unlikely(x) __builtin_expect(!!(x), 0)

#line 60 "getdb.py"
        #endif

#line 60 "getdb.py"
      }

      /* "getdb.py":50
 *         k: cython.int
 *         thread_id= cython.declare(cython.int)
 *         with cython.nogil, parallel():             # <<<<<<<<<<<<<<
 *             thread_id = omp_get_thread_num()
 *             for k in range(thread_id):
 */

#line 50 "getdb.py"
      /*finally:*/ {

#line 50 "getdb.py"
        /*normal exit:*/{

#line 50 "getdb.py"
          #ifdef WITH_THREAD

#line 50 "getdb.py"
          __Pyx_FastGIL_Forget();

#line 50 "getdb.py"
          Py_BLOCK_THREADS

#line 50 "getdb.py"
          #endif

#line 50 "getdb.py"
          goto __pyx_L5;

#line 50 "getdb.py"
        }

#line 50 "getdb.py"
        __pyx_L5:;

#line 50 "getdb.py"
      }

#line 50 "getdb.py"
  }

  /* "getdb.py":44
 *     local_dst_list: ssize_t[:,:]
 * 
 *     @cython.cfunc             # <<<<<<<<<<<<<<
 *     @cython.exceptval(check=False)
 *     def MergeList(self) ->cython.void:
 */

#line 44 "getdb.py"


#line 44 "getdb.py"
  /* function exit code */

#line 44 "getdb.py"
  __Pyx_RefNannyFinishContext();

#line 44 "getdb.py"
}

/* "getdb.py":62
 *             memcpy(cython.address(self.dst_list[self.edge_index[thread_id]]), cython.address(self.local_dst_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 * 
 *     @cython.cfunc             # <<<<<<<<<<<<<<
 *     @cython.nogil
 *     @cython.exceptval(check=False)
 */

#line 62 "getdb.py"


#line 62 "getdb.py"
static __pyx_t_9lgraph_db_size_t __pyx_f_5getdb_5AllDb_Work(struct __pyx_obj_5getdb_AllDb *__pyx_v_self, __pyx_t_9lgraph_db_size_t __pyx_v_vi) {
  __pyx_t_9lgraph_db_size_t __pyx_v_i
#line 62 "getdb.py"
;
  int __pyx_v_thread_id
#line 62 "getdb.py"
;
  __Pyx_Optional_Type<lgraph_api::Transaction> __pyx_v_local_txn
#line 62 "getdb.py"
;
  size_t __pyx_v_degree
#line 62 "getdb.py"
;
  __Pyx_Optional_Type<lgraph_api::VertexIterator> __pyx_v_vit
#line 62 "getdb.py"
;
  __Pyx_Optional_Type<std::string> __pyx_v_feat_string
#line 62 "getdb.py"
;
  float *__pyx_v_feature_list
#line 62 "getdb.py"
;
  __pyx_t_9lgraph_db_int32_t __pyx_v_label_string
#line 62 "getdb.py"
;
  __Pyx_Optional_Type<lgraph_api::olap::AdjList<struct lgraph_api::olap::Empty> > __pyx_v_out_edges
#line 62 "getdb.py"
;

#line 62 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_r;

#line 62 "getdb.py"
  Py_ssize_t __pyx_t_1;

#line 62 "getdb.py"
  Py_ssize_t __pyx_t_2;

#line 62 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_3;

#line 62 "getdb.py"
  Py_ssize_t __pyx_t_4;

#line 62 "getdb.py"
  size_t __pyx_t_5;

#line 62 "getdb.py"
  size_t __pyx_t_6;

#line 62 "getdb.py"
  __pyx_t_9lgraph_db_size_t __pyx_t_7;

#line 62 "getdb.py"
  size_t __pyx_t_8;

  /* "getdb.py":69
 *         thread_id= cython.declare(cython.int)
 * 
 *         thread_id = omp_get_thread_num()             # <<<<<<<<<<<<<<
 *         local_txn = self.db.ForkTxn(self.txn)
 *         degree = cython.declare(size_t, self.g.OutDegree(vi))
 */

#line 69 "getdb.py"
  __pyx_v_thread_id = omp_get_thread_num();

  /* "getdb.py":70
 * 
 *         thread_id = omp_get_thread_num()
 *         local_txn = self.db.ForkTxn(self.txn)             # <<<<<<<<<<<<<<
 *         degree = cython.declare(size_t, self.g.OutDegree(vi))
 *         vit = local_txn.GetVertexIterator()
 */

#line 70 "getdb.py"
  __pyx_v_local_txn = __pyx_v_self->db->ForkTxn((*__pyx_v_self->txn));

  /* "getdb.py":71
 *         thread_id = omp_get_thread_num()
 *         local_txn = self.db.ForkTxn(self.txn)
 *         degree = cython.declare(size_t, self.g.OutDegree(vi))             # <<<<<<<<<<<<<<
 *         vit = local_txn.GetVertexIterator()
 *         vit.Goto(vi)
 */

#line 71 "getdb.py"
  __pyx_v_degree = __pyx_v_self->g->OutDegree(__pyx_v_vi);

  /* "getdb.py":72
 *         local_txn = self.db.ForkTxn(self.txn)
 *         degree = cython.declare(size_t, self.g.OutDegree(vi))
 *         vit = local_txn.GetVertexIterator()             # <<<<<<<<<<<<<<
 *         vit.Goto(vi)
 *         feat_string = vit.GetField(self.feature_key).ToString()
 */

#line 72 "getdb.py"
  __pyx_v_vit = (*__pyx_v_local_txn).GetVertexIterator();

  /* "getdb.py":73
 *         degree = cython.declare(size_t, self.g.OutDegree(vi))
 *         vit = local_txn.GetVertexIterator()
 *         vit.Goto(vi)             # <<<<<<<<<<<<<<
 *         feat_string = vit.GetField(self.feature_key).ToString()
 *         feature_list = cython.cast(cython.p_float, feat_string.c_str())
 */

#line 73 "getdb.py"
  (void)((*__pyx_v_vit).Goto(__pyx_v_vi, NULL));

  /* "getdb.py":74
 *         vit = local_txn.GetVertexIterator()
 *         vit.Goto(vi)
 *         feat_string = vit.GetField(self.feature_key).ToString()             # <<<<<<<<<<<<<<
 *         feature_list = cython.cast(cython.p_float, feat_string.c_str())
 *         label_string = vit.GetField(self.label_key).AsInt32()
 */

#line 74 "getdb.py"
  __pyx_v_feat_string = (*__pyx_v_vit).GetField((*__pyx_v_self->feature_key)).ToString();

  /* "getdb.py":75
 *         vit.Goto(vi)
 *         feat_string = vit.GetField(self.feature_key).ToString()
 *         feature_list = cython.cast(cython.p_float, feat_string.c_str())             # <<<<<<<<<<<<<<
 *         label_string = vit.GetField(self.label_key).AsInt32()
 *         memcpy(cython.address(self.local_feature[thread_id, self.local_node_num[thread_id], 0]), feature_list, self.feature_num * cython.sizeof(cython.float))
 */

#line 75 "getdb.py"
  __pyx_v_feature_list = ((float *)(*__pyx_v_feat_string).c_str());

  /* "getdb.py":76
 *         feat_string = vit.GetField(self.feature_key).ToString()
 *         feature_list = cython.cast(cython.p_float, feat_string.c_str())
 *         label_string = vit.GetField(self.label_key).AsInt32()             # <<<<<<<<<<<<<<
 *         memcpy(cython.address(self.local_feature[thread_id, self.local_node_num[thread_id], 0]), feature_list, self.feature_num * cython.sizeof(cython.float))
 *         self.local_label[thread_id, self.local_node_num[thread_id]] = label_string
 */

#line 76 "getdb.py"
  __pyx_v_label_string = (*__pyx_v_vit).GetField((*__pyx_v_self->label_key)).AsInt32();

  /* "getdb.py":77
 *         feature_list = cython.cast(cython.p_float, feat_string.c_str())
 *         label_string = vit.GetField(self.label_key).AsInt32()
 *         memcpy(cython.address(self.local_feature[thread_id, self.local_node_num[thread_id], 0]), feature_list, self.feature_num * cython.sizeof(cython.float))             # <<<<<<<<<<<<<<
 *         self.local_label[thread_id, self.local_node_num[thread_id]] = label_string
 *         self.local_node[thread_id, self.local_node_num[thread_id]] = vi
 */

#line 77 "getdb.py"
  __pyx_t_1 = __pyx_v_thread_id;

#line 77 "getdb.py"
  __pyx_t_2 = __pyx_v_thread_id;

#line 77 "getdb.py"
  __pyx_t_3 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_1 * __pyx_v_self->local_node_num.strides[0]) )));

#line 77 "getdb.py"
  __pyx_t_4 = 0;

#line 77 "getdb.py"
  (void)(memcpy((&(*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_feature.data + __pyx_t_2 * __pyx_v_self->local_feature.strides[0]) ) + __pyx_t_3 * __pyx_v_self->local_feature.strides[1]) ) + __pyx_t_4 * __pyx_v_self->local_feature.strides[2]) )))), __pyx_v_feature_list, (__pyx_v_self->feature_num * (sizeof(float)))));

  /* "getdb.py":78
 *         label_string = vit.GetField(self.label_key).AsInt32()
 *         memcpy(cython.address(self.local_feature[thread_id, self.local_node_num[thread_id], 0]), feature_list, self.feature_num * cython.sizeof(cython.float))
 *         self.local_label[thread_id, self.local_node_num[thread_id]] = label_string             # <<<<<<<<<<<<<<
 *         self.local_node[thread_id, self.local_node_num[thread_id]] = vi
 *         self.local_node_num[thread_id] += 1
 */

#line 78 "getdb.py"
  __pyx_t_1 = __pyx_v_thread_id;

#line 78 "getdb.py"
  __pyx_t_4 = __pyx_v_thread_id;

#line 78 "getdb.py"
  __pyx_t_3 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_1 * __pyx_v_self->local_node_num.strides[0]) )));

#line 78 "getdb.py"
  *((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_label.data + __pyx_t_4 * __pyx_v_self->local_label.strides[0]) ) + __pyx_t_3 * __pyx_v_self->local_label.strides[1]) )) = __pyx_v_label_string;

  /* "getdb.py":79
 *         memcpy(cython.address(self.local_feature[thread_id, self.local_node_num[thread_id], 0]), feature_list, self.feature_num * cython.sizeof(cython.float))
 *         self.local_label[thread_id, self.local_node_num[thread_id]] = label_string
 *         self.local_node[thread_id, self.local_node_num[thread_id]] = vi             # <<<<<<<<<<<<<<
 *         self.local_node_num[thread_id] += 1
 *         out_edges = cython.declare(AdjList[Empty], self.g.OutEdges(vi))
 */

#line 79 "getdb.py"
  __pyx_t_1 = __pyx_v_thread_id;

#line 79 "getdb.py"
  __pyx_t_4 = __pyx_v_thread_id;

#line 79 "getdb.py"
  __pyx_t_3 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_1 * __pyx_v_self->local_node_num.strides[0]) )));

#line 79 "getdb.py"
  *((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_node.data + __pyx_t_4 * __pyx_v_self->local_node.strides[0]) ) + __pyx_t_3 * __pyx_v_self->local_node.strides[1]) )) = __pyx_v_vi;

  /* "getdb.py":80
 *         self.local_label[thread_id, self.local_node_num[thread_id]] = label_string
 *         self.local_node[thread_id, self.local_node_num[thread_id]] = vi
 *         self.local_node_num[thread_id] += 1             # <<<<<<<<<<<<<<
 *         out_edges = cython.declare(AdjList[Empty], self.g.OutEdges(vi))
 *         for i in range(degree):
 */

#line 80 "getdb.py"
  __pyx_t_1 = __pyx_v_thread_id;

#line 80 "getdb.py"
  *((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_1 * __pyx_v_self->local_node_num.strides[0]) )) += 1;

  /* "getdb.py":81
 *         self.local_node[thread_id, self.local_node_num[thread_id]] = vi
 *         self.local_node_num[thread_id] += 1
 *         out_edges = cython.declare(AdjList[Empty], self.g.OutEdges(vi))             # <<<<<<<<<<<<<<
 *         for i in range(degree):
 *             self.local_src_list[thread_id, self.local_edge_num[thread_id]] = vi
 */

#line 81 "getdb.py"
  __pyx_v_out_edges = __pyx_v_self->g->OutEdges(__pyx_v_vi);

  /* "getdb.py":82
 *         self.local_node_num[thread_id] += 1
 *         out_edges = cython.declare(AdjList[Empty], self.g.OutEdges(vi))
 *         for i in range(degree):             # <<<<<<<<<<<<<<
 *             self.local_src_list[thread_id, self.local_edge_num[thread_id]] = vi
 *             self.local_dst_list[thread_id, self.local_edge_num[thread_id]] = out_edges[i].neighbour
 */

#line 82 "getdb.py"
  __pyx_t_5 = __pyx_v_degree;

#line 82 "getdb.py"
  __pyx_t_6 = __pyx_t_5;

#line 82 "getdb.py"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_6; __pyx_t_3+=1) {

#line 82 "getdb.py"
    __pyx_v_i = __pyx_t_3;

    /* "getdb.py":83
 *         out_edges = cython.declare(AdjList[Empty], self.g.OutEdges(vi))
 *         for i in range(degree):
 *             self.local_src_list[thread_id, self.local_edge_num[thread_id]] = vi             # <<<<<<<<<<<<<<
 *             self.local_dst_list[thread_id, self.local_edge_num[thread_id]] = out_edges[i].neighbour
 *             self.local_edge_num[thread_id] += 1
 */

#line 83 "getdb.py"
    __pyx_t_1 = __pyx_v_thread_id;

#line 83 "getdb.py"
    __pyx_t_4 = __pyx_v_thread_id;

#line 83 "getdb.py"
    __pyx_t_7 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_1 * __pyx_v_self->local_edge_num.strides[0]) )));

#line 83 "getdb.py"
    *((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_src_list.data + __pyx_t_4 * __pyx_v_self->local_src_list.strides[0]) ) + __pyx_t_7 * __pyx_v_self->local_src_list.strides[1]) )) = __pyx_v_vi;

    /* "getdb.py":84
 *         for i in range(degree):
 *             self.local_src_list[thread_id, self.local_edge_num[thread_id]] = vi
 *             self.local_dst_list[thread_id, self.local_edge_num[thread_id]] = out_edges[i].neighbour             # <<<<<<<<<<<<<<
 *             self.local_edge_num[thread_id] += 1
 *         local_txn.Abort()
 */

#line 84 "getdb.py"
    __pyx_t_8 = ((*__pyx_v_out_edges)[__pyx_v_i]).neighbour;

#line 84 "getdb.py"
    __pyx_t_1 = __pyx_v_thread_id;

#line 84 "getdb.py"
    __pyx_t_4 = __pyx_v_thread_id;

#line 84 "getdb.py"
    __pyx_t_7 = (*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_1 * __pyx_v_self->local_edge_num.strides[0]) )));

#line 84 "getdb.py"
    *((__pyx_t_9lgraph_db_ssize_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->local_dst_list.data + __pyx_t_4 * __pyx_v_self->local_dst_list.strides[0]) ) + __pyx_t_7 * __pyx_v_self->local_dst_list.strides[1]) )) = __pyx_t_8;

    /* "getdb.py":85
 *             self.local_src_list[thread_id, self.local_edge_num[thread_id]] = vi
 *             self.local_dst_list[thread_id, self.local_edge_num[thread_id]] = out_edges[i].neighbour
 *             self.local_edge_num[thread_id] += 1             # <<<<<<<<<<<<<<
 *         local_txn.Abort()
 *         return 0
 */

#line 85 "getdb.py"
    __pyx_t_1 = __pyx_v_thread_id;

#line 85 "getdb.py"
    *((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_1 * __pyx_v_self->local_edge_num.strides[0]) )) += 1;

#line 85 "getdb.py"
  }

  /* "getdb.py":86
 *             self.local_dst_list[thread_id, self.local_edge_num[thread_id]] = out_edges[i].neighbour
 *             self.local_edge_num[thread_id] += 1
 *         local_txn.Abort()             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

#line 86 "getdb.py"
  (*__pyx_v_local_txn).Abort();

  /* "getdb.py":87
 *             self.local_edge_num[thread_id] += 1
 *         local_txn.Abort()
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.cfunc
 */

#line 87 "getdb.py"
  __pyx_r = 0;

#line 87 "getdb.py"
  goto __pyx_L0;

  /* "getdb.py":62
 *             memcpy(cython.address(self.dst_list[self.edge_index[thread_id]]), cython.address(self.local_dst_list[thread_id, 0]), self.local_edge_num[thread_id] * cython.sizeof(ssize_t))
 * 
 *     @cython.cfunc             # <<<<<<<<<<<<<<
 *     @cython.nogil
 *     @cython.exceptval(check=False)
 */

#line 62 "getdb.py"


#line 62 "getdb.py"
  /* function exit code */

#line 62 "getdb.py"
  __pyx_L0:;

#line 62 "getdb.py"
  return __pyx_r;

#line 62 "getdb.py"
}

/* "getdb.py":89
 *         return 0
 * 
 *     @cython.cfunc             # <<<<<<<<<<<<<<
 *     @cython.exceptval(check=False)
 *     def run(self, db: cython.pointer(GraphDB), olapondb:cython.pointer(OlapOnDB[Empty]), feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 */

#line 89 "getdb.py"


#line 89 "getdb.py"
static PyObject *__pyx_f_5getdb_5AllDb_run(struct __pyx_obj_5getdb_AllDb *__pyx_v_self, lgraph_api::GraphDB *__pyx_v_db, lgraph_api::olap::OlapOnDB<struct lgraph_api::olap::Empty>  *__pyx_v_olapondb, __pyx_t_9lgraph_db_size_t __pyx_v_feature_num, PyObject *__pyx_v_NodeInfo, PyObject *__pyx_v_EdgeInfo) {
  CYTHON_UNUSED PyObject *__pyx_v_start = NULL
#line 89 "getdb.py"
;
  CYTHON_UNUSED PyObject *__pyx_v_cost = NULL
#line 89 "getdb.py"
;
  CYTHON_UNUSED PyObject *__pyx_v_sample_cost = NULL
#line 89 "getdb.py"
;
  PyObject *__pyx_v_sample_node_num = NULL
#line 89 "getdb.py"
;
  PyObject *__pyx_v_sample_edge_num = NULL
#line 89 "getdb.py"
;
  int __pyx_v_id
#line 89 "getdb.py"
;
  CYTHON_UNUSED PyObject *__pyx_v_end_cost = NULL
#line 89 "getdb.py"
;

#line 89 "getdb.py"
  PyObject *__pyx_r = NULL;

#line 89 "getdb.py"
  __Pyx_RefNannyDeclarations

#line 89 "getdb.py"
  PyObject *__pyx_t_1 = NULL;

#line 89 "getdb.py"
  PyObject *__pyx_t_2 = NULL;

#line 89 "getdb.py"
  PyObject *__pyx_t_3 = NULL;

#line 89 "getdb.py"
  int __pyx_t_4;

#line 89 "getdb.py"
  PyObject *__pyx_t_5 = NULL;

#line 89 "getdb.py"
  PyObject *__pyx_t_6 = NULL;

#line 89 "getdb.py"
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };

#line 89 "getdb.py"
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };

#line 89 "getdb.py"
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };

#line 89 "getdb.py"
  __Pyx_Optional_Type<std::string> __pyx_t_10;

#line 89 "getdb.py"
  int __pyx_t_11;

#line 89 "getdb.py"
  int __pyx_t_12;

#line 89 "getdb.py"
  Py_ssize_t __pyx_t_13;

#line 89 "getdb.py"
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };

#line 89 "getdb.py"
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };

#line 89 "getdb.py"
  int __pyx_t_16;

#line 89 "getdb.py"
  int __pyx_lineno = 0;

#line 89 "getdb.py"
  const char *__pyx_filename = NULL;

#line 89 "getdb.py"
  int __pyx_clineno = 0;

#line 89 "getdb.py"
  __Pyx_RefNannySetupContext("run", 0);

  /* "getdb.py":92
 *     @cython.exceptval(check=False)
 *     def run(self, db: cython.pointer(GraphDB), olapondb:cython.pointer(OlapOnDB[Empty]), feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *         start = time.time()             # <<<<<<<<<<<<<<
 *         self.txn = db.CreateReadTxn()
 *         self.g = olapondb
 */

#line 92 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)

#line 92 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 92 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)

#line 92 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 92 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 92 "getdb.py"
  __pyx_t_2 = NULL;

#line 92 "getdb.py"
  __pyx_t_4 = 0;

#line 92 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 92 "getdb.py"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 92 "getdb.py"
    if (likely(__pyx_t_2)) {

#line 92 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 92 "getdb.py"
      __Pyx_INCREF(__pyx_t_2);

#line 92 "getdb.py"
      __Pyx_INCREF(function);

#line 92 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 92 "getdb.py"
      __pyx_t_4 = 1;

#line 92 "getdb.py"
    }

#line 92 "getdb.py"
  }

#line 92 "getdb.py"
  {

#line 92 "getdb.py"
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };

#line 92 "getdb.py"
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 92 "getdb.py"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 92 "getdb.py"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)

#line 92 "getdb.py"
    __Pyx_GOTREF(__pyx_t_1);

#line 92 "getdb.py"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 92 "getdb.py"
  }

#line 92 "getdb.py"
  __pyx_v_start = __pyx_t_1;

#line 92 "getdb.py"
  __pyx_t_1 = 0;

  /* "getdb.py":93
 *     def run(self, db: cython.pointer(GraphDB), olapondb:cython.pointer(OlapOnDB[Empty]), feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *         start = time.time()
 *         self.txn = db.CreateReadTxn()             # <<<<<<<<<<<<<<
 *         self.g = olapondb
 *         self.db = db
 */

#line 93 "getdb.py"
  __pyx_v_self->txn = __pyx_v_db->CreateReadTxn();

  /* "getdb.py":94
 *         start = time.time()
 *         self.txn = db.CreateReadTxn()
 *         self.g = olapondb             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.feature_num = cython.cast(size_t, feature_num)
 */

#line 94 "getdb.py"
  __pyx_v_self->g = __pyx_v_olapondb;

  /* "getdb.py":95
 *         self.txn = db.CreateReadTxn()
 *         self.g = olapondb
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.feature_num = cython.cast(size_t, feature_num)
 *         self.flag = np.zeros((olapondb[0].NumVertices(),), dtype=np.uintp)
 */

#line 95 "getdb.py"
  __pyx_v_self->db = __pyx_v_db;

  /* "getdb.py":96
 *         self.g = olapondb
 *         self.db = db
 *         self.feature_num = cython.cast(size_t, feature_num)             # <<<<<<<<<<<<<<
 *         self.flag = np.zeros((olapondb[0].NumVertices(),), dtype=np.uintp)
 *         with cython.nogil, parallel():
 */

#line 96 "getdb.py"
  __pyx_v_self->feature_num = ((size_t)__pyx_v_feature_num);

  /* "getdb.py":97
 *         self.db = db
 *         self.feature_num = cython.cast(size_t, feature_num)
 *         self.flag = np.zeros((olapondb[0].NumVertices(),), dtype=np.uintp)             # <<<<<<<<<<<<<<
 *         with cython.nogil, parallel():
 *             self.num_threads = omp_get_num_threads()
 */

#line 97 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 97 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 97 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_olapondb[0]).NumVertices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 97 "getdb.py"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 97 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 97 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 97 "getdb.py"
  __pyx_t_1 = 0;

#line 97 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 97 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_2);

#line 97 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 97 "getdb.py"
  __pyx_t_2 = 0;

#line 97 "getdb.py"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 97 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 97 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uintp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 97 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "getdb.py"
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 97, __pyx_L1_error)

#line 97 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->flag, 0);

#line 97 "getdb.py"
  __pyx_v_self->flag = __pyx_t_7;

#line 97 "getdb.py"
  __pyx_t_7.memview = NULL;

#line 97 "getdb.py"
  __pyx_t_7.data = NULL;

  /* "getdb.py":98
 *         self.feature_num = cython.cast(size_t, feature_num)
 *         self.flag = np.zeros((olapondb[0].NumVertices(),), dtype=np.uintp)
 *         with cython.nogil, parallel():             # <<<<<<<<<<<<<<
 *             self.num_threads = omp_get_num_threads()
 *         self.local_node_num = np.zeros((self.num_threads,), dtype=np.uintp)
 */

#line 98 "getdb.py"
  {

#line 98 "getdb.py"
      #ifdef WITH_THREAD

#line 98 "getdb.py"
      PyThreadState *_save;

#line 98 "getdb.py"
      _save = NULL;

#line 98 "getdb.py"
      Py_UNBLOCK_THREADS

#line 98 "getdb.py"
      __Pyx_FastGIL_Remember();

#line 98 "getdb.py"
      #endif

#line 98 "getdb.py"
      /*try:*/ {

#line 98 "getdb.py"
        {

#line 98 "getdb.py"
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))

#line 98 "getdb.py"
                #undef likely

#line 98 "getdb.py"
                #undef unlikely

#line 98 "getdb.py"
                #define likely(x)   (x)

#line 98 "getdb.py"
                #define unlikely(x) (x)

#line 98 "getdb.py"
            #endif

#line 98 "getdb.py"
            #ifdef _OPENMP
            #pragma omp parallel 
#line 98 "getdb.py"


#line 98 "getdb.py"
            #endif /* _OPENMP */

#line 98 "getdb.py"
            {

                /* "getdb.py":99
 *         self.flag = np.zeros((olapondb[0].NumVertices(),), dtype=np.uintp)
 *         with cython.nogil, parallel():
 *             self.num_threads = omp_get_num_threads()             # <<<<<<<<<<<<<<
 *         self.local_node_num = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.local_edge_num = np.zeros((self.num_threads,), dtype=np.uintp)
 */

#line 99 "getdb.py"
                __pyx_v_self->num_threads = omp_get_num_threads();

#line 99 "getdb.py"
            }

#line 99 "getdb.py"
        }

#line 99 "getdb.py"
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))

#line 99 "getdb.py"
            #undef likely

#line 99 "getdb.py"
            #undef unlikely

#line 99 "getdb.py"
            #define likely(x)   __builtin_expect(!!(x), 1)

#line 99 "getdb.py"
            #define unlikely(x) __builtin_expect(!!(x), 0)

#line 99 "getdb.py"
        #endif

#line 99 "getdb.py"
      }

      /* "getdb.py":98
 *         self.feature_num = cython.cast(size_t, feature_num)
 *         self.flag = np.zeros((olapondb[0].NumVertices(),), dtype=np.uintp)
 *         with cython.nogil, parallel():             # <<<<<<<<<<<<<<
 *             self.num_threads = omp_get_num_threads()
 *         self.local_node_num = np.zeros((self.num_threads,), dtype=np.uintp)
 */

#line 98 "getdb.py"
      /*finally:*/ {

#line 98 "getdb.py"
        /*normal exit:*/{

#line 98 "getdb.py"
          #ifdef WITH_THREAD

#line 98 "getdb.py"
          __Pyx_FastGIL_Forget();

#line 98 "getdb.py"
          Py_BLOCK_THREADS

#line 98 "getdb.py"
          #endif

#line 98 "getdb.py"
          goto __pyx_L5;

#line 98 "getdb.py"
        }

#line 98 "getdb.py"
        __pyx_L5:;

#line 98 "getdb.py"
      }

#line 98 "getdb.py"
  }

  /* "getdb.py":100
 *         with cython.nogil, parallel():
 *             self.num_threads = omp_get_num_threads()
 *         self.local_node_num = np.zeros((self.num_threads,), dtype=np.uintp)             # <<<<<<<<<<<<<<
 *         self.local_edge_num = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.local_feature = np.zeros((self.num_threads, olapondb[0].NumVertices(), self.feature_num), dtype = np.float32)
 */

#line 100 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 100 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 100 "getdb.py"
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 100 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 100 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_6);

#line 100 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);

#line 100 "getdb.py"
  __pyx_t_6 = 0;

#line 100 "getdb.py"
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 100 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 100 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 100 "getdb.py"
  __pyx_t_1 = 0;

#line 100 "getdb.py"
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 100 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 100 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uintp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 100 "getdb.py"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 100 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 100 "getdb.py"
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 100 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_node_num, 0);

#line 100 "getdb.py"
  __pyx_v_self->local_node_num = __pyx_t_7;

#line 100 "getdb.py"
  __pyx_t_7.memview = NULL;

#line 100 "getdb.py"
  __pyx_t_7.data = NULL;

  /* "getdb.py":101
 *             self.num_threads = omp_get_num_threads()
 *         self.local_node_num = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.local_edge_num = np.zeros((self.num_threads,), dtype=np.uintp)             # <<<<<<<<<<<<<<
 *         self.local_feature = np.zeros((self.num_threads, olapondb[0].NumVertices(), self.feature_num), dtype = np.float32)
 *         self.local_node = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 */

#line 101 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 101 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 101 "getdb.py"
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 101 "getdb.py"
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 101 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_5);

#line 101 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);

#line 101 "getdb.py"
  __pyx_t_5 = 0;

#line 101 "getdb.py"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 101 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_6);

#line 101 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);

#line 101 "getdb.py"
  __pyx_t_6 = 0;

#line 101 "getdb.py"
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 101 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 101 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_uintp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "getdb.py"
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 101 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 101 "getdb.py"
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 101 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_edge_num, 0);

#line 101 "getdb.py"
  __pyx_v_self->local_edge_num = __pyx_t_7;

#line 101 "getdb.py"
  __pyx_t_7.memview = NULL;

#line 101 "getdb.py"
  __pyx_t_7.data = NULL;

  /* "getdb.py":102
 *         self.local_node_num = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.local_edge_num = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.local_feature = np.zeros((self.num_threads, olapondb[0].NumVertices(), self.feature_num), dtype = np.float32)             # <<<<<<<<<<<<<<
 *         self.local_node = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 *         self.local_label = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 */

#line 102 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 102 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 102 "getdb.py"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 102 "getdb.py"
  __pyx_t_5 = __Pyx_PyInt_FromSize_t((__pyx_v_olapondb[0]).NumVertices()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 102 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->feature_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 102 "getdb.py"
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 102 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_3);

#line 102 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 102 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_5);

#line 102 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);

#line 102 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 102 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);

#line 102 "getdb.py"
  __pyx_t_3 = 0;

#line 102 "getdb.py"
  __pyx_t_5 = 0;

#line 102 "getdb.py"
  __pyx_t_1 = 0;

#line 102 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 102 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_2);

#line 102 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 102 "getdb.py"
  __pyx_t_2 = 0;

#line 102 "getdb.py"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 102 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 102 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 102 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 102 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 102 "getdb.py"
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 102 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_feature, 0);

#line 102 "getdb.py"
  __pyx_v_self->local_feature = __pyx_t_8;

#line 102 "getdb.py"
  __pyx_t_8.memview = NULL;

#line 102 "getdb.py"
  __pyx_t_8.data = NULL;

  /* "getdb.py":103
 *         self.local_edge_num = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.local_feature = np.zeros((self.num_threads, olapondb[0].NumVertices(), self.feature_num), dtype = np.float32)
 *         self.local_node = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.local_label = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 *         self.feature_key = "feature_float".encode('utf-8')
 */

#line 103 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "getdb.py"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_olapondb[0]).NumVertices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "getdb.py"
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 103 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_3);

#line 103 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);

#line 103 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 103 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);

#line 103 "getdb.py"
  __pyx_t_3 = 0;

#line 103 "getdb.py"
  __pyx_t_1 = 0;

#line 103 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_6);

#line 103 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);

#line 103 "getdb.py"
  __pyx_t_6 = 0;

#line 103 "getdb.py"
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 103 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "getdb.py"
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 103 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 103 "getdb.py"
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 103 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_node, 0);

#line 103 "getdb.py"
  __pyx_v_self->local_node = __pyx_t_9;

#line 103 "getdb.py"
  __pyx_t_9.memview = NULL;

#line 103 "getdb.py"
  __pyx_t_9.data = NULL;

  /* "getdb.py":104
 *         self.local_feature = np.zeros((self.num_threads, olapondb[0].NumVertices(), self.feature_num), dtype = np.float32)
 *         self.local_node = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 *         self.local_label = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.feature_key = "feature_float".encode('utf-8')
 *         self.label_key = "label".encode('utf-8')
 */

#line 104 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 104 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 104 "getdb.py"
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 104 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_olapondb[0]).NumVertices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 104 "getdb.py"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 104 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_5);

#line 104 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);

#line 104 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 104 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);

#line 104 "getdb.py"
  __pyx_t_5 = 0;

#line 104 "getdb.py"
  __pyx_t_1 = 0;

#line 104 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 104 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_2);

#line 104 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 104 "getdb.py"
  __pyx_t_2 = 0;

#line 104 "getdb.py"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 104 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 104 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 104 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 104 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 104 "getdb.py"
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 104 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_label, 0);

#line 104 "getdb.py"
  __pyx_v_self->local_label = __pyx_t_9;

#line 104 "getdb.py"
  __pyx_t_9.memview = NULL;

#line 104 "getdb.py"
  __pyx_t_9.data = NULL;

  /* "getdb.py":105
 *         self.local_node = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 *         self.local_label = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 *         self.feature_key = "feature_float".encode('utf-8')             # <<<<<<<<<<<<<<
 *         self.label_key = "label".encode('utf-8')
 *         self.local_src_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 */

#line 105 "getdb.py"
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_feature_float); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)

#line 105 "getdb.py"
  __pyx_v_self->feature_key = std::move((*__pyx_t_10));

  /* "getdb.py":106
 *         self.local_label = np.zeros((self.num_threads, olapondb[0].NumVertices()), dtype=np.intp)
 *         self.feature_key = "feature_float".encode('utf-8')
 *         self.label_key = "label".encode('utf-8')             # <<<<<<<<<<<<<<
 *         self.local_src_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 *         self.local_dst_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 */

#line 106 "getdb.py"
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_label); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)

#line 106 "getdb.py"
  __pyx_v_self->label_key = std::move((*__pyx_t_10));

  /* "getdb.py":107
 *         self.feature_key = "feature_float".encode('utf-8')
 *         self.label_key = "label".encode('utf-8')
 *         self.local_src_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.local_dst_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 *         self.active = self.g.AllocVertexSubset()
 */

#line 107 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 107 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 107 "getdb.py"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 107 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_olapondb[0]).NumEdges()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 107 "getdb.py"
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 107 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_3);

#line 107 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);

#line 107 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 107 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);

#line 107 "getdb.py"
  __pyx_t_3 = 0;

#line 107 "getdb.py"
  __pyx_t_1 = 0;

#line 107 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 107 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_6);

#line 107 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);

#line 107 "getdb.py"
  __pyx_t_6 = 0;

#line 107 "getdb.py"
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 107 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 107 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 107 "getdb.py"
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 107 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 107 "getdb.py"
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 107, __pyx_L1_error)

#line 107 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 107 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_src_list, 0);

#line 107 "getdb.py"
  __pyx_v_self->local_src_list = __pyx_t_9;

#line 107 "getdb.py"
  __pyx_t_9.memview = NULL;

#line 107 "getdb.py"
  __pyx_t_9.data = NULL;

  /* "getdb.py":108
 *         self.label_key = "label".encode('utf-8')
 *         self.local_src_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 *         self.local_dst_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.active = self.g.AllocVertexSubset()
 *         self.active.Fill()
 */

#line 108 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 108 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 108 "getdb.py"
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 108 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_olapondb[0]).NumEdges()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 108 "getdb.py"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 108 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_5);

#line 108 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);

#line 108 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 108 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);

#line 108 "getdb.py"
  __pyx_t_5 = 0;

#line 108 "getdb.py"
  __pyx_t_1 = 0;

#line 108 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 108 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_2);

#line 108 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 108 "getdb.py"
  __pyx_t_2 = 0;

#line 108 "getdb.py"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 108 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 108 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 108 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 108 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 108 "getdb.py"
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 108, __pyx_L1_error)

#line 108 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 108 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->local_dst_list, 0);

#line 108 "getdb.py"
  __pyx_v_self->local_dst_list = __pyx_t_9;

#line 108 "getdb.py"
  __pyx_t_9.memview = NULL;

#line 108 "getdb.py"
  __pyx_t_9.data = NULL;

  /* "getdb.py":109
 *         self.local_src_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 *         self.local_dst_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 *         self.active = self.g.AllocVertexSubset()             # <<<<<<<<<<<<<<
 *         self.active.Fill()
 *         cost = time.time()
 */

#line 109 "getdb.py"
  __pyx_v_self->active = __pyx_v_self->g->AllocVertexSubset();

  /* "getdb.py":110
 *         self.local_dst_list = np.zeros((self.num_threads, olapondb[0].NumEdges()), dtype=np.intp)
 *         self.active = self.g.AllocVertexSubset()
 *         self.active.Fill()             # <<<<<<<<<<<<<<
 *         cost = time.time()
 *         self.g.ProcessVertexActive[size_t, AllDb](self.Work, self.active, self)
 */

#line 110 "getdb.py"
  (*__pyx_v_self->active).Fill();

  /* "getdb.py":111
 *         self.active = self.g.AllocVertexSubset()
 *         self.active.Fill()
 *         cost = time.time()             # <<<<<<<<<<<<<<
 *         self.g.ProcessVertexActive[size_t, AllDb](self.Work, self.active, self)
 *         sample_cost = time.time()
 */

#line 111 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 111 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 111 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 111 "getdb.py"
  __pyx_t_2 = NULL;

#line 111 "getdb.py"
  __pyx_t_4 = 0;

#line 111 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 111 "getdb.py"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);

#line 111 "getdb.py"
    if (likely(__pyx_t_2)) {

#line 111 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 111 "getdb.py"
      __Pyx_INCREF(__pyx_t_2);

#line 111 "getdb.py"
      __Pyx_INCREF(function);

#line 111 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 111 "getdb.py"
      __pyx_t_4 = 1;

#line 111 "getdb.py"
    }

#line 111 "getdb.py"
  }

#line 111 "getdb.py"
  {

#line 111 "getdb.py"
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };

#line 111 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 111 "getdb.py"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 111 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 111 "getdb.py"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 111 "getdb.py"
  }

#line 111 "getdb.py"
  __pyx_v_cost = __pyx_t_3;

#line 111 "getdb.py"
  __pyx_t_3 = 0;

  /* "getdb.py":112
 *         self.active.Fill()
 *         cost = time.time()
 *         self.g.ProcessVertexActive[size_t, AllDb](self.Work, self.active, self)             # <<<<<<<<<<<<<<
 *         sample_cost = time.time()
 *         sample_node_num = 0
 */

#line 112 "getdb.py"
  (void)(__pyx_v_self->g->ProcessVertexActive<size_t,struct __pyx_obj_5getdb_AllDb *>(((struct __pyx_vtabstruct_5getdb_AllDb *)__pyx_v_self->__pyx_vtab)->Work, (*__pyx_v_self->active), __pyx_v_self));

  /* "getdb.py":113
 *         cost = time.time()
 *         self.g.ProcessVertexActive[size_t, AllDb](self.Work, self.active, self)
 *         sample_cost = time.time()             # <<<<<<<<<<<<<<
 *         sample_node_num = 0
 *         sample_edge_num = 0
 */

#line 113 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 113 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 113 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 113 "getdb.py"
  __pyx_t_1 = NULL;

#line 113 "getdb.py"
  __pyx_t_4 = 0;

#line 113 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 113 "getdb.py"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);

#line 113 "getdb.py"
    if (likely(__pyx_t_1)) {

#line 113 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 113 "getdb.py"
      __Pyx_INCREF(__pyx_t_1);

#line 113 "getdb.py"
      __Pyx_INCREF(function);

#line 113 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 113 "getdb.py"
      __pyx_t_4 = 1;

#line 113 "getdb.py"
    }

#line 113 "getdb.py"
  }

#line 113 "getdb.py"
  {

#line 113 "getdb.py"
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };

#line 113 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 113 "getdb.py"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 113 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 113 "getdb.py"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 113 "getdb.py"
  }

#line 113 "getdb.py"
  __pyx_v_sample_cost = __pyx_t_3;

#line 113 "getdb.py"
  __pyx_t_3 = 0;

  /* "getdb.py":114
 *         self.g.ProcessVertexActive[size_t, AllDb](self.Work, self.active, self)
 *         sample_cost = time.time()
 *         sample_node_num = 0             # <<<<<<<<<<<<<<
 *         sample_edge_num = 0
 *         for id in range(self.num_threads):
 */

#line 114 "getdb.py"
  __Pyx_INCREF(__pyx_int_0);

#line 114 "getdb.py"
  __pyx_v_sample_node_num = __pyx_int_0;

  /* "getdb.py":115
 *         sample_cost = time.time()
 *         sample_node_num = 0
 *         sample_edge_num = 0             # <<<<<<<<<<<<<<
 *         for id in range(self.num_threads):
 *             sample_node_num += self.local_node_num[id]
 */

#line 115 "getdb.py"
  __Pyx_INCREF(__pyx_int_0);

#line 115 "getdb.py"
  __pyx_v_sample_edge_num = __pyx_int_0;

  /* "getdb.py":116
 *         sample_node_num = 0
 *         sample_edge_num = 0
 *         for id in range(self.num_threads):             # <<<<<<<<<<<<<<
 *             sample_node_num += self.local_node_num[id]
 *             sample_edge_num += self.local_edge_num[id]
 */

#line 116 "getdb.py"
  __pyx_t_4 = __pyx_v_self->num_threads;

#line 116 "getdb.py"
  __pyx_t_11 = __pyx_t_4;

#line 116 "getdb.py"
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {

#line 116 "getdb.py"
    __pyx_v_id = __pyx_t_12;

    /* "getdb.py":117
 *         sample_edge_num = 0
 *         for id in range(self.num_threads):
 *             sample_node_num += self.local_node_num[id]             # <<<<<<<<<<<<<<
 *             sample_edge_num += self.local_edge_num[id]
 *         self.feature = np.zeros((sample_node_num, self.feature_num), dtype=np.float32)
 */

#line 117 "getdb.py"
    __pyx_t_13 = __pyx_v_id;

#line 117 "getdb.py"
    __pyx_t_3 = __Pyx_PyInt_FromSize_t((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_node_num.data + __pyx_t_13 * __pyx_v_self->local_node_num.strides[0]) )))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)

#line 117 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 117 "getdb.py"
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_sample_node_num, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)

#line 117 "getdb.py"
    __Pyx_GOTREF(__pyx_t_2);

#line 117 "getdb.py"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 117 "getdb.py"
    __Pyx_DECREF_SET(__pyx_v_sample_node_num, __pyx_t_2);

#line 117 "getdb.py"
    __pyx_t_2 = 0;

    /* "getdb.py":118
 *         for id in range(self.num_threads):
 *             sample_node_num += self.local_node_num[id]
 *             sample_edge_num += self.local_edge_num[id]             # <<<<<<<<<<<<<<
 *         self.feature = np.zeros((sample_node_num, self.feature_num), dtype=np.float32)
 *         self.label = np.zeros((sample_node_num,), dtype=np.intp)
 */

#line 118 "getdb.py"
    __pyx_t_13 = __pyx_v_id;

#line 118 "getdb.py"
    __pyx_t_2 = __Pyx_PyInt_FromSize_t((*((__pyx_t_9lgraph_db_size_t *) ( /* dim=0 */ (__pyx_v_self->local_edge_num.data + __pyx_t_13 * __pyx_v_self->local_edge_num.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)

#line 118 "getdb.py"
    __Pyx_GOTREF(__pyx_t_2);

#line 118 "getdb.py"
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_sample_edge_num, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)

#line 118 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 118 "getdb.py"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 118 "getdb.py"
    __Pyx_DECREF_SET(__pyx_v_sample_edge_num, __pyx_t_3);

#line 118 "getdb.py"
    __pyx_t_3 = 0;

#line 118 "getdb.py"
  }

  /* "getdb.py":119
 *             sample_node_num += self.local_node_num[id]
 *             sample_edge_num += self.local_edge_num[id]
 *         self.feature = np.zeros((sample_node_num, self.feature_num), dtype=np.float32)             # <<<<<<<<<<<<<<
 *         self.label = np.zeros((sample_node_num,), dtype=np.intp)
 *         self.node = np.zeros((sample_node_num,), dtype=np.intp)
 */

#line 119 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 119 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 119 "getdb.py"
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->feature_num); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 119 "getdb.py"
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 119 "getdb.py"
  __Pyx_INCREF(__pyx_v_sample_node_num);

#line 119 "getdb.py"
  __Pyx_GIVEREF(__pyx_v_sample_node_num);

#line 119 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sample_node_num);

#line 119 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_3);

#line 119 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);

#line 119 "getdb.py"
  __pyx_t_3 = 0;

#line 119 "getdb.py"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 119 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 119 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 119 "getdb.py"
  __pyx_t_1 = 0;

#line 119 "getdb.py"
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 119 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 119 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 119 "getdb.py"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 119 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 119 "getdb.py"
  __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 119 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->feature, 0);

#line 119 "getdb.py"
  __pyx_v_self->feature = __pyx_t_14;

#line 119 "getdb.py"
  __pyx_t_14.memview = NULL;

#line 119 "getdb.py"
  __pyx_t_14.data = NULL;

  /* "getdb.py":120
 *             sample_edge_num += self.local_edge_num[id]
 *         self.feature = np.zeros((sample_node_num, self.feature_num), dtype=np.float32)
 *         self.label = np.zeros((sample_node_num,), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.node = np.zeros((sample_node_num,), dtype=np.intp)
 *         self.index = np.zeros((self.num_threads,), dtype=np.uintp)
 */

#line 120 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 120 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 120 "getdb.py"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 120 "getdb.py"
  __Pyx_INCREF(__pyx_v_sample_node_num);

#line 120 "getdb.py"
  __Pyx_GIVEREF(__pyx_v_sample_node_num);

#line 120 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_sample_node_num);

#line 120 "getdb.py"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 120 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_5);

#line 120 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 120 "getdb.py"
  __pyx_t_5 = 0;

#line 120 "getdb.py"
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 120 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 120 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_intp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 120 "getdb.py"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 120 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 120 "getdb.py"
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 120 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->label, 0);

#line 120 "getdb.py"
  __pyx_v_self->label = __pyx_t_15;

#line 120 "getdb.py"
  __pyx_t_15.memview = NULL;

#line 120 "getdb.py"
  __pyx_t_15.data = NULL;

  /* "getdb.py":121
 *         self.feature = np.zeros((sample_node_num, self.feature_num), dtype=np.float32)
 *         self.label = np.zeros((sample_node_num,), dtype=np.intp)
 *         self.node = np.zeros((sample_node_num,), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.index = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.edge_index = np.zeros((self.num_threads,), dtype=np.uintp)
 */

#line 121 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 121 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 121 "getdb.py"
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 121 "getdb.py"
  __Pyx_INCREF(__pyx_v_sample_node_num);

#line 121 "getdb.py"
  __Pyx_GIVEREF(__pyx_v_sample_node_num);

#line 121 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_sample_node_num);

#line 121 "getdb.py"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 121 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_6);

#line 121 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 121 "getdb.py"
  __pyx_t_6 = 0;

#line 121 "getdb.py"
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 121 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 121 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_intp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 121 "getdb.py"
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 121 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 121 "getdb.py"
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 121, __pyx_L1_error)

#line 121 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 121 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->node, 0);

#line 121 "getdb.py"
  __pyx_v_self->node = __pyx_t_15;

#line 121 "getdb.py"
  __pyx_t_15.memview = NULL;

#line 121 "getdb.py"
  __pyx_t_15.data = NULL;

  /* "getdb.py":122
 *         self.label = np.zeros((sample_node_num,), dtype=np.intp)
 *         self.node = np.zeros((sample_node_num,), dtype=np.intp)
 *         self.index = np.zeros((self.num_threads,), dtype=np.uintp)             # <<<<<<<<<<<<<<
 *         self.edge_index = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.src_list = np.zeros((sample_edge_num,), dtype=np.intp)
 */

#line 122 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 122 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 122 "getdb.py"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 122 "getdb.py"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 122 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_2);

#line 122 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 122 "getdb.py"
  __pyx_t_2 = 0;

#line 122 "getdb.py"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 122 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_3);

#line 122 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 122 "getdb.py"
  __pyx_t_3 = 0;

#line 122 "getdb.py"
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 122 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 122 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uintp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 122 "getdb.py"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 122 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 122 "getdb.py"
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 122, __pyx_L1_error)

#line 122 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 122 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->index, 0);

#line 122 "getdb.py"
  __pyx_v_self->index = __pyx_t_7;

#line 122 "getdb.py"
  __pyx_t_7.memview = NULL;

#line 122 "getdb.py"
  __pyx_t_7.data = NULL;

  /* "getdb.py":123
 *         self.node = np.zeros((sample_node_num,), dtype=np.intp)
 *         self.index = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.edge_index = np.zeros((self.num_threads,), dtype=np.uintp)             # <<<<<<<<<<<<<<
 *         self.src_list = np.zeros((sample_edge_num,), dtype=np.intp)
 *         self.dst_list = np.zeros((sample_edge_num,), dtype=np.intp)
 */

#line 123 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 123 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 123 "getdb.py"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->num_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 123 "getdb.py"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 123 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_1);

#line 123 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 123 "getdb.py"
  __pyx_t_1 = 0;

#line 123 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 123 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_2);

#line 123 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 123 "getdb.py"
  __pyx_t_2 = 0;

#line 123 "getdb.py"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 123 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 123 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_uintp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 123 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 123 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 123 "getdb.py"
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 123, __pyx_L1_error)

#line 123 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 123 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->edge_index, 0);

#line 123 "getdb.py"
  __pyx_v_self->edge_index = __pyx_t_7;

#line 123 "getdb.py"
  __pyx_t_7.memview = NULL;

#line 123 "getdb.py"
  __pyx_t_7.data = NULL;

  /* "getdb.py":124
 *         self.index = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.edge_index = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.src_list = np.zeros((sample_edge_num,), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.dst_list = np.zeros((sample_edge_num,), dtype=np.intp)
 *         self.MergeList()
 */

#line 124 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 124 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 124 "getdb.py"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 124 "getdb.py"
  __Pyx_INCREF(__pyx_v_sample_edge_num);

#line 124 "getdb.py"
  __Pyx_GIVEREF(__pyx_v_sample_edge_num);

#line 124 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_sample_edge_num);

#line 124 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 124 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_5);

#line 124 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);

#line 124 "getdb.py"
  __pyx_t_5 = 0;

#line 124 "getdb.py"
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 124 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 124 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 124 "getdb.py"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 124 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 124 "getdb.py"
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 124, __pyx_L1_error)

#line 124 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 124 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->src_list, 0);

#line 124 "getdb.py"
  __pyx_v_self->src_list = __pyx_t_15;

#line 124 "getdb.py"
  __pyx_t_15.memview = NULL;

#line 124 "getdb.py"
  __pyx_t_15.data = NULL;

  /* "getdb.py":125
 *         self.edge_index = np.zeros((self.num_threads,), dtype=np.uintp)
 *         self.src_list = np.zeros((sample_edge_num,), dtype=np.intp)
 *         self.dst_list = np.zeros((sample_edge_num,), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.MergeList()
 * 
 */

#line 125 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 125 "getdb.py"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_5);

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 125 "getdb.py"
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 125 "getdb.py"
  __Pyx_INCREF(__pyx_v_sample_edge_num);

#line 125 "getdb.py"
  __Pyx_GIVEREF(__pyx_v_sample_edge_num);

#line 125 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_sample_edge_num);

#line 125 "getdb.py"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 125 "getdb.py"
  __Pyx_GIVEREF(__pyx_t_6);

#line 125 "getdb.py"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);

#line 125 "getdb.py"
  __pyx_t_6 = 0;

#line 125 "getdb.py"
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 125 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 125 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_intp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 125 "getdb.py"
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 125 "getdb.py"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 125 "getdb.py"
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_ssize_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 125, __pyx_L1_error)

#line 125 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 125 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->dst_list, 0);

#line 125 "getdb.py"
  __pyx_v_self->dst_list = __pyx_t_15;

#line 125 "getdb.py"
  __pyx_t_15.memview = NULL;

#line 125 "getdb.py"
  __pyx_t_15.data = NULL;

  /* "getdb.py":126
 *         self.src_list = np.zeros((sample_edge_num,), dtype=np.intp)
 *         self.dst_list = np.zeros((sample_edge_num,), dtype=np.intp)
 *         self.MergeList()             # <<<<<<<<<<<<<<
 * 
 *         NodeInfo.append(np.asarray(self.node))
 */

#line 126 "getdb.py"
  ((struct __pyx_vtabstruct_5getdb_AllDb *)__pyx_v_self->__pyx_vtab)->MergeList(__pyx_v_self);

  /* "getdb.py":128
 *         self.MergeList()
 * 
 *         NodeInfo.append(np.asarray(self.node))             # <<<<<<<<<<<<<<
 *         NodeInfo.append(np.asarray(self.feature))
 *         NodeInfo.append(np.asarray(self.label))
 */

#line 128 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 128 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 128 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 128 "getdb.py"
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_self->node, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_9lgraph_db_ssize_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_9lgraph_db_ssize_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 128 "getdb.py"
  __pyx_t_5 = NULL;

#line 128 "getdb.py"
  __pyx_t_4 = 0;

#line 128 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 128 "getdb.py"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 128 "getdb.py"
    if (likely(__pyx_t_5)) {

#line 128 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 128 "getdb.py"
      __Pyx_INCREF(__pyx_t_5);

#line 128 "getdb.py"
      __Pyx_INCREF(function);

#line 128 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 128 "getdb.py"
      __pyx_t_4 = 1;

#line 128 "getdb.py"
    }

#line 128 "getdb.py"
  }

#line 128 "getdb.py"
  {

#line 128 "getdb.py"
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};

#line 128 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);

#line 128 "getdb.py"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 128 "getdb.py"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 128 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 128 "getdb.py"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 128 "getdb.py"
  }

#line 128 "getdb.py"
  __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_NodeInfo, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "getdb.py":129
 * 
 *         NodeInfo.append(np.asarray(self.node))
 *         NodeInfo.append(np.asarray(self.feature))             # <<<<<<<<<<<<<<
 *         NodeInfo.append(np.asarray(self.label))
 *         EdgeInfo.append(np.asarray(self.src_list))
 */

#line 129 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 129 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 129 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 129 "getdb.py"
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->feature, 2, (PyObject *(*)(char *)) __pyx_memview_get_float, (int (*)(char *, PyObject *)) __pyx_memview_set_float, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 129 "getdb.py"
  __pyx_t_5 = NULL;

#line 129 "getdb.py"
  __pyx_t_4 = 0;

#line 129 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 129 "getdb.py"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 129 "getdb.py"
    if (likely(__pyx_t_5)) {

#line 129 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 129 "getdb.py"
      __Pyx_INCREF(__pyx_t_5);

#line 129 "getdb.py"
      __Pyx_INCREF(function);

#line 129 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 129 "getdb.py"
      __pyx_t_4 = 1;

#line 129 "getdb.py"
    }

#line 129 "getdb.py"
  }

#line 129 "getdb.py"
  {

#line 129 "getdb.py"
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_1};

#line 129 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);

#line 129 "getdb.py"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 129 "getdb.py"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 129 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 129 "getdb.py"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 129 "getdb.py"
  }

#line 129 "getdb.py"
  __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_NodeInfo, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "getdb.py":130
 *         NodeInfo.append(np.asarray(self.node))
 *         NodeInfo.append(np.asarray(self.feature))
 *         NodeInfo.append(np.asarray(self.label))             # <<<<<<<<<<<<<<
 *         EdgeInfo.append(np.asarray(self.src_list))
 *         EdgeInfo.append(np.asarray(self.dst_list))
 */

#line 130 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 130 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 130 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 130 "getdb.py"
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_self->label, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_9lgraph_db_ssize_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_9lgraph_db_ssize_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 130 "getdb.py"
  __pyx_t_5 = NULL;

#line 130 "getdb.py"
  __pyx_t_4 = 0;

#line 130 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 130 "getdb.py"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 130 "getdb.py"
    if (likely(__pyx_t_5)) {

#line 130 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 130 "getdb.py"
      __Pyx_INCREF(__pyx_t_5);

#line 130 "getdb.py"
      __Pyx_INCREF(function);

#line 130 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 130 "getdb.py"
      __pyx_t_4 = 1;

#line 130 "getdb.py"
    }

#line 130 "getdb.py"
  }

#line 130 "getdb.py"
  {

#line 130 "getdb.py"
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};

#line 130 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);

#line 130 "getdb.py"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 130 "getdb.py"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 130 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 130 "getdb.py"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 130 "getdb.py"
  }

#line 130 "getdb.py"
  __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_NodeInfo, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "getdb.py":131
 *         NodeInfo.append(np.asarray(self.feature))
 *         NodeInfo.append(np.asarray(self.label))
 *         EdgeInfo.append(np.asarray(self.src_list))             # <<<<<<<<<<<<<<
 *         EdgeInfo.append(np.asarray(self.dst_list))
 *         end_cost = time.time()
 */

#line 131 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 131 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 131 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 131 "getdb.py"
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->src_list, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_9lgraph_db_ssize_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_9lgraph_db_ssize_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 131 "getdb.py"
  __pyx_t_5 = NULL;

#line 131 "getdb.py"
  __pyx_t_4 = 0;

#line 131 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 131 "getdb.py"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 131 "getdb.py"
    if (likely(__pyx_t_5)) {

#line 131 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 131 "getdb.py"
      __Pyx_INCREF(__pyx_t_5);

#line 131 "getdb.py"
      __Pyx_INCREF(function);

#line 131 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 131 "getdb.py"
      __pyx_t_4 = 1;

#line 131 "getdb.py"
    }

#line 131 "getdb.py"
  }

#line 131 "getdb.py"
  {

#line 131 "getdb.py"
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_1};

#line 131 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);

#line 131 "getdb.py"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 131 "getdb.py"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 131 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 131 "getdb.py"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 131 "getdb.py"
  }

#line 131 "getdb.py"
  __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_EdgeInfo, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "getdb.py":132
 *         NodeInfo.append(np.asarray(self.label))
 *         EdgeInfo.append(np.asarray(self.src_list))
 *         EdgeInfo.append(np.asarray(self.dst_list))             # <<<<<<<<<<<<<<
 *         end_cost = time.time()
 *         # printf("prepare_cost = %lf s\n", cython.cast(cython.double, cost - start))
 */

#line 132 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)

#line 132 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 132 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)

#line 132 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 132 "getdb.py"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 132 "getdb.py"
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_self->dst_list, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_9lgraph_db_ssize_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_9lgraph_db_ssize_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)

#line 132 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 132 "getdb.py"
  __pyx_t_5 = NULL;

#line 132 "getdb.py"
  __pyx_t_4 = 0;

#line 132 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 132 "getdb.py"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 132 "getdb.py"
    if (likely(__pyx_t_5)) {

#line 132 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 132 "getdb.py"
      __Pyx_INCREF(__pyx_t_5);

#line 132 "getdb.py"
      __Pyx_INCREF(function);

#line 132 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 132 "getdb.py"
      __pyx_t_4 = 1;

#line 132 "getdb.py"
    }

#line 132 "getdb.py"
  }

#line 132 "getdb.py"
  {

#line 132 "getdb.py"
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};

#line 132 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);

#line 132 "getdb.py"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 132 "getdb.py"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 132 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)

#line 132 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 132 "getdb.py"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 132 "getdb.py"
  }

#line 132 "getdb.py"
  __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_EdgeInfo, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 132, __pyx_L1_error)

#line 132 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "getdb.py":133
 *         EdgeInfo.append(np.asarray(self.src_list))
 *         EdgeInfo.append(np.asarray(self.dst_list))
 *         end_cost = time.time()             # <<<<<<<<<<<<<<
 *         # printf("prepare_cost = %lf s\n", cython.cast(cython.double, cost - start))
 *         # printf("sample_cost = %lf s\n", cython.cast(cython.double, sample_cost - cost))
 */

#line 133 "getdb.py"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)

#line 133 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 133 "getdb.py"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error)

#line 133 "getdb.py"
  __Pyx_GOTREF(__pyx_t_6);

#line 133 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 133 "getdb.py"
  __pyx_t_1 = NULL;

#line 133 "getdb.py"
  __pyx_t_4 = 0;

#line 133 "getdb.py"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 133 "getdb.py"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);

#line 133 "getdb.py"
    if (likely(__pyx_t_1)) {

#line 133 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 133 "getdb.py"
      __Pyx_INCREF(__pyx_t_1);

#line 133 "getdb.py"
      __Pyx_INCREF(function);

#line 133 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 133 "getdb.py"
      __pyx_t_4 = 1;

#line 133 "getdb.py"
    }

#line 133 "getdb.py"
  }

#line 133 "getdb.py"
  {

#line 133 "getdb.py"
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };

#line 133 "getdb.py"
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 133 "getdb.py"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 133 "getdb.py"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)

#line 133 "getdb.py"
    __Pyx_GOTREF(__pyx_t_3);

#line 133 "getdb.py"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 133 "getdb.py"
  }

#line 133 "getdb.py"
  __pyx_v_end_cost = __pyx_t_3;

#line 133 "getdb.py"
  __pyx_t_3 = 0;

  /* "getdb.py":89
 *         return 0
 * 
 *     @cython.cfunc             # <<<<<<<<<<<<<<
 *     @cython.exceptval(check=False)
 *     def run(self, db: cython.pointer(GraphDB), olapondb:cython.pointer(OlapOnDB[Empty]), feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 */

#line 89 "getdb.py"


#line 89 "getdb.py"
  /* function exit code */

#line 89 "getdb.py"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 89 "getdb.py"
  goto __pyx_L0;

#line 89 "getdb.py"
  __pyx_L1_error:;

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_t_1);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_t_2);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_t_3);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_t_5);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_t_6);

#line 89 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_7, 1);

#line 89 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);

#line 89 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_9, 1);

#line 89 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);

#line 89 "getdb.py"
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_15, 1);

#line 89 "getdb.py"
  __Pyx_AddTraceback("getdb.AllDb.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 89 "getdb.py"
  __pyx_r = 0;

#line 89 "getdb.py"
  __pyx_L0:;

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_v_start);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_v_cost);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_v_sample_cost);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_v_sample_node_num);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_v_sample_edge_num);

#line 89 "getdb.py"
  __Pyx_XDECREF(__pyx_v_end_cost);

#line 89 "getdb.py"
  __Pyx_XGIVEREF(__pyx_r);

#line 89 "getdb.py"
  __Pyx_RefNannyFinishContext();

#line 89 "getdb.py"
  return __pyx_r;

#line 89 "getdb.py"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_5getdb_5AllDb_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5getdb_5AllDb_1__reduce_cython__ = 
#line 1 "(tree fragment)"
{"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5getdb_5AllDb_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_5getdb_5AllDb_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 1 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 1 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
  #endif

#line 1 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);

#line 1 "(tree fragment)"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;
#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_5getdb_5AllDb___reduce_cython__(((struct __pyx_obj_5getdb_AllDb *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_5getdb_5AllDb___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5getdb_AllDb *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 */

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_active_self_db_self_g_self, 0, 0);

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("getdb.AllDb.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_5getdb_5AllDb_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5getdb_5AllDb_3__setstate_cython__ = 
#line 3 "(tree fragment)"
{"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5getdb_5AllDb_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_5getdb_5AllDb_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0
#line 3 "(tree fragment)"
;

#line 3 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 3 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 3 "(tree fragment)"
  #endif

#line 3 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);

#line 3 "(tree fragment)"
  {

#line 3 "(tree fragment)"
    #if CYTHON_USE_MODULE_STATE

#line 3 "(tree fragment)"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #else

#line 3 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #endif

#line 3 "(tree fragment)"
    PyObject* values[1] = {0};

#line 3 "(tree fragment)"
    if (__pyx_kwds) {

#line 3 "(tree fragment)"
      Py_ssize_t kw_args;

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {
        case  1: 
#line 3 "(tree fragment)"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 3 "(tree fragment)"
break;
        default: 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {

#line 3 "(tree fragment)"
        case  0:

#line 3 "(tree fragment)"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 3 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 3 "(tree fragment)"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 3 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
    } else if (unlikely(__pyx_nargs != 1)) {

#line 3 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
    } else {

#line 3 "(tree fragment)"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
    }

#line 3 "(tree fragment)"
    __pyx_v___pyx_state = values[0];

#line 3 "(tree fragment)"
  }

#line 3 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 3 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); 
#line 3 "(tree fragment)"
__PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
  __pyx_L3_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("getdb.AllDb.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return NULL;

#line 3 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_5getdb_5AllDb_2__setstate_cython__(((struct __pyx_obj_5getdb_AllDb *)__pyx_v_self), __pyx_v___pyx_state);

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_5getdb_5AllDb_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5getdb_AllDb *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_active_self_db_self_g_self, 0, 0);

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("getdb.AllDb.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "getdb.py":139
 *         # printf("all_cost = %lf s\n", cython.cast(cython.double, end_cost - start))
 * 
 * @cython.ccall             # <<<<<<<<<<<<<<
 * def Process(db_: lgraph_db_python.PyGraphDB, olapondb:lgraph_db_python.PyOlapOnDB, feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())
 */

#line 139 "getdb.py"


#line 139 "getdb.py"
static PyObject *__pyx_pw_5getdb_1Process(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 139 "getdb.py"
static PyObject *__pyx_f_5getdb_Process(PyObject *__pyx_v_db_, PyObject *__pyx_v_olapondb, __pyx_t_9lgraph_db_size_t __pyx_v_feature_num, PyObject *__pyx_v_NodeInfo, PyObject *__pyx_v_EdgeInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_db_addr
#line 139 "getdb.py"
;
  Py_ssize_t __pyx_v_olapondb_addr
#line 139 "getdb.py"
;
  struct __pyx_obj_5getdb_AllDb *__pyx_v_a = NULL
#line 139 "getdb.py"
;

#line 139 "getdb.py"
  PyObject *__pyx_r = NULL;

#line 139 "getdb.py"
  __Pyx_RefNannyDeclarations

#line 139 "getdb.py"
  PyObject *__pyx_t_1 = NULL;

#line 139 "getdb.py"
  PyObject *__pyx_t_2 = NULL;

#line 139 "getdb.py"
  PyObject *__pyx_t_3 = NULL;

#line 139 "getdb.py"
  int __pyx_t_4;

#line 139 "getdb.py"
  Py_ssize_t __pyx_t_5;

#line 139 "getdb.py"
  int __pyx_lineno = 0;

#line 139 "getdb.py"
  const char *__pyx_filename = NULL;

#line 139 "getdb.py"
  int __pyx_clineno = 0;

#line 139 "getdb.py"
  __Pyx_RefNannySetupContext("Process", 0);

  /* "getdb.py":141
 * @cython.ccall
 * def Process(db_: lgraph_db_python.PyGraphDB, olapondb:lgraph_db_python.PyOlapOnDB, feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())             # <<<<<<<<<<<<<<
 *     olapondb_addr = cython.declare(cython.Py_ssize_t, olapondb.get_pointer())
 *     a = AllDb()
 */

#line 141 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_db_, __pyx_n_s_get_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)

#line 141 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 141 "getdb.py"
  __pyx_t_3 = NULL;

#line 141 "getdb.py"
  __pyx_t_4 = 0;

#line 141 "getdb.py"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 141 "getdb.py"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 141 "getdb.py"
    if (likely(__pyx_t_3)) {

#line 141 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 141 "getdb.py"
      __Pyx_INCREF(__pyx_t_3);

#line 141 "getdb.py"
      __Pyx_INCREF(function);

#line 141 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 141 "getdb.py"
      __pyx_t_4 = 1;

#line 141 "getdb.py"
    }

#line 141 "getdb.py"
  }

#line 141 "getdb.py"
  {

#line 141 "getdb.py"
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };

#line 141 "getdb.py"
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 141 "getdb.py"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 141 "getdb.py"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)

#line 141 "getdb.py"
    __Pyx_GOTREF(__pyx_t_1);

#line 141 "getdb.py"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 141 "getdb.py"
  }

#line 141 "getdb.py"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)

#line 141 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 141 "getdb.py"
  __pyx_v_db_addr = __pyx_t_5;

  /* "getdb.py":142
 * def Process(db_: lgraph_db_python.PyGraphDB, olapondb:lgraph_db_python.PyOlapOnDB, feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())
 *     olapondb_addr = cython.declare(cython.Py_ssize_t, olapondb.get_pointer())             # <<<<<<<<<<<<<<
 *     a = AllDb()
 *     a.run(cython.cast(cython.pointer(GraphDB), db_addr), cython.cast(cython.pointer(OlapOnDB[Empty]), olapondb_addr), feature_num, NodeInfo, EdgeInfo)
 */

#line 142 "getdb.py"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_olapondb, __pyx_n_s_get_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 142 "getdb.py"
  __pyx_t_3 = NULL;

#line 142 "getdb.py"
  __pyx_t_4 = 0;

#line 142 "getdb.py"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 142 "getdb.py"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 142 "getdb.py"
    if (likely(__pyx_t_3)) {

#line 142 "getdb.py"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 142 "getdb.py"
      __Pyx_INCREF(__pyx_t_3);

#line 142 "getdb.py"
      __Pyx_INCREF(function);

#line 142 "getdb.py"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 142 "getdb.py"
      __pyx_t_4 = 1;

#line 142 "getdb.py"
    }

#line 142 "getdb.py"
  }

#line 142 "getdb.py"
  {

#line 142 "getdb.py"
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };

#line 142 "getdb.py"
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 142 "getdb.py"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 142 "getdb.py"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "getdb.py"
    __Pyx_GOTREF(__pyx_t_1);

#line 142 "getdb.py"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 142 "getdb.py"
  }

#line 142 "getdb.py"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 142 "getdb.py"
  __pyx_v_olapondb_addr = __pyx_t_5;

  /* "getdb.py":143
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())
 *     olapondb_addr = cython.declare(cython.Py_ssize_t, olapondb.get_pointer())
 *     a = AllDb()             # <<<<<<<<<<<<<<
 *     a.run(cython.cast(cython.pointer(GraphDB), db_addr), cython.cast(cython.pointer(OlapOnDB[Empty]), olapondb_addr), feature_num, NodeInfo, EdgeInfo)
 */

#line 143 "getdb.py"
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5getdb_AllDb)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)

#line 143 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 143 "getdb.py"
  __pyx_v_a = ((struct __pyx_obj_5getdb_AllDb *)__pyx_t_1);

#line 143 "getdb.py"
  __pyx_t_1 = 0;

  /* "getdb.py":144
 *     olapondb_addr = cython.declare(cython.Py_ssize_t, olapondb.get_pointer())
 *     a = AllDb()
 *     a.run(cython.cast(cython.pointer(GraphDB), db_addr), cython.cast(cython.pointer(OlapOnDB[Empty]), olapondb_addr), feature_num, NodeInfo, EdgeInfo)             # <<<<<<<<<<<<<<
 */

#line 144 "getdb.py"
  __pyx_t_1 = ((struct __pyx_vtabstruct_5getdb_AllDb *)__pyx_v_a->__pyx_vtab)->run(__pyx_v_a, ((lgraph_api::GraphDB *)__pyx_v_db_addr), ((lgraph_api::olap::OlapOnDB<struct lgraph_api::olap::Empty>  *)__pyx_v_olapondb_addr), __pyx_v_feature_num, __pyx_v_NodeInfo, __pyx_v_EdgeInfo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)

#line 144 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 144 "getdb.py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "getdb.py":139
 *         # printf("all_cost = %lf s\n", cython.cast(cython.double, end_cost - start))
 * 
 * @cython.ccall             # <<<<<<<<<<<<<<
 * def Process(db_: lgraph_db_python.PyGraphDB, olapondb:lgraph_db_python.PyOlapOnDB, feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())
 */

#line 139 "getdb.py"


#line 139 "getdb.py"
  /* function exit code */

#line 139 "getdb.py"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 139 "getdb.py"
  goto __pyx_L0;

#line 139 "getdb.py"
  __pyx_L1_error:;

#line 139 "getdb.py"
  __Pyx_XDECREF(__pyx_t_1);

#line 139 "getdb.py"
  __Pyx_XDECREF(__pyx_t_2);

#line 139 "getdb.py"
  __Pyx_XDECREF(__pyx_t_3);

#line 139 "getdb.py"
  __Pyx_AddTraceback("getdb.Process", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 139 "getdb.py"
  __pyx_r = 0;

#line 139 "getdb.py"
  __pyx_L0:;

#line 139 "getdb.py"
  __Pyx_XDECREF((PyObject *)__pyx_v_a);

#line 139 "getdb.py"
  __Pyx_XGIVEREF(__pyx_r);

#line 139 "getdb.py"
  __Pyx_RefNannyFinishContext();

#line 139 "getdb.py"
  return __pyx_r;

#line 139 "getdb.py"
}

#line 139 "getdb.py"


#line 139 "getdb.py"
/* Python wrapper */

#line 139 "getdb.py"
static PyObject *__pyx_pw_5getdb_1Process(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5getdb_1Process = 
#line 139 "getdb.py"
{"Process", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5getdb_1Process, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};

#line 139 "getdb.py"
static PyObject *__pyx_pw_5getdb_1Process(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_db_ = 0
#line 139 "getdb.py"
;
  PyObject *__pyx_v_olapondb = 0
#line 139 "getdb.py"
;
  __pyx_t_9lgraph_db_size_t __pyx_v_feature_num
#line 139 "getdb.py"
;
  PyObject *__pyx_v_NodeInfo = 0
#line 139 "getdb.py"
;
  PyObject *__pyx_v_EdgeInfo = 0
#line 139 "getdb.py"
;

#line 139 "getdb.py"
  #if !CYTHON_METH_FASTCALL

#line 139 "getdb.py"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 139 "getdb.py"
  #endif

#line 139 "getdb.py"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 139 "getdb.py"
  int __pyx_lineno = 0;

#line 139 "getdb.py"
  const char *__pyx_filename = NULL;

#line 139 "getdb.py"
  int __pyx_clineno = 0;

#line 139 "getdb.py"
  PyObject *__pyx_r = 0;

#line 139 "getdb.py"
  __Pyx_RefNannyDeclarations

#line 139 "getdb.py"
  __Pyx_RefNannySetupContext("Process (wrapper)", 0);

#line 139 "getdb.py"
  {

#line 139 "getdb.py"
    #if CYTHON_USE_MODULE_STATE

#line 139 "getdb.py"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_olapondb,&__pyx_n_s_feature_num,&__pyx_n_s_NodeInfo,&__pyx_n_s_EdgeInfo,0};

#line 139 "getdb.py"
    #else

#line 139 "getdb.py"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_olapondb,&__pyx_n_s_feature_num,&__pyx_n_s_NodeInfo,&__pyx_n_s_EdgeInfo,0};

#line 139 "getdb.py"
    #endif

#line 139 "getdb.py"
    PyObject* values[5] = {0,0,0,0,0};

#line 139 "getdb.py"
    if (__pyx_kwds) {

#line 139 "getdb.py"
      Py_ssize_t kw_args;

#line 139 "getdb.py"
      switch (__pyx_nargs) {
        case  5: 
#line 139 "getdb.py"
values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 139 "getdb.py"
values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 139 "getdb.py"
values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 139 "getdb.py"
values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 139 "getdb.py"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 139 "getdb.py"
break;
        default: 
#line 139 "getdb.py"
goto __pyx_L5_argtuple_error;

#line 139 "getdb.py"
      }

#line 139 "getdb.py"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 139 "getdb.py"
      switch (__pyx_nargs) {

#line 139 "getdb.py"
        case  0:

#line 139 "getdb.py"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) kw_args--;

#line 139 "getdb.py"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)
        else 
#line 139 "getdb.py"
goto __pyx_L5_argtuple_error;

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;

#line 139 "getdb.py"
        case  1:

#line 139 "getdb.py"
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_olapondb)) != 0)) kw_args--;

#line 139 "getdb.py"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        else {
          __Pyx_RaiseArgtupleInvalid("Process", 1, 5, 5, 1); 
#line 139 "getdb.py"
__PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        }

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;

#line 139 "getdb.py"
        case  2:

#line 139 "getdb.py"
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_feature_num)) != 0)) kw_args--;

#line 139 "getdb.py"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        else {
          __Pyx_RaiseArgtupleInvalid("Process", 1, 5, 5, 2); 
#line 139 "getdb.py"
__PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        }

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;

#line 139 "getdb.py"
        case  3:

#line 139 "getdb.py"
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NodeInfo)) != 0)) kw_args--;

#line 139 "getdb.py"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        else {
          __Pyx_RaiseArgtupleInvalid("Process", 1, 5, 5, 3); 
#line 139 "getdb.py"
__PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        }

#line 139 "getdb.py"
        CYTHON_FALLTHROUGH;

#line 139 "getdb.py"
        case  4:

#line 139 "getdb.py"
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EdgeInfo)) != 0)) kw_args--;

#line 139 "getdb.py"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        else {
          __Pyx_RaiseArgtupleInvalid("Process", 1, 5, 5, 4); 
#line 139 "getdb.py"
__PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
        }

#line 139 "getdb.py"
      }

#line 139 "getdb.py"
      if (unlikely(kw_args > 0)) {

#line 139 "getdb.py"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 139 "getdb.py"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Process") < 0)) __PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
      }

#line 139 "getdb.py"
    } else if (unlikely(__pyx_nargs != 5)) {

#line 139 "getdb.py"
      goto __pyx_L5_argtuple_error;

#line 139 "getdb.py"
    } else {

#line 139 "getdb.py"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 139 "getdb.py"
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 139 "getdb.py"
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 139 "getdb.py"
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);

#line 139 "getdb.py"
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);

#line 139 "getdb.py"
    }

#line 139 "getdb.py"
    __pyx_v_db_ = values[0];

#line 139 "getdb.py"
    __pyx_v_olapondb = values[1];

#line 139 "getdb.py"
    __pyx_v_feature_num = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_feature_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)

#line 139 "getdb.py"
    __pyx_v_NodeInfo = ((PyObject*)values[3]);

#line 139 "getdb.py"
    __pyx_v_EdgeInfo = ((PyObject*)values[4]);

#line 139 "getdb.py"
  }

#line 139 "getdb.py"
  goto __pyx_L4_argument_unpacking_done;

#line 139 "getdb.py"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Process", 1, 5, 5, __pyx_nargs); 
#line 139 "getdb.py"
__PYX_ERR(0, 139, __pyx_L3_error)

#line 139 "getdb.py"
  __pyx_L3_error:;

#line 139 "getdb.py"
  __Pyx_AddTraceback("getdb.Process", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 139 "getdb.py"
  __Pyx_RefNannyFinishContext();

#line 139 "getdb.py"
  return NULL;

#line 139 "getdb.py"
  __pyx_L4_argument_unpacking_done:;

#line 139 "getdb.py"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_NodeInfo), (&PyList_Type), 0, "NodeInfo", 1))) __PYX_ERR(0, 140, __pyx_L1_error)

#line 139 "getdb.py"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_EdgeInfo), (&PyList_Type), 0, "EdgeInfo", 1))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_r = 
#line 139 "getdb.py"
__pyx_pf_5getdb_Process(__pyx_self, __pyx_v_db_, __pyx_v_olapondb, __pyx_v_feature_num, __pyx_v_NodeInfo, __pyx_v_EdgeInfo);

#line 139 "getdb.py"


#line 139 "getdb.py"
  /* function exit code */

#line 139 "getdb.py"
  goto __pyx_L0;

#line 139 "getdb.py"
  __pyx_L1_error:;

#line 139 "getdb.py"
  __pyx_r = NULL;

#line 139 "getdb.py"
  __pyx_L0:;

#line 139 "getdb.py"
  __Pyx_RefNannyFinishContext();

#line 139 "getdb.py"
  return __pyx_r;

#line 139 "getdb.py"
}

#line 139 "getdb.py"


#line 139 "getdb.py"
static PyObject *__pyx_pf_5getdb_Process(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_, PyObject *__pyx_v_olapondb, __pyx_t_9lgraph_db_size_t __pyx_v_feature_num, PyObject *__pyx_v_NodeInfo, PyObject *__pyx_v_EdgeInfo) {

#line 139 "getdb.py"
  PyObject *__pyx_r = NULL;

#line 139 "getdb.py"
  __Pyx_RefNannyDeclarations

#line 139 "getdb.py"
  PyObject *__pyx_t_1 = NULL;

#line 139 "getdb.py"
  int __pyx_lineno = 0;

#line 139 "getdb.py"
  const char *__pyx_filename = NULL;

#line 139 "getdb.py"
  int __pyx_clineno = 0;

#line 139 "getdb.py"
  __Pyx_RefNannySetupContext("Process", 0);

#line 139 "getdb.py"
  __Pyx_XDECREF(__pyx_r);

#line 139 "getdb.py"
  __pyx_t_1 = __pyx_f_5getdb_Process(__pyx_v_db_, __pyx_v_olapondb, __pyx_v_feature_num, __pyx_v_NodeInfo, __pyx_v_EdgeInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  __Pyx_GOTREF(__pyx_t_1);

#line 139 "getdb.py"
  __pyx_r = __pyx_t_1;

#line 139 "getdb.py"
  __pyx_t_1 = 0;

#line 139 "getdb.py"
  goto __pyx_L0;

#line 139 "getdb.py"


#line 139 "getdb.py"
  /* function exit code */

#line 139 "getdb.py"
  __pyx_L1_error:;

#line 139 "getdb.py"
  __Pyx_XDECREF(__pyx_t_1);

#line 139 "getdb.py"
  __Pyx_AddTraceback("getdb.Process", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 139 "getdb.py"
  __pyx_r = NULL;

#line 139 "getdb.py"
  __pyx_L0:;

#line 139 "getdb.py"
  __Pyx_XGIVEREF(__pyx_r);

#line 139 "getdb.py"
  __Pyx_RefNannyFinishContext();

#line 139 "getdb.py"
  return __pyx_r;

#line 139 "getdb.py"
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

#line 19 "cpython/complex.pxd"


#line 19 "cpython/complex.pxd"
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {

#line 19 "cpython/complex.pxd"
  double __pyx_r;

#line 19 "cpython/complex.pxd"
  __Pyx_RefNannyDeclarations

#line 19 "cpython/complex.pxd"
  __Pyx_RefNannySetupContext("real", 0);

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 20 "cpython/complex.pxd"
  __pyx_r = __pyx_v_self->cval.real;

#line 20 "cpython/complex.pxd"
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

#line 19 "cpython/complex.pxd"


#line 19 "cpython/complex.pxd"
  /* function exit code */

#line 19 "cpython/complex.pxd"
  __pyx_L0:;

#line 19 "cpython/complex.pxd"
  __Pyx_RefNannyFinishContext();

#line 19 "cpython/complex.pxd"
  return __pyx_r;

#line 19 "cpython/complex.pxd"
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

#line 23 "cpython/complex.pxd"


#line 23 "cpython/complex.pxd"
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {

#line 23 "cpython/complex.pxd"
  double __pyx_r;

#line 23 "cpython/complex.pxd"
  __Pyx_RefNannyDeclarations

#line 23 "cpython/complex.pxd"
  __Pyx_RefNannySetupContext("imag", 0);

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */

#line 24 "cpython/complex.pxd"
  __pyx_r = __pyx_v_self->cval.imag;

#line 24 "cpython/complex.pxd"
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

#line 23 "cpython/complex.pxd"


#line 23 "cpython/complex.pxd"
  /* function exit code */

#line 23 "cpython/complex.pxd"
  __pyx_L0:;

#line 23 "cpython/complex.pxd"
  __Pyx_RefNannyFinishContext();

#line 23 "cpython/complex.pxd"
  return __pyx_r;

#line 23 "cpython/complex.pxd"
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

#line 112 "cpython/contextvars.pxd"


#line 112 "cpython/contextvars.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {

#line 112 "cpython/contextvars.pxd"
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value
#line 112 "cpython/contextvars.pxd"
;
  PyObject *__pyx_v_pyvalue = NULL
#line 112 "cpython/contextvars.pxd"
;

#line 112 "cpython/contextvars.pxd"
  PyObject *__pyx_r = NULL;

#line 112 "cpython/contextvars.pxd"
  __Pyx_RefNannyDeclarations

#line 112 "cpython/contextvars.pxd"
  int __pyx_t_1;

#line 112 "cpython/contextvars.pxd"
  int __pyx_t_2;

#line 112 "cpython/contextvars.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 112 "cpython/contextvars.pxd"
  int __pyx_lineno = 0;

#line 112 "cpython/contextvars.pxd"
  const char *__pyx_filename = NULL;

#line 112 "cpython/contextvars.pxd"
  int __pyx_clineno = 0;

#line 112 "cpython/contextvars.pxd"
  __Pyx_RefNannySetupContext("get_value", 0);

#line 112 "cpython/contextvars.pxd"
  if (__pyx_optional_args) {

#line 112 "cpython/contextvars.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 112 "cpython/contextvars.pxd"
      __pyx_v_default_value = __pyx_optional_args->default_value;

#line 112 "cpython/contextvars.pxd"
    }

#line 112 "cpython/contextvars.pxd"
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */

#line 117 "cpython/contextvars.pxd"
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */

#line 118 "cpython/contextvars.pxd"
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */

#line 119 "cpython/contextvars.pxd"
  __pyx_t_2 = (__pyx_v_value == NULL);

#line 119 "cpython/contextvars.pxd"
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */

#line 121 "cpython/contextvars.pxd"
    __Pyx_INCREF(__pyx_v_default_value);

#line 121 "cpython/contextvars.pxd"
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */

#line 119 "cpython/contextvars.pxd"
    goto __pyx_L3;

#line 119 "cpython/contextvars.pxd"
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */

#line 124 "cpython/contextvars.pxd"
  /*else*/ {

#line 124 "cpython/contextvars.pxd"
    __pyx_t_3 = ((PyObject *)__pyx_v_value);

#line 124 "cpython/contextvars.pxd"
    __Pyx_INCREF(__pyx_t_3);

#line 124 "cpython/contextvars.pxd"
    __pyx_v_pyvalue = __pyx_t_3;

#line 124 "cpython/contextvars.pxd"
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */

#line 125 "cpython/contextvars.pxd"
    Py_XDECREF(__pyx_v_value);

#line 125 "cpython/contextvars.pxd"
  }

#line 125 "cpython/contextvars.pxd"
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 126 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 126 "cpython/contextvars.pxd"
  __Pyx_INCREF(__pyx_v_pyvalue);

#line 126 "cpython/contextvars.pxd"
  __pyx_r = __pyx_v_pyvalue;

#line 126 "cpython/contextvars.pxd"
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

#line 112 "cpython/contextvars.pxd"


#line 112 "cpython/contextvars.pxd"
  /* function exit code */

#line 112 "cpython/contextvars.pxd"
  __pyx_L1_error:;

#line 112 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 112 "cpython/contextvars.pxd"
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 112 "cpython/contextvars.pxd"
  __pyx_r = 0;

#line 112 "cpython/contextvars.pxd"
  __pyx_L0:;

#line 112 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_v_pyvalue);

#line 112 "cpython/contextvars.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 112 "cpython/contextvars.pxd"
  __Pyx_RefNannyFinishContext();

#line 112 "cpython/contextvars.pxd"
  return __pyx_r;

#line 112 "cpython/contextvars.pxd"
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

#line 129 "cpython/contextvars.pxd"


#line 129 "cpython/contextvars.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {

#line 129 "cpython/contextvars.pxd"
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value
#line 129 "cpython/contextvars.pxd"
;
  PyObject *__pyx_v_pyvalue = NULL
#line 129 "cpython/contextvars.pxd"
;

#line 129 "cpython/contextvars.pxd"
  PyObject *__pyx_r = NULL;

#line 129 "cpython/contextvars.pxd"
  __Pyx_RefNannyDeclarations

#line 129 "cpython/contextvars.pxd"
  int __pyx_t_1;

#line 129 "cpython/contextvars.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 129 "cpython/contextvars.pxd"
  int __pyx_lineno = 0;

#line 129 "cpython/contextvars.pxd"
  const char *__pyx_filename = NULL;

#line 129 "cpython/contextvars.pxd"
  int __pyx_clineno = 0;

#line 129 "cpython/contextvars.pxd"
  __Pyx_RefNannySetupContext("get_value_no_default", 0);

#line 129 "cpython/contextvars.pxd"
  if (__pyx_optional_args) {

#line 129 "cpython/contextvars.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 129 "cpython/contextvars.pxd"
      __pyx_v_default_value = __pyx_optional_args->default_value;

#line 129 "cpython/contextvars.pxd"
    }

#line 129 "cpython/contextvars.pxd"
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */

#line 135 "cpython/contextvars.pxd"
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */

#line 136 "cpython/contextvars.pxd"
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */

#line 138 "cpython/contextvars.pxd"
  __pyx_t_2 = ((PyObject *)__pyx_v_value);

#line 138 "cpython/contextvars.pxd"
  __Pyx_INCREF(__pyx_t_2);

#line 138 "cpython/contextvars.pxd"
  __pyx_v_pyvalue = __pyx_t_2;

#line 138 "cpython/contextvars.pxd"
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */

#line 139 "cpython/contextvars.pxd"
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */

#line 140 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 140 "cpython/contextvars.pxd"
  __Pyx_INCREF(__pyx_v_pyvalue);

#line 140 "cpython/contextvars.pxd"
  __pyx_r = __pyx_v_pyvalue;

#line 140 "cpython/contextvars.pxd"
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

#line 129 "cpython/contextvars.pxd"


#line 129 "cpython/contextvars.pxd"
  /* function exit code */

#line 129 "cpython/contextvars.pxd"
  __pyx_L1_error:;

#line 129 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_t_2);

#line 129 "cpython/contextvars.pxd"
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 129 "cpython/contextvars.pxd"
  __pyx_r = 0;

#line 129 "cpython/contextvars.pxd"
  __pyx_L0:;

#line 129 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_v_pyvalue);

#line 129 "cpython/contextvars.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 129 "cpython/contextvars.pxd"
  __Pyx_RefNannyFinishContext();

#line 129 "cpython/contextvars.pxd"
  return __pyx_r;

#line 129 "cpython/contextvars.pxd"
}

/* "array.pxd":104
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

#line 104 "array.pxd"


#line 104 "array.pxd"
/* Python wrapper */

#line 104 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 104 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 104 "array.pxd"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 104 "array.pxd"
  int __pyx_r;

#line 104 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 104 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 104 "array.pxd"
__pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 104 "array.pxd"


#line 104 "array.pxd"
  /* function exit code */

#line 104 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 104 "array.pxd"
  return __pyx_r;

#line 104 "array.pxd"
}

#line 104 "array.pxd"


#line 104 "array.pxd"
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL
#line 104 "array.pxd"
;

#line 104 "array.pxd"
  int __pyx_r;

#line 104 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 104 "array.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 104 "array.pxd"
  char *__pyx_t_2;

#line 104 "array.pxd"
  int __pyx_t_3;

#line 104 "array.pxd"
  PyObject *__pyx_t_4 = NULL;

#line 104 "array.pxd"
  Py_ssize_t __pyx_t_5;

#line 104 "array.pxd"
  int __pyx_t_6;

#line 104 "array.pxd"
  char __pyx_t_7;

#line 104 "array.pxd"
  int __pyx_lineno = 0;

#line 104 "array.pxd"
  const char *__pyx_filename = NULL;

#line 104 "array.pxd"
  int __pyx_clineno = 0;

#line 104 "array.pxd"
  if (unlikely(__pyx_v_info == NULL)) {

#line 104 "array.pxd"
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");

#line 104 "array.pxd"
    return -1;

#line 104 "array.pxd"
  }

#line 104 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 104 "array.pxd"
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 104 "array.pxd"
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "array.pxd":109
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */

#line 109 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 109, __pyx_L1_error)

#line 109 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 109 "array.pxd"
  __pyx_v_item_count = __pyx_t_1;

#line 109 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":111
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */

#line 111 "array.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":112
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */

#line 112 "array.pxd"
  __pyx_t_2 = __pyx_v_self->data.as_chars;

#line 112 "array.pxd"
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":113
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */

#line 113 "array.pxd"
  __pyx_v_info->readonly = 0;

  /* "array.pxd":114
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */

#line 114 "array.pxd"
  __pyx_v_info->ndim = 1;

  /* "array.pxd":115
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */

#line 115 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;

#line 115 "array.pxd"
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":116
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 */

#line 116 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)

#line 116 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 116 "array.pxd"
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 116, __pyx_L1_error)

#line 116 "array.pxd"
  __Pyx_GOTREF(__pyx_t_4);

#line 116 "array.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 116 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)

#line 116 "array.pxd"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 116 "array.pxd"
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":118
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */

#line 118 "array.pxd"
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":119
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */

#line 119 "array.pxd"
  __pyx_t_6 = (!(__pyx_v_info->shape != 0));

#line 119 "array.pxd"
  if (unlikely(__pyx_t_6)) {

    /* "array.pxd":120
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */

#line 120 "array.pxd"
    PyErr_NoMemory(); __PYX_ERR(3, 120, __pyx_L1_error)

    /* "array.pxd":119
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */

#line 119 "array.pxd"
  }

  /* "array.pxd":121
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */

#line 121 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L1_error)

#line 121 "array.pxd"
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":122
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */

#line 122 "array.pxd"
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":124
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */

#line 124 "array.pxd"
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":125
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */

#line 125 "array.pxd"
  __pyx_t_7 = __pyx_v_self->ob_descr->typecode;

#line 125 "array.pxd"
  (__pyx_v_info->format[0]) = __pyx_t_7;

  /* "array.pxd":126
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */

#line 126 "array.pxd"
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":127
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */

#line 127 "array.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_self);

#line 127 "array.pxd"
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);

#line 127 "array.pxd"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 127 "array.pxd"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 127 "array.pxd"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":104
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

#line 104 "array.pxd"


#line 104 "array.pxd"
  /* function exit code */

#line 104 "array.pxd"
  __pyx_r = 0;

#line 104 "array.pxd"
  goto __pyx_L0;

#line 104 "array.pxd"
  __pyx_L1_error:;

#line 104 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 104 "array.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 104 "array.pxd"
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 104 "array.pxd"
  __pyx_r = -1;

#line 104 "array.pxd"
  if (__pyx_v_info->obj != NULL) {

#line 104 "array.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 104 "array.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 104 "array.pxd"
  }

#line 104 "array.pxd"
  goto __pyx_L2;

#line 104 "array.pxd"
  __pyx_L0:;

#line 104 "array.pxd"
  if (__pyx_v_info->obj == Py_None) {

#line 104 "array.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 104 "array.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 104 "array.pxd"
  }

#line 104 "array.pxd"
  __pyx_L2:;

#line 104 "array.pxd"
  __Pyx_XDECREF(__pyx_v_item_count);

#line 104 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 104 "array.pxd"
  return __pyx_r;

#line 104 "array.pxd"
}

/* "array.pxd":129
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

#line 129 "array.pxd"


#line 129 "array.pxd"
/* Python wrapper */

#line 129 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 129 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 129 "array.pxd"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 129 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 129 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 129 "array.pxd"
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 129 "array.pxd"


#line 129 "array.pxd"
  /* function exit code */

#line 129 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 129 "array.pxd"
}

#line 129 "array.pxd"


#line 129 "array.pxd"
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 129 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 129 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":130
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */

#line 130 "array.pxd"
  PyObject_Free(__pyx_v_info->shape);

  /* "array.pxd":129
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

#line 129 "array.pxd"


#line 129 "array.pxd"
  /* function exit code */

#line 129 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 129 "array.pxd"
}

/* "array.pxd":141
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 141 "array.pxd"


#line 141 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = 0
#line 141 "array.pxd"
;

#line 141 "array.pxd"
  arrayobject *__pyx_r = NULL;

#line 141 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 141 "array.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 141 "array.pxd"
  int __pyx_t_2;

#line 141 "array.pxd"
  int __pyx_t_3;

#line 141 "array.pxd"
  int __pyx_lineno = 0;

#line 141 "array.pxd"
  const char *__pyx_filename = NULL;

#line 141 "array.pxd"
  int __pyx_clineno = 0;

#line 141 "array.pxd"
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":145
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */

#line 145 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 145, __pyx_L1_error)

#line 145 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 145 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 145 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":146
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */

#line 146 "array.pxd"
  if (__pyx_v_zero) {

#line 146 "array.pxd"
  } else {

#line 146 "array.pxd"
    __pyx_t_2 = __pyx_v_zero;

#line 146 "array.pxd"
    goto __pyx_L4_bool_binop_done;

#line 146 "array.pxd"
  }

#line 146 "array.pxd"
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);

#line 146 "array.pxd"
  __pyx_t_2 = __pyx_t_3;

#line 146 "array.pxd"
  __pyx_L4_bool_binop_done:;

#line 146 "array.pxd"
  if (__pyx_t_2) {

    /* "array.pxd":147
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 147 "array.pxd"
    (void)(memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize)));

    /* "array.pxd":146
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */

#line 146 "array.pxd"
  }

  /* "array.pxd":148
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */

#line 148 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 148 "array.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_op);

#line 148 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 148 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":141
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 141 "array.pxd"


#line 141 "array.pxd"
  /* function exit code */

#line 141 "array.pxd"
  __pyx_L1_error:;

#line 141 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 141 "array.pxd"
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 141 "array.pxd"
  __pyx_r = 0;

#line 141 "array.pxd"
  __pyx_L0:;

#line 141 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 141 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 141 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 141 "array.pxd"
  return __pyx_r;

#line 141 "array.pxd"
}

/* "array.pxd":150
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 150 "array.pxd"


#line 150 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = 0
#line 150 "array.pxd"
;

#line 150 "array.pxd"
  arrayobject *__pyx_r = NULL;

#line 150 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 150 "array.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 150 "array.pxd"
  int __pyx_lineno = 0;

#line 150 "array.pxd"
  const char *__pyx_filename = NULL;

#line 150 "array.pxd"
  int __pyx_clineno = 0;

#line 150 "array.pxd"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":152
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */

#line 152 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 152, __pyx_L1_error)

#line 152 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 152 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 152 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":153
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 153 "array.pxd"
  (void)(memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize)));

  /* "array.pxd":154
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */

#line 154 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 154 "array.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_op);

#line 154 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 154 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":150
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 150 "array.pxd"


#line 150 "array.pxd"
  /* function exit code */

#line 150 "array.pxd"
  __pyx_L1_error:;

#line 150 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 150 "array.pxd"
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 150 "array.pxd"
  __pyx_r = 0;

#line 150 "array.pxd"
  __pyx_L0:;

#line 150 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 150 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 150 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 150 "array.pxd"
  return __pyx_r;

#line 150 "array.pxd"
}

/* "array.pxd":156
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 156 "array.pxd"


#line 156 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize
#line 156 "array.pxd"
;
  Py_ssize_t __pyx_v_origsize
#line 156 "array.pxd"
;

#line 156 "array.pxd"
  int __pyx_r;

#line 156 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 156 "array.pxd"
  int __pyx_t_1;

#line 156 "array.pxd"
  int __pyx_lineno = 0;

#line 156 "array.pxd"
  const char *__pyx_filename = NULL;

#line 156 "array.pxd"
  int __pyx_clineno = 0;

#line 156 "array.pxd"
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":160
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */

#line 160 "array.pxd"
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;

#line 160 "array.pxd"
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":161
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */

#line 161 "array.pxd"
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":162
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */

#line 162 "array.pxd"
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 162, __pyx_L1_error)

  /* "array.pxd":163
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

#line 163 "array.pxd"
  (void)(memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize)));

  /* "array.pxd":164
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */

#line 164 "array.pxd"
  __pyx_r = 0;

#line 164 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":156
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 156 "array.pxd"


#line 156 "array.pxd"
  /* function exit code */

#line 156 "array.pxd"
  __pyx_L1_error:;

#line 156 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 156 "array.pxd"
  __pyx_r = -1;

#line 156 "array.pxd"
  __pyx_L0:;

#line 156 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 156 "array.pxd"
  return __pyx_r;

#line 156 "array.pxd"
}

/* "array.pxd":166
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 166 "array.pxd"


#line 166 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {

#line 166 "array.pxd"
  int __pyx_r;

#line 166 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 166 "array.pxd"
  int __pyx_t_1;

#line 166 "array.pxd"
  int __pyx_t_2;

#line 166 "array.pxd"
  int __pyx_lineno = 0;

#line 166 "array.pxd"
  const char *__pyx_filename = NULL;

#line 166 "array.pxd"
  int __pyx_clineno = 0;

#line 166 "array.pxd"
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":168
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */

#line 168 "array.pxd"
  __pyx_t_1 = (__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode);

#line 168 "array.pxd"
  if (__pyx_t_1) {

    /* "array.pxd":169
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */

#line 169 "array.pxd"
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 169, __pyx_L1_error)

    /* "array.pxd":168
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */

#line 168 "array.pxd"
  }

  /* "array.pxd":170
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */

#line 170 "array.pxd"
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(3, 170, __pyx_L1_error)

#line 170 "array.pxd"
  __pyx_r = __pyx_t_2;

#line 170 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":166
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 166 "array.pxd"


#line 166 "array.pxd"
  /* function exit code */

#line 166 "array.pxd"
  __pyx_L1_error:;

#line 166 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 166 "array.pxd"
  __pyx_r = -1;

#line 166 "array.pxd"
  __pyx_L0:;

#line 166 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 166 "array.pxd"
  return __pyx_r;

#line 166 "array.pxd"
}

/* "array.pxd":172
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 172 "array.pxd"


#line 172 "array.pxd"
static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {

#line 172 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 172 "array.pxd"
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":174
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */

#line 174 "array.pxd"
  (void)(memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize)));

  /* "array.pxd":172
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 172 "array.pxd"


#line 172 "array.pxd"
  /* function exit code */

#line 172 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 172 "array.pxd"
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length
#line 13 "string.from_py"
;
  char const *__pyx_v_data
#line 13 "string.from_py"
;

#line 13 "string.from_py"
  std::string __pyx_r;

#line 13 "string.from_py"
  __Pyx_RefNannyDeclarations

#line 13 "string.from_py"
  char const *__pyx_t_1;

#line 13 "string.from_py"
  std::string __pyx_t_2;

#line 13 "string.from_py"
  int __pyx_lineno = 0;

#line 13 "string.from_py"
  const char *__pyx_filename = NULL;

#line 13 "string.from_py"
  int __pyx_clineno = 0;

#line 13 "string.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */

#line 14 "string.from_py"
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */

#line 15 "string.from_py"
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "string.from_py"
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 16 "string.from_py"
  try {

#line 16 "string.from_py"
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);

#line 16 "string.from_py"
  } catch(...) {

#line 16 "string.from_py"
    __Pyx_CppExn2PyErr();

#line 16 "string.from_py"
    __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "string.from_py"
  }

#line 16 "string.from_py"
  __pyx_r = __pyx_t_2;

#line 16 "string.from_py"
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /* function exit code */

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  __Pyx_RefNannyFinishContext();

#line 13 "string.from_py"
  return __pyx_r;

#line 13 "string.from_py"
}

/* "View.MemoryView":130
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

#line 130 "View.MemoryView"


#line 130 "View.MemoryView"
/* Python wrapper */

#line 130 "View.MemoryView"
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 130 "View.MemoryView"
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0
#line 130 "View.MemoryView"
;
  Py_ssize_t __pyx_v_itemsize
#line 130 "View.MemoryView"
;
  PyObject *__pyx_v_format = 0
#line 130 "View.MemoryView"
;
  PyObject *__pyx_v_mode = 0
#line 130 "View.MemoryView"
;
  int __pyx_v_allocate_buffer
#line 130 "View.MemoryView"
;

#line 130 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 130 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 130 "View.MemoryView"
  int __pyx_lineno = 0;

#line 130 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 130 "View.MemoryView"
  int __pyx_clineno = 0;

#line 130 "View.MemoryView"
  int __pyx_r;

#line 130 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 130 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 130 "View.MemoryView"
  {

#line 130 "View.MemoryView"
    #if CYTHON_USE_MODULE_STATE

#line 130 "View.MemoryView"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};

#line 130 "View.MemoryView"
    #else

#line 130 "View.MemoryView"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};

#line 130 "View.MemoryView"
    #endif

#line 130 "View.MemoryView"
    PyObject* values[5] = {0,0,0,0,0};

#line 130 "View.MemoryView"
    values[3] = ((PyObject *)__pyx_n_s_c);

#line 130 "View.MemoryView"
    if (__pyx_kwds) {

#line 130 "View.MemoryView"
      Py_ssize_t kw_args;

#line 130 "View.MemoryView"
      switch (__pyx_nargs) {
        case  5: 
#line 130 "View.MemoryView"
values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 130 "View.MemoryView"
values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 130 "View.MemoryView"
values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 130 "View.MemoryView"
values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 130 "View.MemoryView"
values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 130 "View.MemoryView"
break;
        default: 
#line 130 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 130 "View.MemoryView"
      }

#line 130 "View.MemoryView"
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);

#line 130 "View.MemoryView"
      switch (__pyx_nargs) {

#line 130 "View.MemoryView"
        case  0:

#line 130 "View.MemoryView"
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_shape)) != 0)) kw_args--;

#line 130 "View.MemoryView"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)
        else 
#line 130 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 130 "View.MemoryView"
        case  1:

#line 130 "View.MemoryView"
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_itemsize)) != 0)) kw_args--;

#line 130 "View.MemoryView"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); 
#line 130 "View.MemoryView"
__PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
        }

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 130 "View.MemoryView"
        case  2:

#line 130 "View.MemoryView"
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_format)) != 0)) kw_args--;

#line 130 "View.MemoryView"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); 
#line 130 "View.MemoryView"
__PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
        }

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 130 "View.MemoryView"
        case  3:

#line 130 "View.MemoryView"
        if (kw_args > 0) {

#line 130 "View.MemoryView"
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode);

#line 130 "View.MemoryView"
          if (value) { values[3] = value; kw_args--; }

#line 130 "View.MemoryView"
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
        }

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 130 "View.MemoryView"
        case  4:

#line 130 "View.MemoryView"
        if (kw_args > 0) {

#line 130 "View.MemoryView"
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_allocate_buffer);

#line 130 "View.MemoryView"
          if (value) { values[4] = value; kw_args--; }

#line 130 "View.MemoryView"
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
        }

#line 130 "View.MemoryView"
      }

#line 130 "View.MemoryView"
      if (unlikely(kw_args > 0)) {

#line 130 "View.MemoryView"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 130 "View.MemoryView"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
      }

#line 130 "View.MemoryView"
    } else {

#line 130 "View.MemoryView"
      switch (__pyx_nargs) {
        case  5: 
#line 130 "View.MemoryView"
values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 130 "View.MemoryView"
values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);

#line 130 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 130 "View.MemoryView"
values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);

#line 130 "View.MemoryView"
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);

#line 130 "View.MemoryView"
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);

#line 130 "View.MemoryView"
        break;
        default: 
#line 130 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 130 "View.MemoryView"
      }

#line 130 "View.MemoryView"
    }

#line 130 "View.MemoryView"
    __pyx_v_shape = ((PyObject*)values[0]);

#line 130 "View.MemoryView"
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)

#line 130 "View.MemoryView"
    __pyx_v_format = values[2];

#line 130 "View.MemoryView"
    __pyx_v_mode = values[3];

#line 130 "View.MemoryView"
    if (values[4]) {

#line 130 "View.MemoryView"
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 131, __pyx_L3_error)

#line 130 "View.MemoryView"
    } else {

      /* "View.MemoryView":131
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */

#line 131 "View.MemoryView"
      __pyx_v_allocate_buffer = ((int)1);

#line 131 "View.MemoryView"
    }

#line 131 "View.MemoryView"
  }

#line 131 "View.MemoryView"
  goto __pyx_L4_argument_unpacking_done;

#line 131 "View.MemoryView"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, __pyx_nargs); 
#line 131 "View.MemoryView"
__PYX_ERR(1, 130, __pyx_L3_error)

#line 131 "View.MemoryView"
  __pyx_L3_error:;

#line 131 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 131 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 131 "View.MemoryView"
  return -1;

#line 131 "View.MemoryView"
  __pyx_L4_argument_unpacking_done:;

#line 131 "View.MemoryView"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 130, __pyx_L1_error)

#line 131 "View.MemoryView"
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {

#line 131 "View.MemoryView"
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 130, __pyx_L1_error)

#line 131 "View.MemoryView"
  }
  __pyx_r = 
#line 131 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":130
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

#line 130 "View.MemoryView"


#line 130 "View.MemoryView"
  /* function exit code */

#line 130 "View.MemoryView"
  goto __pyx_L0;

#line 130 "View.MemoryView"
  __pyx_L1_error:;

#line 130 "View.MemoryView"
  __pyx_r = -1;

#line 130 "View.MemoryView"
  __pyx_L0:;

#line 130 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 130 "View.MemoryView"
  return __pyx_r;

#line 130 "View.MemoryView"
}

#line 130 "View.MemoryView"


#line 130 "View.MemoryView"
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx
#line 130 "View.MemoryView"
;
  Py_ssize_t __pyx_v_dim
#line 130 "View.MemoryView"
;
  char __pyx_v_order
#line 130 "View.MemoryView"
;

#line 130 "View.MemoryView"
  int __pyx_r;

#line 130 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 130 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 130 "View.MemoryView"
  int __pyx_t_2;

#line 130 "View.MemoryView"
  int __pyx_t_3;

#line 130 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 130 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 130 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 130 "View.MemoryView"
  int __pyx_t_7;

#line 130 "View.MemoryView"
  char *__pyx_t_8;

#line 130 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 130 "View.MemoryView"
  Py_UCS4 __pyx_t_10;

#line 130 "View.MemoryView"
  int __pyx_lineno = 0;

#line 130 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 130 "View.MemoryView"
  int __pyx_clineno = 0;

#line 130 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__", 0);

#line 130 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":136
 *         cdef Py_ssize_t dim
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */

#line 136 "View.MemoryView"
  if (unlikely(__pyx_v_shape == Py_None)) {

#line 136 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 136 "View.MemoryView"
    __PYX_ERR(1, 136, __pyx_L1_error)

#line 136 "View.MemoryView"
  }

#line 136 "View.MemoryView"
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 136, __pyx_L1_error)

#line 136 "View.MemoryView"
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":137
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */

#line 137 "View.MemoryView"
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":139
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 */

#line 139 "View.MemoryView"
  __pyx_t_2 = (!(__pyx_v_self->ndim != 0));

#line 139 "View.MemoryView"
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":140
 * 
 *         if not self.ndim:
 *             raise ValueError, "Empty shape tuple for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */

#line 140 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Empty_shape_tuple_for_cython_arr, 0, 0);

#line 140 "View.MemoryView"
    __PYX_ERR(1, 140, __pyx_L1_error)

    /* "View.MemoryView":139
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 */

#line 139 "View.MemoryView"
  }

  /* "View.MemoryView":142
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 */

#line 142 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_itemsize <= 0);

#line 142 "View.MemoryView"
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":143
 * 
 *         if itemsize <= 0:
 *             raise ValueError, "itemsize <= 0 for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */

#line 143 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_itemsize_0_for_cython_array, 0, 0);

#line 143 "View.MemoryView"
    __PYX_ERR(1, 143, __pyx_L1_error)

    /* "View.MemoryView":142
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 */

#line 142 "View.MemoryView"
  }

  /* "View.MemoryView":145
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */

#line 145 "View.MemoryView"
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 

#line 145 "View.MemoryView"
  __pyx_t_3 = (!__pyx_t_2);

#line 145 "View.MemoryView"
  if (__pyx_t_3) {

    /* "View.MemoryView":146
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */

#line 146 "View.MemoryView"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 146, __pyx_L1_error)

#line 146 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 146 "View.MemoryView"
    __pyx_t_6 = NULL;

#line 146 "View.MemoryView"
    __pyx_t_7 = 0;

#line 146 "View.MemoryView"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 146 "View.MemoryView"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 146 "View.MemoryView"
      if (likely(__pyx_t_6)) {

#line 146 "View.MemoryView"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 146 "View.MemoryView"
        __Pyx_INCREF(__pyx_t_6);

#line 146 "View.MemoryView"
        __Pyx_INCREF(function);

#line 146 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 146 "View.MemoryView"
        __pyx_t_7 = 1;

#line 146 "View.MemoryView"
      }

#line 146 "View.MemoryView"
    }

#line 146 "View.MemoryView"
    {

#line 146 "View.MemoryView"
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_ASCII};

#line 146 "View.MemoryView"
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);

#line 146 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 146 "View.MemoryView"
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 146, __pyx_L1_error)

#line 146 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 146 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 146 "View.MemoryView"
    }

#line 146 "View.MemoryView"
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_4);

#line 146 "View.MemoryView"
    __pyx_t_4 = 0;

    /* "View.MemoryView":145
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */

#line 145 "View.MemoryView"
  }

  /* "View.MemoryView":147
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */

#line 147 "View.MemoryView"
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_v_format))) __PYX_ERR(1, 147, __pyx_L1_error)

#line 147 "View.MemoryView"
  __pyx_t_4 = __pyx_v_format;

#line 147 "View.MemoryView"
  __Pyx_INCREF(__pyx_t_4);

#line 147 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_4);

#line 147 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_self->_format);

#line 147 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_self->_format);

#line 147 "View.MemoryView"
  __pyx_v_self->_format = ((PyObject*)__pyx_t_4);

#line 147 "View.MemoryView"
  __pyx_t_4 = 0;

  /* "View.MemoryView":148
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 148 "View.MemoryView"
  if (unlikely(__pyx_v_self->_format == Py_None)) {

#line 148 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");

#line 148 "View.MemoryView"
    __PYX_ERR(1, 148, __pyx_L1_error)

#line 148 "View.MemoryView"
  }

#line 148 "View.MemoryView"
  __pyx_t_8 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 148, __pyx_L1_error)

#line 148 "View.MemoryView"
  __pyx_v_self->format = __pyx_t_8;

  /* "View.MemoryView":151
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */

#line 151 "View.MemoryView"
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":152
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */

#line 152 "View.MemoryView"
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":154
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
 */

#line 154 "View.MemoryView"
  __pyx_t_3 = (!(__pyx_v_self->_shape != 0));

#line 154 "View.MemoryView"
  if (unlikely(__pyx_t_3)) {

    /* "View.MemoryView":155
 * 
 *         if not self._shape:
 *             raise MemoryError, "unable to allocate shape and strides."             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 155 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_kp_s_unable_to_allocate_shape_and_str, 0, 0);

#line 155 "View.MemoryView"
    __PYX_ERR(1, 155, __pyx_L1_error)

    /* "View.MemoryView":154
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
 */

#line 154 "View.MemoryView"
  }

  /* "View.MemoryView":158
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 */

#line 158 "View.MemoryView"
  __pyx_t_7 = 0;

#line 158 "View.MemoryView"
  __pyx_t_4 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;

#line 158 "View.MemoryView"
  for (;;) {

#line 158 "View.MemoryView"
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 158 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 158 "View.MemoryView"
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(1, 158, __pyx_L1_error)

#line 158 "View.MemoryView"
    #else

#line 158 "View.MemoryView"
    __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 158, __pyx_L1_error)

#line 158 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 158 "View.MemoryView"
    #endif

#line 158 "View.MemoryView"
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 158, __pyx_L1_error)

#line 158 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 158 "View.MemoryView"
    __pyx_v_dim = __pyx_t_9;

#line 158 "View.MemoryView"
    __pyx_v_idx = __pyx_t_7;

#line 158 "View.MemoryView"
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":159
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
 */

#line 159 "View.MemoryView"
    __pyx_t_3 = (__pyx_v_dim <= 0);

#line 159 "View.MemoryView"
    if (unlikely(__pyx_t_3)) {

      /* "View.MemoryView":160
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */

#line 160 "View.MemoryView"
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 160, __pyx_L1_error)

#line 160 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 160 "View.MemoryView"
      __pyx_t_9 = 0;

#line 160 "View.MemoryView"
      __pyx_t_10 = 127;

#line 160 "View.MemoryView"
      __Pyx_INCREF(__pyx_kp_u_Invalid_shape_in_axis);

#line 160 "View.MemoryView"
      __pyx_t_9 += 22;

#line 160 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_shape_in_axis);

#line 160 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Invalid_shape_in_axis);

#line 160 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 160, __pyx_L1_error)

#line 160 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 160 "View.MemoryView"
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);

#line 160 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_t_6);

#line 160 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);

#line 160 "View.MemoryView"
      __pyx_t_6 = 0;

#line 160 "View.MemoryView"
      __Pyx_INCREF(__pyx_kp_u_);

#line 160 "View.MemoryView"
      __pyx_t_9 += 2;

#line 160 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_kp_u_);

#line 160 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_);

#line 160 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 160, __pyx_L1_error)

#line 160 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 160 "View.MemoryView"
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);

#line 160 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_t_6);

#line 160 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);

#line 160 "View.MemoryView"
      __pyx_t_6 = 0;

#line 160 "View.MemoryView"
      __Pyx_INCREF(__pyx_kp_u__2);

#line 160 "View.MemoryView"
      __pyx_t_9 += 1;

#line 160 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_kp_u__2);

#line 160 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__2);

#line 160 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 160, __pyx_L1_error)

#line 160 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 160 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 160 "View.MemoryView"
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_6, 0, 0);

#line 160 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 160 "View.MemoryView"
      __PYX_ERR(1, 160, __pyx_L1_error)

      /* "View.MemoryView":159
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
 */

#line 159 "View.MemoryView"
    }

    /* "View.MemoryView":161
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */

#line 161 "View.MemoryView"
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":158
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 */

#line 158 "View.MemoryView"
  }

#line 158 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "View.MemoryView":164
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */

#line 164 "View.MemoryView"
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 164, __pyx_L1_error)

#line 164 "View.MemoryView"
  if (__pyx_t_3) {

    /* "View.MemoryView":165
 *         cdef char order
 *         if mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 */

#line 165 "View.MemoryView"
    __pyx_v_order = 'C';

    /* "View.MemoryView":166
 *         if mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         elif mode == 'fortran':
 *             order = b'F'
 */

#line 166 "View.MemoryView"
    __Pyx_INCREF(__pyx_n_u_c);

#line 166 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_n_u_c);

#line 166 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_self->mode);

#line 166 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_self->mode);

#line 166 "View.MemoryView"
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":164
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */

#line 164 "View.MemoryView"
    goto __pyx_L10;

#line 164 "View.MemoryView"
  }

  /* "View.MemoryView":167
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */

#line 167 "View.MemoryView"
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 167, __pyx_L1_error)

#line 167 "View.MemoryView"
  if (likely(__pyx_t_3)) {

    /* "View.MemoryView":168
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         else:
 */

#line 168 "View.MemoryView"
    __pyx_v_order = 'F';

    /* "View.MemoryView":169
 *         elif mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 */

#line 169 "View.MemoryView"
    __Pyx_INCREF(__pyx_n_u_fortran);

#line 169 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_n_u_fortran);

#line 169 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_self->mode);

#line 169 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_self->mode);

#line 169 "View.MemoryView"
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":167
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */

#line 167 "View.MemoryView"
    goto __pyx_L10;

#line 167 "View.MemoryView"
  }

  /* "View.MemoryView":171
 *             self.mode = u'fortran'
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 */

#line 171 "View.MemoryView"
  /*else*/ {

#line 171 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_mode, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 171, __pyx_L1_error)

#line 171 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 171 "View.MemoryView"
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 171, __pyx_L1_error)

#line 171 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_6);

#line 171 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 171 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_6, 0, 0);

#line 171 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 171 "View.MemoryView"
    __PYX_ERR(1, 171, __pyx_L1_error)

#line 171 "View.MemoryView"
  }

#line 171 "View.MemoryView"
  __pyx_L10:;

  /* "View.MemoryView":173
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)             # <<<<<<<<<<<<<<
 * 
 *         self.free_data = allocate_buffer
 */

#line 173 "View.MemoryView"
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":175
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 * 
 */

#line 175 "View.MemoryView"
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":176
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 * 
 *         if allocate_buffer:
 */

#line 176 "View.MemoryView"
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 176, __pyx_L1_error)

#line 176 "View.MemoryView"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)

#line 176 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 176 "View.MemoryView"
  __pyx_v_self->dtype_is_object = __pyx_t_3;

  /* "View.MemoryView":178
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
 */

#line 178 "View.MemoryView"
  if (__pyx_v_allocate_buffer) {

    /* "View.MemoryView":179
 * 
 *         if allocate_buffer:
 *             _allocate_buffer(self)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */

#line 179 "View.MemoryView"
    __pyx_t_7 = __pyx_array_allocate_buffer(__pyx_v_self); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 179, __pyx_L1_error)

    /* "View.MemoryView":178
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
 */

#line 178 "View.MemoryView"
  }

  /* "View.MemoryView":130
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

#line 130 "View.MemoryView"


#line 130 "View.MemoryView"
  /* function exit code */

#line 130 "View.MemoryView"
  __pyx_r = 0;

#line 130 "View.MemoryView"
  goto __pyx_L0;

#line 130 "View.MemoryView"
  __pyx_L1_error:;

#line 130 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 130 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 130 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 130 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 130 "View.MemoryView"
  __pyx_r = -1;

#line 130 "View.MemoryView"
  __pyx_L0:;

#line 130 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_format);

#line 130 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 130 "View.MemoryView"
  return __pyx_r;

#line 130 "View.MemoryView"
}

/* "View.MemoryView":181
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 */

#line 181 "View.MemoryView"


#line 181 "View.MemoryView"
/* Python wrapper */

#line 181 "View.MemoryView"
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 181 "View.MemoryView"
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 181 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 181 "View.MemoryView"
  int __pyx_r;

#line 181 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 181 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 181 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 181 "View.MemoryView"


#line 181 "View.MemoryView"
  /* function exit code */

#line 181 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 181 "View.MemoryView"
  return __pyx_r;

#line 181 "View.MemoryView"
}

#line 181 "View.MemoryView"


#line 181 "View.MemoryView"
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode
#line 181 "View.MemoryView"
;

#line 181 "View.MemoryView"
  int __pyx_r;

#line 181 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 181 "View.MemoryView"
  int __pyx_t_1;

#line 181 "View.MemoryView"
  char *__pyx_t_2;

#line 181 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 181 "View.MemoryView"
  int __pyx_t_4;

#line 181 "View.MemoryView"
  Py_ssize_t *__pyx_t_5;

#line 181 "View.MemoryView"
  int __pyx_lineno = 0;

#line 181 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 181 "View.MemoryView"
  int __pyx_clineno = 0;

#line 181 "View.MemoryView"
  if (unlikely(__pyx_v_info == NULL)) {

#line 181 "View.MemoryView"
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");

#line 181 "View.MemoryView"
    return -1;

#line 181 "View.MemoryView"
  }

#line 181 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 181 "View.MemoryView"
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 181 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":183
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 */

#line 183 "View.MemoryView"
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":184
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */

#line 184 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & ((PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS) | PyBUF_ANY_CONTIGUOUS)) != 0);

#line 184 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":185
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 */

#line 185 "View.MemoryView"
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 185, __pyx_L1_error)

#line 185 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":186
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */

#line 186 "View.MemoryView"
      __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":185
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 */

#line 185 "View.MemoryView"
      goto __pyx_L4;

#line 185 "View.MemoryView"
    }

    /* "View.MemoryView":187
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 */

#line 187 "View.MemoryView"
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 187, __pyx_L1_error)

#line 187 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":188
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 */

#line 188 "View.MemoryView"
      __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":187
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 */

#line 187 "View.MemoryView"
    }

#line 187 "View.MemoryView"
    __pyx_L4:;

    /* "View.MemoryView":189
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 */

#line 189 "View.MemoryView"
    __pyx_t_1 = (!((__pyx_v_flags & __pyx_v_bufmode) != 0));

#line 189 "View.MemoryView"
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":190
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */

#line 190 "View.MemoryView"
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Can_only_create_a_buffer_that_is, 0, 0);

#line 190 "View.MemoryView"
      __PYX_ERR(1, 190, __pyx_L1_error)

      /* "View.MemoryView":189
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 */

#line 189 "View.MemoryView"
    }

    /* "View.MemoryView":184
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */

#line 184 "View.MemoryView"
  }

  /* "View.MemoryView":191
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 * 
 */

#line 191 "View.MemoryView"
  __pyx_t_2 = __pyx_v_self->data;

#line 191 "View.MemoryView"
  __pyx_v_info->buf = __pyx_t_2;

  /* "View.MemoryView":192
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */

#line 192 "View.MemoryView"
  __pyx_t_3 = __pyx_v_self->len;

#line 192 "View.MemoryView"
  __pyx_v_info->len = __pyx_t_3;

  /* "View.MemoryView":194
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 */

#line 194 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);

#line 194 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":195
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *             info.shape = self._shape
 *             info.strides = self._strides
 */

#line 195 "View.MemoryView"
    __pyx_t_4 = __pyx_v_self->ndim;

#line 195 "View.MemoryView"
    __pyx_v_info->ndim = __pyx_t_4;

    /* "View.MemoryView":196
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim
 *             info.shape = self._shape             # <<<<<<<<<<<<<<
 *             info.strides = self._strides
 *         else:
 */

#line 196 "View.MemoryView"
    __pyx_t_5 = __pyx_v_self->_shape;

#line 196 "View.MemoryView"
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":197
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 *             info.strides = self._strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.ndim = 1
 */

#line 197 "View.MemoryView"
    __pyx_t_5 = __pyx_v_self->_strides;

#line 197 "View.MemoryView"
    __pyx_v_info->strides = __pyx_t_5;

    /* "View.MemoryView":194
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 */

#line 194 "View.MemoryView"
    goto __pyx_L6;

#line 194 "View.MemoryView"
  }

  /* "View.MemoryView":199
 *             info.strides = self._strides
 *         else:
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL
 */

#line 199 "View.MemoryView"
  /*else*/ {

#line 199 "View.MemoryView"
    __pyx_v_info->ndim = 1;

    /* "View.MemoryView":200
 *         else:
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL             # <<<<<<<<<<<<<<
 *             info.strides = NULL
 * 
 */

#line 200 "View.MemoryView"
    if (((__pyx_v_flags & PyBUF_ND) != 0)) {

#line 200 "View.MemoryView"
      __pyx_t_5 = (&__pyx_v_self->len);

#line 200 "View.MemoryView"
    } else {

#line 200 "View.MemoryView"
      __pyx_t_5 = NULL;

#line 200 "View.MemoryView"
    }

#line 200 "View.MemoryView"
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":201
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.suboffsets = NULL
 */

#line 201 "View.MemoryView"
    __pyx_v_info->strides = NULL;

#line 201 "View.MemoryView"
  }

#line 201 "View.MemoryView"
  __pyx_L6:;

  /* "View.MemoryView":203
 *             info.strides = NULL
 * 
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */

#line 203 "View.MemoryView"
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":204
 * 
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 */

#line 204 "View.MemoryView"
  __pyx_t_3 = __pyx_v_self->itemsize;

#line 204 "View.MemoryView"
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "View.MemoryView":205
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self
 */

#line 205 "View.MemoryView"
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":206
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */

#line 206 "View.MemoryView"
  if (((__pyx_v_flags & PyBUF_FORMAT) != 0)) {

#line 206 "View.MemoryView"
    __pyx_t_2 = __pyx_v_self->format;

#line 206 "View.MemoryView"
  } else {

#line 206 "View.MemoryView"
    __pyx_t_2 = NULL;

#line 206 "View.MemoryView"
  }

#line 206 "View.MemoryView"
  __pyx_v_info->format = __pyx_t_2;

  /* "View.MemoryView":207
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */

#line 207 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_self);

#line 207 "View.MemoryView"
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);

#line 207 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 207 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 207 "View.MemoryView"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":181
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 */

#line 181 "View.MemoryView"


#line 181 "View.MemoryView"
  /* function exit code */

#line 181 "View.MemoryView"
  __pyx_r = 0;

#line 181 "View.MemoryView"
  goto __pyx_L0;

#line 181 "View.MemoryView"
  __pyx_L1_error:;

#line 181 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 181 "View.MemoryView"
  __pyx_r = -1;

#line 181 "View.MemoryView"
  if (__pyx_v_info->obj != NULL) {

#line 181 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 181 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 181 "View.MemoryView"
  }

#line 181 "View.MemoryView"
  goto __pyx_L2;

#line 181 "View.MemoryView"
  __pyx_L0:;

#line 181 "View.MemoryView"
  if (__pyx_v_info->obj == Py_None) {

#line 181 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 181 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 181 "View.MemoryView"
  }

#line 181 "View.MemoryView"
  __pyx_L2:;

#line 181 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 181 "View.MemoryView"
  return __pyx_r;

#line 181 "View.MemoryView"
}

/* "View.MemoryView":209
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

#line 209 "View.MemoryView"


#line 209 "View.MemoryView"
/* Python wrapper */

#line 209 "View.MemoryView"
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 209 "View.MemoryView"
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {

#line 209 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 209 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 209 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 209 "View.MemoryView"
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

#line 209 "View.MemoryView"


#line 209 "View.MemoryView"
  /* function exit code */

#line 209 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 209 "View.MemoryView"
}

#line 209 "View.MemoryView"


#line 209 "View.MemoryView"
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {

#line 209 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 209 "View.MemoryView"
  int __pyx_t_1;

#line 209 "View.MemoryView"
  int __pyx_t_2;

#line 209 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 */

#line 210 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->callback_free_data != NULL);

#line 210 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":211
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 */

#line 211 "View.MemoryView"
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 */

#line 210 "View.MemoryView"
    goto __pyx_L3;

#line 210 "View.MemoryView"
  }

  /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 */

#line 212 "View.MemoryView"
  if (__pyx_v_self->free_data) {

#line 212 "View.MemoryView"
  } else {

#line 212 "View.MemoryView"
    __pyx_t_1 = __pyx_v_self->free_data;

#line 212 "View.MemoryView"
    goto __pyx_L4_bool_binop_done;

#line 212 "View.MemoryView"
  }

#line 212 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_self->data != NULL);

#line 212 "View.MemoryView"
  __pyx_t_1 = __pyx_t_2;

#line 212 "View.MemoryView"
  __pyx_L4_bool_binop_done:;

#line 212 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 */

#line 213 "View.MemoryView"
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":214
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)             # <<<<<<<<<<<<<<
 *             free(self.data)
 *         PyObject_Free(self._shape)
 */

#line 214 "View.MemoryView"
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 */

#line 213 "View.MemoryView"
    }

    /* "View.MemoryView":215
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */

#line 215 "View.MemoryView"
    free(__pyx_v_self->data);

    /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 */

#line 212 "View.MemoryView"
  }

#line 212 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":216
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 216 "View.MemoryView"
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

#line 209 "View.MemoryView"


#line 209 "View.MemoryView"
  /* function exit code */

#line 209 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 209 "View.MemoryView"
}

/* "View.MemoryView":218
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
 */

#line 218 "View.MemoryView"


#line 218 "View.MemoryView"
/* Python wrapper */

#line 218 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 218 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {

#line 218 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 218 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 218 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 218 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 218 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

#line 218 "View.MemoryView"


#line 218 "View.MemoryView"
  /* function exit code */

#line 218 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 218 "View.MemoryView"
  return __pyx_r;

#line 218 "View.MemoryView"
}

#line 218 "View.MemoryView"


#line 218 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {

#line 218 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 218 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 218 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 218 "View.MemoryView"
  int __pyx_lineno = 0;

#line 218 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 218 "View.MemoryView"
  int __pyx_clineno = 0;

#line 218 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":220
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */

#line 220 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 220 "View.MemoryView"
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 220, __pyx_L1_error)

#line 220 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 220 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 220 "View.MemoryView"
  __pyx_t_1 = 0;

#line 220 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":218
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
 */

#line 218 "View.MemoryView"


#line 218 "View.MemoryView"
  /* function exit code */

#line 218 "View.MemoryView"
  __pyx_L1_error:;

#line 218 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 218 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 218 "View.MemoryView"
  __pyx_r = NULL;

#line 218 "View.MemoryView"
  __pyx_L0:;

#line 218 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 218 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 218 "View.MemoryView"
  return __pyx_r;

#line 218 "View.MemoryView"
}

/* "View.MemoryView":223
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

#line 223 "View.MemoryView"


#line 223 "View.MemoryView"
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags
#line 223 "View.MemoryView"
;

#line 223 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 223 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 223 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 223 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 223 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 223 "View.MemoryView"
  int __pyx_lineno = 0;

#line 223 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 223 "View.MemoryView"
  int __pyx_clineno = 0;

#line 223 "View.MemoryView"
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":224
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */

#line 224 "View.MemoryView"
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":225
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

#line 225 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 225 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 225, __pyx_L1_error)

#line 225 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 225 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 225, __pyx_L1_error)

#line 225 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 225 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 225, __pyx_L1_error)

#line 225 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 225 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_self);

#line 225 "View.MemoryView"
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);

#line 225 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));

#line 225 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 225 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 225 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 225 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);

#line 225 "View.MemoryView"
  __pyx_t_1 = 0;

#line 225 "View.MemoryView"
  __pyx_t_2 = 0;

#line 225 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 225, __pyx_L1_error)

#line 225 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 225 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 225 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 225 "View.MemoryView"
  __pyx_t_2 = 0;

#line 225 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

#line 223 "View.MemoryView"


#line 223 "View.MemoryView"
  /* function exit code */

#line 223 "View.MemoryView"
  __pyx_L1_error:;

#line 223 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 223 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 223 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 223 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 223 "View.MemoryView"
  __pyx_r = 0;

#line 223 "View.MemoryView"
  __pyx_L0:;

#line 223 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 223 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 223 "View.MemoryView"
  return __pyx_r;

#line 223 "View.MemoryView"
}

/* "View.MemoryView":227
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

#line 227 "View.MemoryView"


#line 227 "View.MemoryView"
/* Python wrapper */

#line 227 "View.MemoryView"
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/

#line 227 "View.MemoryView"
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {

#line 227 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 227 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 227 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 227 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = 
#line 227 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

#line 227 "View.MemoryView"


#line 227 "View.MemoryView"
  /* function exit code */

#line 227 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 227 "View.MemoryView"
  return __pyx_r;

#line 227 "View.MemoryView"
}

#line 227 "View.MemoryView"


#line 227 "View.MemoryView"
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {

#line 227 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 227 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 227 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":228
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */

#line 228 "View.MemoryView"
  __pyx_r = (__pyx_v_self->_shape[0]);

#line 228 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":227
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

#line 227 "View.MemoryView"


#line 227 "View.MemoryView"
  /* function exit code */

#line 227 "View.MemoryView"
  __pyx_L0:;

#line 227 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 227 "View.MemoryView"
  return __pyx_r;

#line 227 "View.MemoryView"
}

/* "View.MemoryView":230
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
/* Python wrapper */

#line 230 "View.MemoryView"
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/

#line 230 "View.MemoryView"
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {

#line 230 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 230 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 230 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 230 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = 
#line 230 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
  /* function exit code */

#line 230 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 230 "View.MemoryView"
  return __pyx_r;

#line 230 "View.MemoryView"
}

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {

#line 230 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 230 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 230 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 230 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 230 "View.MemoryView"
  int __pyx_lineno = 0;

#line 230 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 230 "View.MemoryView"
  int __pyx_clineno = 0;

#line 230 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":231
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */

#line 231 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 231 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 231, __pyx_L1_error)

#line 231 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 231 "View.MemoryView"
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 231, __pyx_L1_error)

#line 231 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 231 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 231 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 231 "View.MemoryView"
  __pyx_t_2 = 0;

#line 231 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
  /* function exit code */

#line 230 "View.MemoryView"
  __pyx_L1_error:;

#line 230 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 230 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 230 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 230 "View.MemoryView"
  __pyx_r = NULL;

#line 230 "View.MemoryView"
  __pyx_L0:;

#line 230 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 230 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 230 "View.MemoryView"
  return __pyx_r;

#line 230 "View.MemoryView"
}

/* "View.MemoryView":233
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
/* Python wrapper */

#line 233 "View.MemoryView"
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/

#line 233 "View.MemoryView"
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {

#line 233 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 233 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 233 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 233 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = 
#line 233 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
  /* function exit code */

#line 233 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 233 "View.MemoryView"
  return __pyx_r;

#line 233 "View.MemoryView"
}

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {

#line 233 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 233 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 233 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 233 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 233 "View.MemoryView"
  int __pyx_lineno = 0;

#line 233 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 233 "View.MemoryView"
  int __pyx_clineno = 0;

#line 233 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */

#line 234 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 234 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 234 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 234 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 234 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 234 "View.MemoryView"
  __pyx_t_2 = 0;

#line 234 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
  /* function exit code */

#line 233 "View.MemoryView"
  __pyx_L1_error:;

#line 233 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 233 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 233 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 233 "View.MemoryView"
  __pyx_r = NULL;

#line 233 "View.MemoryView"
  __pyx_L0:;

#line 233 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 233 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 233 "View.MemoryView"
  return __pyx_r;

#line 233 "View.MemoryView"
}

/* "View.MemoryView":236
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
/* Python wrapper */

#line 236 "View.MemoryView"
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/

#line 236 "View.MemoryView"
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {

#line 236 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 236 "View.MemoryView"
  int __pyx_r;

#line 236 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 236 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = 
#line 236 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
  /* function exit code */

#line 236 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 236 "View.MemoryView"
  return __pyx_r;

#line 236 "View.MemoryView"
}

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {

#line 236 "View.MemoryView"
  int __pyx_r;

#line 236 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 236 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 236 "View.MemoryView"
  int __pyx_lineno = 0;

#line 236 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 236 "View.MemoryView"
  int __pyx_clineno = 0;

#line 236 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 237 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)

#line 237 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 237 "View.MemoryView"
  if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0))) __PYX_ERR(1, 237, __pyx_L1_error)

#line 237 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":236
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
  /* function exit code */

#line 236 "View.MemoryView"
  __pyx_r = 0;

#line 236 "View.MemoryView"
  goto __pyx_L0;

#line 236 "View.MemoryView"
  __pyx_L1_error:;

#line 236 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 236 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 236 "View.MemoryView"
  __pyx_r = -1;

#line 236 "View.MemoryView"
  __pyx_L0:;

#line 236 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 236 "View.MemoryView"
  return __pyx_r;

#line 236 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 1 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 1 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
  #endif

#line 1 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);

#line 1 "(tree fragment)"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;
#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0
#line 3 "(tree fragment)"
;

#line 3 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 3 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 3 "(tree fragment)"
  #endif

#line 3 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);

#line 3 "(tree fragment)"
  {

#line 3 "(tree fragment)"
    #if CYTHON_USE_MODULE_STATE

#line 3 "(tree fragment)"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #else

#line 3 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #endif

#line 3 "(tree fragment)"
    PyObject* values[1] = {0};

#line 3 "(tree fragment)"
    if (__pyx_kwds) {

#line 3 "(tree fragment)"
      Py_ssize_t kw_args;

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {
        case  1: 
#line 3 "(tree fragment)"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 3 "(tree fragment)"
break;
        default: 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {

#line 3 "(tree fragment)"
        case  0:

#line 3 "(tree fragment)"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 3 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 3 "(tree fragment)"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 3 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
    } else if (unlikely(__pyx_nargs != 1)) {

#line 3 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
    } else {

#line 3 "(tree fragment)"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
    }

#line 3 "(tree fragment)"
    __pyx_v___pyx_state = values[0];

#line 3 "(tree fragment)"
  }

#line 3 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 3 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); 
#line 3 "(tree fragment)"
__PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
  __pyx_L3_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return NULL;

#line 3 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v___pyx_state);

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":247
 * 
 * @cname("__pyx_array_allocate_buffer")
 * cdef int _allocate_buffer(array self) except -1:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 247 "View.MemoryView"


#line 247 "View.MemoryView"
static int __pyx_array_allocate_buffer(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_i
#line 247 "View.MemoryView"
;
  PyObject **__pyx_v_p
#line 247 "View.MemoryView"
;

#line 247 "View.MemoryView"
  int __pyx_r;

#line 247 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 247 "View.MemoryView"
  int __pyx_t_1;

#line 247 "View.MemoryView"
  Py_ssize_t __pyx_t_2;

#line 247 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 247 "View.MemoryView"
  Py_ssize_t __pyx_t_4;

#line 247 "View.MemoryView"
  int __pyx_lineno = 0;

#line 247 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 247 "View.MemoryView"
  int __pyx_clineno = 0;

#line 247 "View.MemoryView"
  __Pyx_RefNannySetupContext("_allocate_buffer", 0);

  /* "View.MemoryView":253
 *     cdef PyObject **p
 * 
 *     self.free_data = True             # <<<<<<<<<<<<<<
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 */

#line 253 "View.MemoryView"
  __pyx_v_self->free_data = 1;

  /* "View.MemoryView":254
 * 
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."
 */

#line 254 "View.MemoryView"
  __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

  /* "View.MemoryView":255
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
 */

#line 255 "View.MemoryView"
  __pyx_t_1 = (!(__pyx_v_self->data != 0));

#line 255 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":256
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."             # <<<<<<<<<<<<<<
 * 
 *     if self.dtype_is_object:
 */

#line 256 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_kp_s_unable_to_allocate_array_data, 0, 0);

#line 256 "View.MemoryView"
    __PYX_ERR(1, 256, __pyx_L1_error)

    /* "View.MemoryView":255
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
 */

#line 255 "View.MemoryView"
  }

  /* "View.MemoryView":258
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 */

#line 258 "View.MemoryView"
  if (__pyx_v_self->dtype_is_object) {

    /* "View.MemoryView":259
 * 
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 */

#line 259 "View.MemoryView"
    __pyx_v_p = ((PyObject **)__pyx_v_self->data);

    /* "View.MemoryView":260
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):             # <<<<<<<<<<<<<<
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 */

#line 260 "View.MemoryView"
    if (unlikely(__pyx_v_self->itemsize == 0)) {

#line 260 "View.MemoryView"
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");

#line 260 "View.MemoryView"
      __PYX_ERR(1, 260, __pyx_L1_error)

#line 260 "View.MemoryView"
    }

#line 260 "View.MemoryView"
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_self->itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {

#line 260 "View.MemoryView"
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");

#line 260 "View.MemoryView"
      __PYX_ERR(1, 260, __pyx_L1_error)

#line 260 "View.MemoryView"
    }

#line 260 "View.MemoryView"
    __pyx_t_2 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_self->itemsize);

#line 260 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 260 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 260 "View.MemoryView"
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":261
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None             # <<<<<<<<<<<<<<
 *             Py_INCREF(Py_None)
 *     return 0
 */

#line 261 "View.MemoryView"
      (__pyx_v_p[__pyx_v_i]) = Py_None;

      /* "View.MemoryView":262
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

#line 262 "View.MemoryView"
      Py_INCREF(Py_None);

#line 262 "View.MemoryView"
    }

    /* "View.MemoryView":258
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 */

#line 258 "View.MemoryView"
  }

  /* "View.MemoryView":263
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 263 "View.MemoryView"
  __pyx_r = 0;

#line 263 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":247
 * 
 * @cname("__pyx_array_allocate_buffer")
 * cdef int _allocate_buffer(array self) except -1:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 247 "View.MemoryView"


#line 247 "View.MemoryView"
  /* function exit code */

#line 247 "View.MemoryView"
  __pyx_L1_error:;

#line 247 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._allocate_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 247 "View.MemoryView"
  __pyx_r = -1;

#line 247 "View.MemoryView"
  __pyx_L0:;

#line 247 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 247 "View.MemoryView"
  return __pyx_r;

#line 247 "View.MemoryView"
}

/* "View.MemoryView":267
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):             # <<<<<<<<<<<<<<
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 */

#line 267 "View.MemoryView"


#line 267 "View.MemoryView"
static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_c_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0
#line 267 "View.MemoryView"
;
  PyObject *__pyx_v_mode = 0
#line 267 "View.MemoryView"
;

#line 267 "View.MemoryView"
  struct __pyx_array_obj *__pyx_r = NULL;

#line 267 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 267 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 267 "View.MemoryView"
  int __pyx_t_2;

#line 267 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 267 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 267 "View.MemoryView"
  int __pyx_lineno = 0;

#line 267 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 267 "View.MemoryView"
  int __pyx_clineno = 0;

#line 267 "View.MemoryView"
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":269
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.             # <<<<<<<<<<<<<<
 * 
 *     if buf is NULL:
 */

#line 269 "View.MemoryView"
  if (((__pyx_v_c_mode[0]) == 'f')) {

#line 269 "View.MemoryView"
    __Pyx_INCREF(__pyx_n_s_fortran);

#line 269 "View.MemoryView"
    __pyx_t_1 = __pyx_n_s_fortran;

#line 269 "View.MemoryView"
  } else {

#line 269 "View.MemoryView"
    __Pyx_INCREF(__pyx_n_s_c);

#line 269 "View.MemoryView"
    __pyx_t_1 = __pyx_n_s_c;

#line 269 "View.MemoryView"
  }

#line 269 "View.MemoryView"
  __pyx_v_mode = ((PyObject*)__pyx_t_1);

#line 269 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":271
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 */

#line 271 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_buf == NULL);

#line 271 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":272
 * 
 *     if buf is NULL:
 *         result = array.__new__(array, shape, itemsize, format, mode)             # <<<<<<<<<<<<<<
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 */

#line 272 "View.MemoryView"
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 272, __pyx_L1_error)

#line 272 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 272 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 272, __pyx_L1_error)

#line 272 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 272 "View.MemoryView"
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 272, __pyx_L1_error)

#line 272 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 272 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_shape);

#line 272 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_shape);

#line 272 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_shape);

#line 272 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_1);

#line 272 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);

#line 272 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_3);

#line 272 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);

#line 272 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_mode);

#line 272 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_mode);

#line 272 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_mode);

#line 272 "View.MemoryView"
    __pyx_t_1 = 0;

#line 272 "View.MemoryView"
    __pyx_t_3 = 0;

#line 272 "View.MemoryView"
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_array_type), __pyx_t_4, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 272, __pyx_L1_error)

#line 272 "View.MemoryView"
    __Pyx_GOTREF((PyObject *)__pyx_t_3);

#line 272 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 272 "View.MemoryView"
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);

#line 272 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":271
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 */

#line 271 "View.MemoryView"
    goto __pyx_L3;

#line 271 "View.MemoryView"
  }

  /* "View.MemoryView":274
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */

#line 274 "View.MemoryView"
  /*else*/ {

#line 274 "View.MemoryView"
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 274, __pyx_L1_error)

#line 274 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 274 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 274, __pyx_L1_error)

#line 274 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 274 "View.MemoryView"
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 274, __pyx_L1_error)

#line 274 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 274 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_shape);

#line 274 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_shape);

#line 274 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_shape);

#line 274 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_3);

#line 274 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);

#line 274 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_4);

#line 274 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);

#line 274 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_mode);

#line 274 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_mode);

#line 274 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_mode);

#line 274 "View.MemoryView"
    __pyx_t_3 = 0;

#line 274 "View.MemoryView"
    __pyx_t_4 = 0;

#line 274 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 274, __pyx_L1_error)

#line 274 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 274 "View.MemoryView"
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 274, __pyx_L1_error)

#line 274 "View.MemoryView"
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_array_type), __pyx_t_1, __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 274, __pyx_L1_error)

#line 274 "View.MemoryView"
    __Pyx_GOTREF((PyObject *)__pyx_t_3);

#line 274 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 274 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 274 "View.MemoryView"
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);

#line 274 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":275
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */

#line 275 "View.MemoryView"
    __pyx_v_result->data = __pyx_v_buf;

#line 275 "View.MemoryView"
  }

#line 275 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":277
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 277 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 277 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_result);

#line 277 "View.MemoryView"
  __pyx_r = __pyx_v_result;

#line 277 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":267
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):             # <<<<<<<<<<<<<<
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 */

#line 267 "View.MemoryView"


#line 267 "View.MemoryView"
  /* function exit code */

#line 267 "View.MemoryView"
  __pyx_L1_error:;

#line 267 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 267 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 267 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 267 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 267 "View.MemoryView"
  __pyx_r = 0;

#line 267 "View.MemoryView"
  __pyx_L0:;

#line 267 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 267 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_mode);

#line 267 "View.MemoryView"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 267 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 267 "View.MemoryView"
  return __pyx_r;

#line 267 "View.MemoryView"
}

/* "View.MemoryView":303
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

#line 303 "View.MemoryView"


#line 303 "View.MemoryView"
/* Python wrapper */

#line 303 "View.MemoryView"
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 303 "View.MemoryView"
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0
#line 303 "View.MemoryView"
;

#line 303 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 303 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 303 "View.MemoryView"
  int __pyx_lineno = 0;

#line 303 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 303 "View.MemoryView"
  int __pyx_clineno = 0;

#line 303 "View.MemoryView"
  int __pyx_r;

#line 303 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 303 "View.MemoryView"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 303 "View.MemoryView"
  {

#line 303 "View.MemoryView"
    #if CYTHON_USE_MODULE_STATE

#line 303 "View.MemoryView"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};

#line 303 "View.MemoryView"
    #else

#line 303 "View.MemoryView"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};

#line 303 "View.MemoryView"
    #endif

#line 303 "View.MemoryView"
    PyObject* values[1] = {0};

#line 303 "View.MemoryView"
    if (__pyx_kwds) {

#line 303 "View.MemoryView"
      Py_ssize_t kw_args;

#line 303 "View.MemoryView"
      switch (__pyx_nargs) {
        case  1: 
#line 303 "View.MemoryView"
values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);

#line 303 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 303 "View.MemoryView"
break;
        default: 
#line 303 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 303 "View.MemoryView"
      }

#line 303 "View.MemoryView"
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);

#line 303 "View.MemoryView"
      switch (__pyx_nargs) {

#line 303 "View.MemoryView"
        case  0:

#line 303 "View.MemoryView"
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) kw_args--;

#line 303 "View.MemoryView"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 303, __pyx_L3_error)
        else 
#line 303 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 303 "View.MemoryView"
      }

#line 303 "View.MemoryView"
      if (unlikely(kw_args > 0)) {

#line 303 "View.MemoryView"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 303 "View.MemoryView"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 303, __pyx_L3_error)

#line 303 "View.MemoryView"
      }

#line 303 "View.MemoryView"
    } else if (unlikely(__pyx_nargs != 1)) {

#line 303 "View.MemoryView"
      goto __pyx_L5_argtuple_error;

#line 303 "View.MemoryView"
    } else {

#line 303 "View.MemoryView"
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);

#line 303 "View.MemoryView"
    }

#line 303 "View.MemoryView"
    __pyx_v_name = values[0];

#line 303 "View.MemoryView"
  }

#line 303 "View.MemoryView"
  goto __pyx_L4_argument_unpacking_done;

#line 303 "View.MemoryView"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); 
#line 303 "View.MemoryView"
__PYX_ERR(1, 303, __pyx_L3_error)

#line 303 "View.MemoryView"
  __pyx_L3_error:;

#line 303 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 303 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 303 "View.MemoryView"
  return -1;

#line 303 "View.MemoryView"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 303 "View.MemoryView"
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

#line 303 "View.MemoryView"


#line 303 "View.MemoryView"
  /* function exit code */

#line 303 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 303 "View.MemoryView"
  return __pyx_r;

#line 303 "View.MemoryView"
}

#line 303 "View.MemoryView"


#line 303 "View.MemoryView"
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {

#line 303 "View.MemoryView"
  int __pyx_r;

#line 303 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 303 "View.MemoryView"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":304
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */

#line 304 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_name);

#line 304 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_name);

#line 304 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_self->name);

#line 304 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_self->name);

#line 304 "View.MemoryView"
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":303
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

#line 303 "View.MemoryView"


#line 303 "View.MemoryView"
  /* function exit code */

#line 303 "View.MemoryView"
  __pyx_r = 0;

#line 303 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 303 "View.MemoryView"
  return __pyx_r;

#line 303 "View.MemoryView"
}

/* "View.MemoryView":305
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

#line 305 "View.MemoryView"


#line 305 "View.MemoryView"
/* Python wrapper */

#line 305 "View.MemoryView"
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/

#line 305 "View.MemoryView"
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {

#line 305 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 305 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 305 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 305 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = 
#line 305 "View.MemoryView"
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

#line 305 "View.MemoryView"


#line 305 "View.MemoryView"
  /* function exit code */

#line 305 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 305 "View.MemoryView"
  return __pyx_r;

#line 305 "View.MemoryView"
}

#line 305 "View.MemoryView"


#line 305 "View.MemoryView"
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {

#line 305 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 305 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 305 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":306
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */

#line 306 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 306 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->name);

#line 306 "View.MemoryView"
  __pyx_r = __pyx_v_self->name;

#line 306 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":305
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

#line 305 "View.MemoryView"


#line 305 "View.MemoryView"
  /* function exit code */

#line 305 "View.MemoryView"
  __pyx_L0:;

#line 305 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 305 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 305 "View.MemoryView"
  return __pyx_r;

#line 305 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 1 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 1 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
  #endif

#line 1 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);

#line 1 "(tree fragment)"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;
#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0
#line 1 "(tree fragment)"
;
  PyObject *__pyx_v__dict = 0
#line 1 "(tree fragment)"
;
  int __pyx_v_use_setstate
#line 1 "(tree fragment)"
;

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_t_2;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_3 = NULL;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_4 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */

#line 5 "(tree fragment)"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 5 "(tree fragment)"
  __Pyx_INCREF(__pyx_v_self->name);

#line 5 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_v_self->name);

#line 5 "(tree fragment)"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);

#line 5 "(tree fragment)"
  __pyx_v_state = ((PyObject*)__pyx_t_1);

#line 5 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */

#line 6 "(tree fragment)"
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 6 "(tree fragment)"
  __pyx_v__dict = __pyx_t_1;

#line 6 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */

#line 7 "(tree fragment)"
  __pyx_t_2 = (__pyx_v__dict != Py_None);

#line 7 "(tree fragment)"
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */

#line 8 "(tree fragment)"
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 8 "(tree fragment)"
    __Pyx_INCREF(__pyx_v__dict);

#line 8 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_v__dict);

#line 8 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);

#line 8 "(tree fragment)"
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 8 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "(tree fragment)"
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));

#line 8 "(tree fragment)"
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */

#line 9 "(tree fragment)"
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */

#line 7 "(tree fragment)"
    goto __pyx_L3;

#line 7 "(tree fragment)"
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 */

#line 11 "(tree fragment)"
  /*else*/ {

#line 11 "(tree fragment)"
    __pyx_t_2 = (__pyx_v_self->name != Py_None);

#line 11 "(tree fragment)"
    __pyx_v_use_setstate = __pyx_t_2;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 */

#line 12 "(tree fragment)"
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 */

#line 13 "(tree fragment)"
    __Pyx_XDECREF(__pyx_r);

#line 13 "(tree fragment)"
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 13 "(tree fragment)"
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 13 "(tree fragment)"
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 13 "(tree fragment)"
    __Pyx_INCREF(__pyx_int_136983863);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_int_136983863);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_136983863);

#line 13 "(tree fragment)"
    __Pyx_INCREF(Py_None);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(Py_None);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);

#line 13 "(tree fragment)"
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_4);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_3);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_1);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);

#line 13 "(tree fragment)"
    __Pyx_INCREF(__pyx_v_state);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_v_state);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);

#line 13 "(tree fragment)"
    __pyx_t_3 = 0;

#line 13 "(tree fragment)"
    __pyx_t_1 = 0;

#line 13 "(tree fragment)"
    __pyx_r = __pyx_t_4;

#line 13 "(tree fragment)"
    __pyx_t_4 = 0;

#line 13 "(tree fragment)"
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 */

#line 12 "(tree fragment)"
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

#line 15 "(tree fragment)"
  /*else*/ {

#line 15 "(tree fragment)"
    __Pyx_XDECREF(__pyx_r);

#line 15 "(tree fragment)"
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_4);

#line 15 "(tree fragment)"
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 15 "(tree fragment)"
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 15 "(tree fragment)"
    __Pyx_INCREF(__pyx_int_136983863);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_int_136983863);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_136983863);

#line 15 "(tree fragment)"
    __Pyx_INCREF(__pyx_v_state);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_v_state);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);

#line 15 "(tree fragment)"
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_4);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_1);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 15 "(tree fragment)"
    __pyx_t_4 = 0;

#line 15 "(tree fragment)"
    __pyx_t_1 = 0;

#line 15 "(tree fragment)"
    __pyx_r = __pyx_t_3;

#line 15 "(tree fragment)"
    __pyx_t_3 = 0;

#line 15 "(tree fragment)"
    goto __pyx_L0;

#line 15 "(tree fragment)"
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_3);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __pyx_L0:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v_state);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v__dict);

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
/* Python wrapper */

#line 16 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 16 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0
#line 16 "(tree fragment)"
;

#line 16 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 16 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 16 "(tree fragment)"
  #endif

#line 16 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 16 "(tree fragment)"
  int __pyx_lineno = 0;

#line 16 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 16 "(tree fragment)"
  int __pyx_clineno = 0;

#line 16 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 16 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 16 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);

#line 16 "(tree fragment)"
  {

#line 16 "(tree fragment)"
    #if CYTHON_USE_MODULE_STATE

#line 16 "(tree fragment)"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 16 "(tree fragment)"
    #else

#line 16 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 16 "(tree fragment)"
    #endif

#line 16 "(tree fragment)"
    PyObject* values[1] = {0};

#line 16 "(tree fragment)"
    if (__pyx_kwds) {

#line 16 "(tree fragment)"
      Py_ssize_t kw_args;

#line 16 "(tree fragment)"
      switch (__pyx_nargs) {
        case  1: 
#line 16 "(tree fragment)"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 16 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 16 "(tree fragment)"
break;
        default: 
#line 16 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 16 "(tree fragment)"
      }

#line 16 "(tree fragment)"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 16 "(tree fragment)"
      switch (__pyx_nargs) {

#line 16 "(tree fragment)"
        case  0:

#line 16 "(tree fragment)"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 16 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else 
#line 16 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 16 "(tree fragment)"
      }

#line 16 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 16 "(tree fragment)"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 16 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)

#line 16 "(tree fragment)"
      }

#line 16 "(tree fragment)"
    } else if (unlikely(__pyx_nargs != 1)) {

#line 16 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 16 "(tree fragment)"
    } else {

#line 16 "(tree fragment)"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 16 "(tree fragment)"
    }

#line 16 "(tree fragment)"
    __pyx_v___pyx_state = values[0];

#line 16 "(tree fragment)"
  }

#line 16 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 16 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); 
#line 16 "(tree fragment)"
__PYX_ERR(1, 16, __pyx_L3_error)

#line 16 "(tree fragment)"
  __pyx_L3_error:;

#line 16 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 16 "(tree fragment)"
  return NULL;

#line 16 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 16 "(tree fragment)"
__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v___pyx_state);

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
  /* function exit code */

#line 16 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 16 "(tree fragment)"
  return __pyx_r;

#line 16 "(tree fragment)"
}

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 16 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 16 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 16 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 16 "(tree fragment)"
  int __pyx_lineno = 0;

#line 16 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 16 "(tree fragment)"
  int __pyx_clineno = 0;

#line 16 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */

#line 17 "(tree fragment)"
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "(tree fragment)"
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 17 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
  /* function exit code */

#line 16 "(tree fragment)"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 16 "(tree fragment)"
  goto __pyx_L0;

#line 16 "(tree fragment)"
  __pyx_L1_error:;

#line 16 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 16 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "(tree fragment)"
  __pyx_r = NULL;

#line 16 "(tree fragment)"
  __pyx_L0:;

#line 16 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 16 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 16 "(tree fragment)"
  return __pyx_r;

#line 16 "(tree fragment)"
}

/* "View.MemoryView":320
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

#line 320 "View.MemoryView"


#line 320 "View.MemoryView"
static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p
#line 320 "View.MemoryView"
;
  size_t __pyx_v_offset
#line 320 "View.MemoryView"
;

#line 320 "View.MemoryView"
  void *__pyx_r;

#line 320 "View.MemoryView"
  int __pyx_t_1;

  /* "View.MemoryView":322
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */

#line 322 "View.MemoryView"
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":326
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */

#line 326 "View.MemoryView"
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":328
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */

#line 328 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_offset > 0);

#line 328 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":329
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */

#line 329 "View.MemoryView"
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":328
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */

#line 328 "View.MemoryView"
  }

  /* "View.MemoryView":331
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 331 "View.MemoryView"
  __pyx_r = ((void *)__pyx_v_aligned_p);

#line 331 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":320
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

#line 320 "View.MemoryView"


#line 320 "View.MemoryView"
  /* function exit code */

#line 320 "View.MemoryView"
  __pyx_L0:;

#line 320 "View.MemoryView"
  return __pyx_r;

#line 320 "View.MemoryView"
}

/* "View.MemoryView":366
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

#line 366 "View.MemoryView"


#line 366 "View.MemoryView"
/* Python wrapper */

#line 366 "View.MemoryView"
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 366 "View.MemoryView"
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0
#line 366 "View.MemoryView"
;
  int __pyx_v_flags
#line 366 "View.MemoryView"
;
  int __pyx_v_dtype_is_object
#line 366 "View.MemoryView"
;

#line 366 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 366 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 366 "View.MemoryView"
  int __pyx_lineno = 0;

#line 366 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 366 "View.MemoryView"
  int __pyx_clineno = 0;

#line 366 "View.MemoryView"
  int __pyx_r;

#line 366 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 366 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 366 "View.MemoryView"
  {

#line 366 "View.MemoryView"
    #if CYTHON_USE_MODULE_STATE

#line 366 "View.MemoryView"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};

#line 366 "View.MemoryView"
    #else

#line 366 "View.MemoryView"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};

#line 366 "View.MemoryView"
    #endif

#line 366 "View.MemoryView"
    PyObject* values[3] = {0,0,0};

#line 366 "View.MemoryView"
    if (__pyx_kwds) {

#line 366 "View.MemoryView"
      Py_ssize_t kw_args;

#line 366 "View.MemoryView"
      switch (__pyx_nargs) {
        case  3: 
#line 366 "View.MemoryView"
values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);

#line 366 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 366 "View.MemoryView"
values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);

#line 366 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 366 "View.MemoryView"
values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);

#line 366 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 366 "View.MemoryView"
break;
        default: 
#line 366 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 366 "View.MemoryView"
      }

#line 366 "View.MemoryView"
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);

#line 366 "View.MemoryView"
      switch (__pyx_nargs) {

#line 366 "View.MemoryView"
        case  0:

#line 366 "View.MemoryView"
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) kw_args--;

#line 366 "View.MemoryView"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L3_error)
        else 
#line 366 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 366 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 366 "View.MemoryView"
        case  1:

#line 366 "View.MemoryView"
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flags)) != 0)) kw_args--;

#line 366 "View.MemoryView"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); 
#line 366 "View.MemoryView"
__PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
        }

#line 366 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 366 "View.MemoryView"
        case  2:

#line 366 "View.MemoryView"
        if (kw_args > 0) {

#line 366 "View.MemoryView"
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype_is_object);

#line 366 "View.MemoryView"
          if (value) { values[2] = value; kw_args--; }

#line 366 "View.MemoryView"
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
        }

#line 366 "View.MemoryView"
      }

#line 366 "View.MemoryView"
      if (unlikely(kw_args > 0)) {

#line 366 "View.MemoryView"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 366 "View.MemoryView"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
      }

#line 366 "View.MemoryView"
    } else {

#line 366 "View.MemoryView"
      switch (__pyx_nargs) {
        case  3: 
#line 366 "View.MemoryView"
values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);

#line 366 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 366 "View.MemoryView"
values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);

#line 366 "View.MemoryView"
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);

#line 366 "View.MemoryView"
        break;
        default: 
#line 366 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 366 "View.MemoryView"
      }

#line 366 "View.MemoryView"
    }

#line 366 "View.MemoryView"
    __pyx_v_obj = values[0];

#line 366 "View.MemoryView"
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
    if (values[2]) {

#line 366 "View.MemoryView"
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
    } else {

#line 366 "View.MemoryView"
      __pyx_v_dtype_is_object = ((int)0);

#line 366 "View.MemoryView"
    }

#line 366 "View.MemoryView"
  }

#line 366 "View.MemoryView"
  goto __pyx_L4_argument_unpacking_done;

#line 366 "View.MemoryView"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); 
#line 366 "View.MemoryView"
__PYX_ERR(1, 366, __pyx_L3_error)

#line 366 "View.MemoryView"
  __pyx_L3_error:;

#line 366 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 366 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 366 "View.MemoryView"
  return -1;

#line 366 "View.MemoryView"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 366 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

#line 366 "View.MemoryView"


#line 366 "View.MemoryView"
  /* function exit code */

#line 366 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 366 "View.MemoryView"
  return __pyx_r;

#line 366 "View.MemoryView"
}

#line 366 "View.MemoryView"


#line 366 "View.MemoryView"
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {

#line 366 "View.MemoryView"
  int __pyx_r;

#line 366 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 366 "View.MemoryView"
  int __pyx_t_1;

#line 366 "View.MemoryView"
  int __pyx_t_2;

#line 366 "View.MemoryView"
  int __pyx_t_3;

#line 366 "View.MemoryView"
  int __pyx_lineno = 0;

#line 366 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 366 "View.MemoryView"
  int __pyx_clineno = 0;

#line 366 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":367
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */

#line 367 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_obj);

#line 367 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_obj);

#line 367 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_self->obj);

#line 367 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_self->obj);

#line 367 "View.MemoryView"
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":368
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */

#line 368 "View.MemoryView"
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":369
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */

#line 369 "View.MemoryView"
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));

#line 369 "View.MemoryView"
  if (!__pyx_t_2) {

#line 369 "View.MemoryView"
  } else {

#line 369 "View.MemoryView"
    __pyx_t_1 = __pyx_t_2;

#line 369 "View.MemoryView"
    goto __pyx_L4_bool_binop_done;

#line 369 "View.MemoryView"
  }

#line 369 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_obj != Py_None);

#line 369 "View.MemoryView"
  __pyx_t_1 = __pyx_t_2;

#line 369 "View.MemoryView"
  __pyx_L4_bool_binop_done:;

#line 369 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":370
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */

#line 370 "View.MemoryView"
    __pyx_t_3 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 370, __pyx_L1_error)

    /* "View.MemoryView":371
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */

#line 371 "View.MemoryView"
    __pyx_t_1 = (((PyObject *)__pyx_v_self->view.obj) == NULL);

#line 371 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":372
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */

#line 372 "View.MemoryView"
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":373
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */

#line 373 "View.MemoryView"
      Py_INCREF(Py_None);

      /* "View.MemoryView":371
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */

#line 371 "View.MemoryView"
    }

    /* "View.MemoryView":369
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */

#line 369 "View.MemoryView"
  }

  /* "View.MemoryView":375
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 */

#line 375 "View.MemoryView"
  __pyx_t_1 = (!__PYX_CYTHON_ATOMICS_ENABLED());

#line 375 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":377
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */

#line 377 "View.MemoryView"
    __pyx_t_1 = (__pyx_memoryview_thread_locks_used < 8);

#line 377 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":378
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */

#line 378 "View.MemoryView"
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":379
 *             if __pyx_memoryview_thread_locks_used < 8:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */

#line 379 "View.MemoryView"
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":377
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */

#line 377 "View.MemoryView"
    }

    /* "View.MemoryView":380
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */

#line 380 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_self->lock == NULL);

#line 380 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":381
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */

#line 381 "View.MemoryView"
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":382
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */

#line 382 "View.MemoryView"
      __pyx_t_1 = (__pyx_v_self->lock == NULL);

#line 382 "View.MemoryView"
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":383
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */

#line 383 "View.MemoryView"
        PyErr_NoMemory(); __PYX_ERR(1, 383, __pyx_L1_error)

        /* "View.MemoryView":382
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */

#line 382 "View.MemoryView"
      }

      /* "View.MemoryView":380
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */

#line 380 "View.MemoryView"
    }

    /* "View.MemoryView":375
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 */

#line 375 "View.MemoryView"
  }

  /* "View.MemoryView":385
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */

#line 385 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);

#line 385 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":386
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */

#line 386 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_self->view.format[0]) == 'O');

#line 386 "View.MemoryView"
    if (__pyx_t_2) {

#line 386 "View.MemoryView"
    } else {

#line 386 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 386 "View.MemoryView"
      goto __pyx_L12_bool_binop_done;

#line 386 "View.MemoryView"
    }

#line 386 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_self->view.format[1]) == '\x00');

#line 386 "View.MemoryView"
    __pyx_t_1 = __pyx_t_2;

#line 386 "View.MemoryView"
    __pyx_L12_bool_binop_done:;

#line 386 "View.MemoryView"
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":385
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */

#line 385 "View.MemoryView"
    goto __pyx_L11;

#line 385 "View.MemoryView"
  }

  /* "View.MemoryView":388
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */

#line 388 "View.MemoryView"
  /*else*/ {

#line 388 "View.MemoryView"
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;

#line 388 "View.MemoryView"
  }

#line 388 "View.MemoryView"
  __pyx_L11:;

  /* "View.MemoryView":390
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */

#line 390 "View.MemoryView"
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":392
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */

#line 392 "View.MemoryView"
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":366
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

#line 366 "View.MemoryView"


#line 366 "View.MemoryView"
  /* function exit code */

#line 366 "View.MemoryView"
  __pyx_r = 0;

#line 366 "View.MemoryView"
  goto __pyx_L0;

#line 366 "View.MemoryView"
  __pyx_L1_error:;

#line 366 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 366 "View.MemoryView"
  __pyx_r = -1;

#line 366 "View.MemoryView"
  __pyx_L0:;

#line 366 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 366 "View.MemoryView"
  return __pyx_r;

#line 366 "View.MemoryView"
}

/* "View.MemoryView":394
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

#line 394 "View.MemoryView"


#line 394 "View.MemoryView"
/* Python wrapper */

#line 394 "View.MemoryView"
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 394 "View.MemoryView"
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {

#line 394 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 394 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 394 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 394 "View.MemoryView"
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 394 "View.MemoryView"


#line 394 "View.MemoryView"
  /* function exit code */

#line 394 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 394 "View.MemoryView"
}

#line 394 "View.MemoryView"


#line 394 "View.MemoryView"
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i
#line 394 "View.MemoryView"
;

#line 394 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 394 "View.MemoryView"
  int __pyx_t_1;

#line 394 "View.MemoryView"
  int __pyx_t_2;

#line 394 "View.MemoryView"
  int __pyx_t_3;

#line 394 "View.MemoryView"
  int __pyx_t_4;

#line 394 "View.MemoryView"
  PyThread_type_lock __pyx_t_5;

#line 394 "View.MemoryView"
  PyThread_type_lock __pyx_t_6;

#line 394 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":395
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */

#line 395 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);

#line 395 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":396
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */

#line 396 "View.MemoryView"
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":395
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */

#line 395 "View.MemoryView"
    goto __pyx_L3;

#line 395 "View.MemoryView"
  }

  /* "View.MemoryView":397
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */

#line 397 "View.MemoryView"
  __pyx_t_1 = (((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None);

#line 397 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":399
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */

#line 399 "View.MemoryView"
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":400
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */

#line 400 "View.MemoryView"
    Py_DECREF(Py_None);

    /* "View.MemoryView":397
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */

#line 397 "View.MemoryView"
  }

#line 397 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":404
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */

#line 404 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->lock != NULL);

#line 404 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":405
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */

#line 405 "View.MemoryView"
    __pyx_t_2 = __pyx_memoryview_thread_locks_used;

#line 405 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 405 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 405 "View.MemoryView"
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":406
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */

#line 406 "View.MemoryView"
      __pyx_t_1 = ((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock);

#line 406 "View.MemoryView"
      if (__pyx_t_1) {

        /* "View.MemoryView":407
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */

#line 407 "View.MemoryView"
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":408
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */

#line 408 "View.MemoryView"
        __pyx_t_1 = (__pyx_v_i != __pyx_memoryview_thread_locks_used);

#line 408 "View.MemoryView"
        if (__pyx_t_1) {

          /* "View.MemoryView":410
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */

#line 410 "View.MemoryView"
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

#line 410 "View.MemoryView"
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":409
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */

#line 409 "View.MemoryView"
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;

#line 409 "View.MemoryView"
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":408
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */

#line 408 "View.MemoryView"
        }

        /* "View.MemoryView":411
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */

#line 411 "View.MemoryView"
        goto __pyx_L6_break;

        /* "View.MemoryView":406
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */

#line 406 "View.MemoryView"
      }

#line 406 "View.MemoryView"
    }

#line 406 "View.MemoryView"
    /*else*/ {

      /* "View.MemoryView":413
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */

#line 413 "View.MemoryView"
      PyThread_free_lock(__pyx_v_self->lock);

#line 413 "View.MemoryView"
    }

#line 413 "View.MemoryView"
    __pyx_L6_break:;

    /* "View.MemoryView":404
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */

#line 404 "View.MemoryView"
  }

  /* "View.MemoryView":394
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

#line 394 "View.MemoryView"


#line 394 "View.MemoryView"
  /* function exit code */

#line 394 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 394 "View.MemoryView"
}

/* "View.MemoryView":415
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

#line 415 "View.MemoryView"


#line 415 "View.MemoryView"
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim
#line 415 "View.MemoryView"
;
  char *__pyx_v_itemp
#line 415 "View.MemoryView"
;
  PyObject *__pyx_v_idx = NULL
#line 415 "View.MemoryView"
;

#line 415 "View.MemoryView"
  char *__pyx_r;

#line 415 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 415 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 415 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 415 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 415 "View.MemoryView"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 415 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 415 "View.MemoryView"
  Py_ssize_t __pyx_t_6;

#line 415 "View.MemoryView"
  char *__pyx_t_7;

#line 415 "View.MemoryView"
  int __pyx_lineno = 0;

#line 415 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 415 "View.MemoryView"
  int __pyx_clineno = 0;

#line 415 "View.MemoryView"
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":417
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */

#line 417 "View.MemoryView"
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":419
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */

#line 419 "View.MemoryView"
  __pyx_t_1 = 0;

#line 419 "View.MemoryView"
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {

#line 419 "View.MemoryView"
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 419 "View.MemoryView"
    __pyx_t_4 = NULL;

#line 419 "View.MemoryView"
  } else {
    __pyx_t_3 = -1; 
#line 419 "View.MemoryView"
__pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 419 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
  }

#line 419 "View.MemoryView"
  for (;;) {

#line 419 "View.MemoryView"
    if (likely(!__pyx_t_4)) {

#line 419 "View.MemoryView"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 419 "View.MemoryView"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 419 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 419 "View.MemoryView"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
        #else

#line 419 "View.MemoryView"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_5);

#line 419 "View.MemoryView"
        #endif

#line 419 "View.MemoryView"
      } else {

#line 419 "View.MemoryView"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 419 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 419 "View.MemoryView"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
        #else

#line 419 "View.MemoryView"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_5);

#line 419 "View.MemoryView"
        #endif

#line 419 "View.MemoryView"
      }
    } else 
#line 419 "View.MemoryView"
{

#line 419 "View.MemoryView"
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);

#line 419 "View.MemoryView"
      if (unlikely(!__pyx_t_5)) {

#line 419 "View.MemoryView"
        PyObject* exc_type = PyErr_Occurred();

#line 419 "View.MemoryView"
        if (exc_type) {

#line 419 "View.MemoryView"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 419 "View.MemoryView"
          else __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "View.MemoryView"
        }

#line 419 "View.MemoryView"
        break;

#line 419 "View.MemoryView"
      }

#line 419 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 419 "View.MemoryView"
    }

#line 419 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);

#line 419 "View.MemoryView"
    __pyx_t_5 = 0;

#line 419 "View.MemoryView"
    __pyx_v_dim = __pyx_t_1;

#line 419 "View.MemoryView"
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":420
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */

#line 420 "View.MemoryView"
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":419
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */

#line 419 "View.MemoryView"
  }

#line 419 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":422
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 422 "View.MemoryView"
  __pyx_r = __pyx_v_itemp;

#line 422 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":415
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

#line 415 "View.MemoryView"


#line 415 "View.MemoryView"
  /* function exit code */

#line 415 "View.MemoryView"
  __pyx_L1_error:;

#line 415 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 415 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 415 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 415 "View.MemoryView"
  __pyx_r = NULL;

#line 415 "View.MemoryView"
  __pyx_L0:;

#line 415 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_idx);

#line 415 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 415 "View.MemoryView"
  return __pyx_r;

#line 415 "View.MemoryView"
}

/* "View.MemoryView":425
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

#line 425 "View.MemoryView"


#line 425 "View.MemoryView"
/* Python wrapper */

#line 425 "View.MemoryView"
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/

#line 425 "View.MemoryView"
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {

#line 425 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 425 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 425 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 425 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = 
#line 425 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

#line 425 "View.MemoryView"


#line 425 "View.MemoryView"
  /* function exit code */

#line 425 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 425 "View.MemoryView"
  return __pyx_r;

#line 425 "View.MemoryView"
}

#line 425 "View.MemoryView"


#line 425 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL
#line 425 "View.MemoryView"
;
  PyObject *__pyx_v_indices = NULL
#line 425 "View.MemoryView"
;
  char *__pyx_v_itemp
#line 425 "View.MemoryView"
;

#line 425 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 425 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 425 "View.MemoryView"
  int __pyx_t_1;

#line 425 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 425 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 425 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 425 "View.MemoryView"
  char *__pyx_t_5;

#line 425 "View.MemoryView"
  int __pyx_lineno = 0;

#line 425 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 425 "View.MemoryView"
  int __pyx_clineno = 0;

#line 425 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":426
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */

#line 426 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);

#line 426 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":427
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */

#line 427 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 427 "View.MemoryView"
    __Pyx_INCREF((PyObject *)__pyx_v_self);

#line 427 "View.MemoryView"
    __pyx_r = ((PyObject *)__pyx_v_self);

#line 427 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":426
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */

#line 426 "View.MemoryView"
  }

  /* "View.MemoryView":429
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */

#line 429 "View.MemoryView"
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 429 "View.MemoryView"
  if (likely(__pyx_t_2 != Py_None)) {

#line 429 "View.MemoryView"
    PyObject* sequence = __pyx_t_2;

#line 429 "View.MemoryView"
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);

#line 429 "View.MemoryView"
    if (unlikely(size != 2)) {

#line 429 "View.MemoryView"
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 429 "View.MemoryView"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 429 "View.MemoryView"
      __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "View.MemoryView"
    }

#line 429 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 429 "View.MemoryView"
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 429 "View.MemoryView"
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 429 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_3);

#line 429 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_4);

#line 429 "View.MemoryView"
    #else

#line 429 "View.MemoryView"
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 429 "View.MemoryView"
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 429 "View.MemoryView"
    #endif

#line 429 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 429 "View.MemoryView"
  } else {

#line 429 "View.MemoryView"
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "View.MemoryView"
  }

#line 429 "View.MemoryView"
  __pyx_v_have_slices = __pyx_t_3;

#line 429 "View.MemoryView"
  __pyx_t_3 = 0;

#line 429 "View.MemoryView"
  __pyx_v_indices = __pyx_t_4;

#line 429 "View.MemoryView"
  __pyx_t_4 = 0;

  /* "View.MemoryView":432
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */

#line 432 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 432, __pyx_L1_error)

#line 432 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":433
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */

#line 433 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 433 "View.MemoryView"
    __pyx_t_2 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 433, __pyx_L1_error)

#line 433 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 433 "View.MemoryView"
    __pyx_r = __pyx_t_2;

#line 433 "View.MemoryView"
    __pyx_t_2 = 0;

#line 433 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":432
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */

#line 432 "View.MemoryView"
  }

  /* "View.MemoryView":435
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */

#line 435 "View.MemoryView"
  /*else*/ {

#line 435 "View.MemoryView"
    __pyx_t_5 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_5 == ((char *)NULL))) __PYX_ERR(1, 435, __pyx_L1_error)

#line 435 "View.MemoryView"
    __pyx_v_itemp = __pyx_t_5;

    /* "View.MemoryView":436
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */

#line 436 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 436 "View.MemoryView"
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 436, __pyx_L1_error)

#line 436 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 436 "View.MemoryView"
    __pyx_r = __pyx_t_2;

#line 436 "View.MemoryView"
    __pyx_t_2 = 0;

#line 436 "View.MemoryView"
    goto __pyx_L0;

#line 436 "View.MemoryView"
  }

  /* "View.MemoryView":425
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

#line 425 "View.MemoryView"


#line 425 "View.MemoryView"
  /* function exit code */

#line 425 "View.MemoryView"
  __pyx_L1_error:;

#line 425 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 425 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 425 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 425 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 425 "View.MemoryView"
  __pyx_r = NULL;

#line 425 "View.MemoryView"
  __pyx_L0:;

#line 425 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_have_slices);

#line 425 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_indices);

#line 425 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 425 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 425 "View.MemoryView"
  return __pyx_r;

#line 425 "View.MemoryView"
}

/* "View.MemoryView":438
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
 */

#line 438 "View.MemoryView"


#line 438 "View.MemoryView"
/* Python wrapper */

#line 438 "View.MemoryView"
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/

#line 438 "View.MemoryView"
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {

#line 438 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 438 "View.MemoryView"
  int __pyx_r;

#line 438 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 438 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = 
#line 438 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

#line 438 "View.MemoryView"


#line 438 "View.MemoryView"
  /* function exit code */

#line 438 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 438 "View.MemoryView"
  return __pyx_r;

#line 438 "View.MemoryView"
}

#line 438 "View.MemoryView"


#line 438 "View.MemoryView"
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL
#line 438 "View.MemoryView"
;
  PyObject *__pyx_v_obj = NULL
#line 438 "View.MemoryView"
;

#line 438 "View.MemoryView"
  int __pyx_r;

#line 438 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 438 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 438 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 438 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 438 "View.MemoryView"
  int __pyx_t_4;

#line 438 "View.MemoryView"
  int __pyx_lineno = 0;

#line 438 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 438 "View.MemoryView"
  int __pyx_clineno = 0;

#line 438 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__", 0);

#line 438 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":439
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 */

#line 439 "View.MemoryView"
  if (unlikely(__pyx_v_self->view.readonly)) {

    /* "View.MemoryView":440
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */

#line 440 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Cannot_assign_to_read_only_memor, 0, 0);

#line 440 "View.MemoryView"
    __PYX_ERR(1, 440, __pyx_L1_error)

    /* "View.MemoryView":439
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 */

#line 439 "View.MemoryView"
  }

  /* "View.MemoryView":442
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */

#line 442 "View.MemoryView"
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 442 "View.MemoryView"
  if (likely(__pyx_t_1 != Py_None)) {

#line 442 "View.MemoryView"
    PyObject* sequence = __pyx_t_1;

#line 442 "View.MemoryView"
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);

#line 442 "View.MemoryView"
    if (unlikely(size != 2)) {

#line 442 "View.MemoryView"
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 442 "View.MemoryView"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 442 "View.MemoryView"
      __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "View.MemoryView"
    }

#line 442 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 442 "View.MemoryView"
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 442 "View.MemoryView"
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 442 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_2);

#line 442 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_3);

#line 442 "View.MemoryView"
    #else

#line 442 "View.MemoryView"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 442 "View.MemoryView"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 442 "View.MemoryView"
    #endif

#line 442 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 442 "View.MemoryView"
  } else {

#line 442 "View.MemoryView"
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "View.MemoryView"
  }

#line 442 "View.MemoryView"
  __pyx_v_have_slices = __pyx_t_2;

#line 442 "View.MemoryView"
  __pyx_t_2 = 0;

#line 442 "View.MemoryView"
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);

#line 442 "View.MemoryView"
  __pyx_t_3 = 0;

  /* "View.MemoryView":444
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */

#line 444 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 444, __pyx_L1_error)

#line 444 "View.MemoryView"
  if (__pyx_t_4) {

    /* "View.MemoryView":445
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */

#line 445 "View.MemoryView"
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 445, __pyx_L1_error)

#line 445 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 445 "View.MemoryView"
    __pyx_v_obj = __pyx_t_1;

#line 445 "View.MemoryView"
    __pyx_t_1 = 0;

    /* "View.MemoryView":446
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */

#line 446 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 446, __pyx_L1_error)

#line 446 "View.MemoryView"
    if (__pyx_t_4) {

      /* "View.MemoryView":447
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */

#line 447 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 447, __pyx_L1_error)

#line 447 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_1);

#line 447 "View.MemoryView"
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)

#line 447 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 447 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 447 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":446
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */

#line 446 "View.MemoryView"
      goto __pyx_L5;

#line 446 "View.MemoryView"
    }

    /* "View.MemoryView":449
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */

#line 449 "View.MemoryView"
    /*else*/ {

#line 449 "View.MemoryView"
      __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)

#line 449 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 449 "View.MemoryView"
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 449, __pyx_L1_error)

#line 449 "View.MemoryView"
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)

#line 449 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_1);

#line 449 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 449 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 449 "View.MemoryView"
    }

#line 449 "View.MemoryView"
    __pyx_L5:;

    /* "View.MemoryView":444
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */

#line 444 "View.MemoryView"
    goto __pyx_L4;

#line 444 "View.MemoryView"
  }

  /* "View.MemoryView":451
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */

#line 451 "View.MemoryView"
  /*else*/ {

#line 451 "View.MemoryView"
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)

#line 451 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 451 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 451 "View.MemoryView"
  }

#line 451 "View.MemoryView"
  __pyx_L4:;

  /* "View.MemoryView":438
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
 */

#line 438 "View.MemoryView"


#line 438 "View.MemoryView"
  /* function exit code */

#line 438 "View.MemoryView"
  __pyx_r = 0;

#line 438 "View.MemoryView"
  goto __pyx_L0;

#line 438 "View.MemoryView"
  __pyx_L1_error:;

#line 438 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 438 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 438 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 438 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 438 "View.MemoryView"
  __pyx_r = -1;

#line 438 "View.MemoryView"
  __pyx_L0:;

#line 438 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_have_slices);

#line 438 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_obj);

#line 438 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_index);

#line 438 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 438 "View.MemoryView"
  return __pyx_r;

#line 438 "View.MemoryView"
}

/* "View.MemoryView":453
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

#line 453 "View.MemoryView"


#line 453 "View.MemoryView"
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {

#line 453 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 453 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 453 "View.MemoryView"
  int __pyx_t_1;

#line 453 "View.MemoryView"
  int __pyx_t_2;

#line 453 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 453 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 453 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 453 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 453 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 453 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 453 "View.MemoryView"
  int __pyx_t_9;

#line 453 "View.MemoryView"
  int __pyx_lineno = 0;

#line 453 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 453 "View.MemoryView"
  int __pyx_clineno = 0;

#line 453 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_slice", 0);

#line 453 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":454
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */

#line 454 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 

#line 454 "View.MemoryView"
  __pyx_t_2 = (!__pyx_t_1);

#line 454 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":455
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */

#line 455 "View.MemoryView"
    {

#line 455 "View.MemoryView"
      __Pyx_PyThreadState_declare

#line 455 "View.MemoryView"
      __Pyx_PyThreadState_assign

#line 455 "View.MemoryView"
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);

#line 455 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_3);

#line 455 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_4);

#line 455 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_5);

#line 455 "View.MemoryView"
      /*try:*/ {

        /* "View.MemoryView":456
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */

#line 456 "View.MemoryView"
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 456, __pyx_L4_error)

#line 456 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":457
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */

#line 457 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 457, __pyx_L4_error)

#line 457 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":456
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */

#line 456 "View.MemoryView"
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 456, __pyx_L4_error)

#line 456 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_8);

#line 456 "View.MemoryView"
        __Pyx_INCREF(__pyx_v_obj);

#line 456 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_v_obj);

#line 456 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);

#line 456 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_6);

#line 456 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);

#line 456 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_7);

#line 456 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);

#line 456 "View.MemoryView"
        __pyx_t_6 = 0;

#line 456 "View.MemoryView"
        __pyx_t_7 = 0;

#line 456 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 456, __pyx_L4_error)

#line 456 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 456 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 456 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);

#line 456 "View.MemoryView"
        __pyx_t_7 = 0;

        /* "View.MemoryView":455
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */

#line 455 "View.MemoryView"
      }

#line 455 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 455 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 455 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 455 "View.MemoryView"
      goto __pyx_L9_try_end;

#line 455 "View.MemoryView"
      __pyx_L4_error:;

#line 455 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 455 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 455 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":458
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */

#line 458 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 458 "View.MemoryView"
      if (__pyx_t_9) {

#line 458 "View.MemoryView"
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 458 "View.MemoryView"
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 458, __pyx_L6_except_error)

#line 458 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 458 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_8);

#line 458 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":459
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */

#line 459 "View.MemoryView"
        __Pyx_XDECREF(__pyx_r);

#line 459 "View.MemoryView"
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 459 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 459 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 459 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 459 "View.MemoryView"
        goto __pyx_L7_except_return;

#line 459 "View.MemoryView"
      }

#line 459 "View.MemoryView"
      goto __pyx_L6_except_error;

#line 459 "View.MemoryView"
      __pyx_L6_except_error:;

      /* "View.MemoryView":455
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */

#line 455 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 455 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_4);

#line 455 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_5);

#line 455 "View.MemoryView"
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);

#line 455 "View.MemoryView"
      goto __pyx_L1_error;

#line 455 "View.MemoryView"
      __pyx_L7_except_return:;

#line 455 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 455 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_4);

#line 455 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_5);

#line 455 "View.MemoryView"
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);

#line 455 "View.MemoryView"
      goto __pyx_L0;

#line 455 "View.MemoryView"
      __pyx_L9_try_end:;

#line 455 "View.MemoryView"
    }

    /* "View.MemoryView":454
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */

#line 454 "View.MemoryView"
  }

  /* "View.MemoryView":461
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */

#line 461 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 461 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_obj);

#line 461 "View.MemoryView"
  __pyx_r = __pyx_v_obj;

#line 461 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":453
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

#line 453 "View.MemoryView"


#line 453 "View.MemoryView"
  /* function exit code */

#line 453 "View.MemoryView"
  __pyx_L1_error:;

#line 453 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 453 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_7);

#line 453 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_8);

#line 453 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 453 "View.MemoryView"
  __pyx_r = 0;

#line 453 "View.MemoryView"
  __pyx_L0:;

#line 453 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_obj);

#line 453 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 453 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 453 "View.MemoryView"
  return __pyx_r;

#line 453 "View.MemoryView"
}

/* "View.MemoryView":463
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

#line 463 "View.MemoryView"


#line 463 "View.MemoryView"
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice
#line 463 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_src_slice
#line 463 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_msrc
#line 463 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_mdst
#line 463 "View.MemoryView"
;

#line 463 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 463 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 463 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 463 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 463 "View.MemoryView"
  int __pyx_t_3;

#line 463 "View.MemoryView"
  int __pyx_t_4;

#line 463 "View.MemoryView"
  int __pyx_t_5;

#line 463 "View.MemoryView"
  int __pyx_lineno = 0;

#line 463 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 463 "View.MemoryView"
  int __pyx_clineno = 0;

#line 463 "View.MemoryView"
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":466
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 */

#line 466 "View.MemoryView"
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 466, __pyx_L1_error)

#line 466 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 466, __pyx_L1_error)

#line 466 "View.MemoryView"
  __pyx_v_msrc = (__pyx_t_1[0]);

  /* "View.MemoryView":467
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]             # <<<<<<<<<<<<<<
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 */

#line 467 "View.MemoryView"
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 467, __pyx_L1_error)

#line 467 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 467, __pyx_L1_error)

#line 467 "View.MemoryView"
  __pyx_v_mdst = (__pyx_t_1[0]);

  /* "View.MemoryView":469
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */

#line 469 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 469, __pyx_L1_error)

#line 469 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 469 "View.MemoryView"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 469, __pyx_L1_error)

#line 469 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 469 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 469, __pyx_L1_error)

#line 469 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 469 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 469, __pyx_L1_error)

#line 469 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 469 "View.MemoryView"
  __pyx_t_5 = __pyx_memoryview_copy_contents(__pyx_v_msrc, __pyx_v_mdst, __pyx_t_3, __pyx_t_4, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 469, __pyx_L1_error)

  /* "View.MemoryView":463
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

#line 463 "View.MemoryView"


#line 463 "View.MemoryView"
  /* function exit code */

#line 463 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 463 "View.MemoryView"
  goto __pyx_L0;

#line 463 "View.MemoryView"
  __pyx_L1_error:;

#line 463 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 463 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 463 "View.MemoryView"
  __pyx_r = 0;

#line 463 "View.MemoryView"
  __pyx_L0:;

#line 463 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 463 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 463 "View.MemoryView"
  return __pyx_r;

#line 463 "View.MemoryView"
}

/* "View.MemoryView":471
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

#line 471 "View.MemoryView"


#line 471 "View.MemoryView"
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80]
#line 471 "View.MemoryView"
;
  void *__pyx_v_tmp
#line 471 "View.MemoryView"
;
  void *__pyx_v_item
#line 471 "View.MemoryView"
;
  __Pyx_memviewslice *__pyx_v_dst_slice
#line 471 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp_slice
#line 471 "View.MemoryView"
;

#line 471 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 471 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 471 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 471 "View.MemoryView"
  int __pyx_t_2;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 471 "View.MemoryView"
  int __pyx_t_4;

#line 471 "View.MemoryView"
  int __pyx_t_5;

#line 471 "View.MemoryView"
  char const *__pyx_t_6;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_9 = NULL;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_10 = NULL;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_11 = NULL;

#line 471 "View.MemoryView"
  PyObject *__pyx_t_12 = NULL;

#line 471 "View.MemoryView"
  int __pyx_lineno = 0;

#line 471 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 471 "View.MemoryView"
  int __pyx_clineno = 0;

#line 471 "View.MemoryView"
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":473
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */

#line 473 "View.MemoryView"
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":478
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */

#line 478 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 478, __pyx_L1_error)

#line 478 "View.MemoryView"
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":480
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */

#line 480 "View.MemoryView"
  __pyx_t_2 = (((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array)));

#line 480 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":481
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */

#line 481 "View.MemoryView"
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":482
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */

#line 482 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_tmp == NULL);

#line 482 "View.MemoryView"
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":483
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */

#line 483 "View.MemoryView"
      PyErr_NoMemory(); __PYX_ERR(1, 483, __pyx_L1_error)

      /* "View.MemoryView":482
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */

#line 482 "View.MemoryView"
    }

    /* "View.MemoryView":484
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */

#line 484 "View.MemoryView"
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":480
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */

#line 480 "View.MemoryView"
    goto __pyx_L3;

#line 480 "View.MemoryView"
  }

  /* "View.MemoryView":486
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */

#line 486 "View.MemoryView"
  /*else*/ {

#line 486 "View.MemoryView"
    __pyx_v_item = ((void *)__pyx_v_array);

#line 486 "View.MemoryView"
  }

#line 486 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":488
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */

#line 488 "View.MemoryView"
  /*try:*/ {

    /* "View.MemoryView":489
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */

#line 489 "View.MemoryView"
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":490
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */

#line 490 "View.MemoryView"
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":489
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */

#line 489 "View.MemoryView"
      goto __pyx_L8;

#line 489 "View.MemoryView"
    }

    /* "View.MemoryView":492
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 492 "View.MemoryView"
    /*else*/ {

#line 492 "View.MemoryView"
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 492, __pyx_L6_error)

#line 492 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 492 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 492 "View.MemoryView"
    }

#line 492 "View.MemoryView"
    __pyx_L8:;

    /* "View.MemoryView":496
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */

#line 496 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_self->view.suboffsets != NULL);

#line 496 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":497
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */

#line 497 "View.MemoryView"
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 497, __pyx_L6_error)

#line 497 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 497 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":496
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */

#line 496 "View.MemoryView"
    }

    /* "View.MemoryView":498
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */

#line 498 "View.MemoryView"
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);

#line 498 "View.MemoryView"
  }

  /* "View.MemoryView":501
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */

#line 501 "View.MemoryView"
  /*finally:*/ {

#line 501 "View.MemoryView"
    /*normal exit:*/{

#line 501 "View.MemoryView"
      PyMem_Free(__pyx_v_tmp);

#line 501 "View.MemoryView"
      goto __pyx_L7;

#line 501 "View.MemoryView"
    }

#line 501 "View.MemoryView"
    __pyx_L6_error:;

#line 501 "View.MemoryView"
    /*exception exit:*/{

#line 501 "View.MemoryView"
      __Pyx_PyThreadState_declare

#line 501 "View.MemoryView"
      __Pyx_PyThreadState_assign

#line 501 "View.MemoryView"
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;

#line 501 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 501 "View.MemoryView"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 501 "View.MemoryView"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);

#line 501 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_7);

#line 501 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_8);

#line 501 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_9);

#line 501 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_10);

#line 501 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_11);

#line 501 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_12);

#line 501 "View.MemoryView"
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;

#line 501 "View.MemoryView"
      {

#line 501 "View.MemoryView"
        PyMem_Free(__pyx_v_tmp);

#line 501 "View.MemoryView"
      }

#line 501 "View.MemoryView"
      if (PY_MAJOR_VERSION >= 3) {

#line 501 "View.MemoryView"
        __Pyx_XGIVEREF(__pyx_t_10);

#line 501 "View.MemoryView"
        __Pyx_XGIVEREF(__pyx_t_11);

#line 501 "View.MemoryView"
        __Pyx_XGIVEREF(__pyx_t_12);

#line 501 "View.MemoryView"
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 501 "View.MemoryView"
      }

#line 501 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_7);

#line 501 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 501 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 501 "View.MemoryView"
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);

#line 501 "View.MemoryView"
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;

#line 501 "View.MemoryView"
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;

#line 501 "View.MemoryView"
      goto __pyx_L1_error;

#line 501 "View.MemoryView"
    }

#line 501 "View.MemoryView"
    __pyx_L7:;

#line 501 "View.MemoryView"
  }

  /* "View.MemoryView":471
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

#line 471 "View.MemoryView"


#line 471 "View.MemoryView"
  /* function exit code */

#line 471 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 471 "View.MemoryView"
  goto __pyx_L0;

#line 471 "View.MemoryView"
  __pyx_L1_error:;

#line 471 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 471 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 471 "View.MemoryView"
  __pyx_r = 0;

#line 471 "View.MemoryView"
  __pyx_L0:;

#line 471 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 471 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 471 "View.MemoryView"
  return __pyx_r;

#line 471 "View.MemoryView"
}

/* "View.MemoryView":503
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

#line 503 "View.MemoryView"


#line 503 "View.MemoryView"
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp
#line 503 "View.MemoryView"
;

#line 503 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 503 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 503 "View.MemoryView"
  char *__pyx_t_1;

#line 503 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 503 "View.MemoryView"
  int __pyx_lineno = 0;

#line 503 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 503 "View.MemoryView"
  int __pyx_clineno = 0;

#line 503 "View.MemoryView"
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":504
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */

#line 504 "View.MemoryView"
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 504, __pyx_L1_error)

#line 504 "View.MemoryView"
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":505
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */

#line 505 "View.MemoryView"
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 505, __pyx_L1_error)

#line 505 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 505 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":503
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

#line 503 "View.MemoryView"


#line 503 "View.MemoryView"
  /* function exit code */

#line 503 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 503 "View.MemoryView"
  goto __pyx_L0;

#line 503 "View.MemoryView"
  __pyx_L1_error:;

#line 503 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 503 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 503 "View.MemoryView"
  __pyx_r = 0;

#line 503 "View.MemoryView"
  __pyx_L0:;

#line 503 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 503 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 503 "View.MemoryView"
  return __pyx_r;

#line 503 "View.MemoryView"
}

/* "View.MemoryView":507
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 507 "View.MemoryView"


#line 507 "View.MemoryView"
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL
#line 507 "View.MemoryView"
;
  PyObject *__pyx_v_bytesitem = 0
#line 507 "View.MemoryView"
;
  PyObject *__pyx_v_result = NULL
#line 507 "View.MemoryView"
;

#line 507 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 507 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 507 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 507 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 507 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 507 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 507 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 507 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 507 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 507 "View.MemoryView"
  int __pyx_t_8;

#line 507 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 507 "View.MemoryView"
  int __pyx_t_10;

#line 507 "View.MemoryView"
  int __pyx_lineno = 0;

#line 507 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 507 "View.MemoryView"
  int __pyx_clineno = 0;

#line 507 "View.MemoryView"
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":510
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */

#line 510 "View.MemoryView"
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 510 "View.MemoryView"
  __pyx_v_struct = __pyx_t_1;

#line 510 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":513
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */

#line 513 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 513, __pyx_L1_error)

#line 513 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 513 "View.MemoryView"
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);

#line 513 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":514
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */

#line 514 "View.MemoryView"
  {

#line 514 "View.MemoryView"
    __Pyx_PyThreadState_declare

#line 514 "View.MemoryView"
    __Pyx_PyThreadState_assign

#line 514 "View.MemoryView"
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);

#line 514 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_2);

#line 514 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_3);

#line 514 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_4);

#line 514 "View.MemoryView"
    /*try:*/ {

      /* "View.MemoryView":515
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"
 */

#line 515 "View.MemoryView"
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 515, __pyx_L3_error)

#line 515 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 515 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 515, __pyx_L3_error)

#line 515 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 515 "View.MemoryView"
      __pyx_t_7 = NULL;

#line 515 "View.MemoryView"
      __pyx_t_8 = 0;

#line 515 "View.MemoryView"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 515 "View.MemoryView"
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);

#line 515 "View.MemoryView"
        if (likely(__pyx_t_7)) {

#line 515 "View.MemoryView"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 515 "View.MemoryView"
          __Pyx_INCREF(__pyx_t_7);

#line 515 "View.MemoryView"
          __Pyx_INCREF(function);

#line 515 "View.MemoryView"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 515 "View.MemoryView"
          __pyx_t_8 = 1;

#line 515 "View.MemoryView"
        }

#line 515 "View.MemoryView"
      }

#line 515 "View.MemoryView"
      {

#line 515 "View.MemoryView"
        PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};

#line 515 "View.MemoryView"
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);

#line 515 "View.MemoryView"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 515 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 515 "View.MemoryView"
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 515, __pyx_L3_error)

#line 515 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_1);

#line 515 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 515 "View.MemoryView"
      }

#line 515 "View.MemoryView"
      __pyx_v_result = __pyx_t_1;

#line 515 "View.MemoryView"
      __pyx_t_1 = 0;

      /* "View.MemoryView":514
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */

#line 514 "View.MemoryView"
    }

    /* "View.MemoryView":519
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */

#line 519 "View.MemoryView"
    /*else:*/ {

#line 519 "View.MemoryView"
      __pyx_t_9 = __Pyx_ssize_strlen(__pyx_v_self->view.format); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 519, __pyx_L5_except_error)

#line 519 "View.MemoryView"
      __pyx_t_10 = (__pyx_t_9 == 1);

#line 519 "View.MemoryView"
      if (__pyx_t_10) {

        /* "View.MemoryView":520
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */

#line 520 "View.MemoryView"
        __Pyx_XDECREF(__pyx_r);

#line 520 "View.MemoryView"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 520, __pyx_L5_except_error)

#line 520 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_1);

#line 520 "View.MemoryView"
        __pyx_r = __pyx_t_1;

#line 520 "View.MemoryView"
        __pyx_t_1 = 0;

#line 520 "View.MemoryView"
        goto __pyx_L6_except_return;

        /* "View.MemoryView":519
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */

#line 519 "View.MemoryView"
      }

      /* "View.MemoryView":521
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */

#line 521 "View.MemoryView"
      __Pyx_XDECREF(__pyx_r);

#line 521 "View.MemoryView"
      __Pyx_INCREF(__pyx_v_result);

#line 521 "View.MemoryView"
      __pyx_r = __pyx_v_result;

#line 521 "View.MemoryView"
      goto __pyx_L6_except_return;

#line 521 "View.MemoryView"
    }

#line 521 "View.MemoryView"
    __pyx_L3_error:;

#line 521 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 521 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 521 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 521 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":516
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 */

#line 516 "View.MemoryView"
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_6);

#line 516 "View.MemoryView"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 516, __pyx_L5_except_error)

#line 516 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_7);

#line 516 "View.MemoryView"
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_7);

#line 516 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 516 "View.MemoryView"
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_6);

#line 516 "View.MemoryView"
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;

#line 516 "View.MemoryView"
    if (__pyx_t_8) {

#line 516 "View.MemoryView"
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 516 "View.MemoryView"
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 516, __pyx_L5_except_error)

#line 516 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 516 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 516 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":517
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */

#line 517 "View.MemoryView"
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Unable_to_convert_item_to_object, 0, 0);

#line 517 "View.MemoryView"
      __PYX_ERR(1, 517, __pyx_L5_except_error)

#line 517 "View.MemoryView"
    }

#line 517 "View.MemoryView"
    goto __pyx_L5_except_error;

#line 517 "View.MemoryView"
    __pyx_L5_except_error:;

    /* "View.MemoryView":514
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */

#line 514 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 514 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 514 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 514 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 514 "View.MemoryView"
    goto __pyx_L1_error;

#line 514 "View.MemoryView"
    __pyx_L6_except_return:;

#line 514 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 514 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 514 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 514 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 514 "View.MemoryView"
    goto __pyx_L0;

#line 514 "View.MemoryView"
  }

  /* "View.MemoryView":507
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 507 "View.MemoryView"


#line 507 "View.MemoryView"
  /* function exit code */

#line 507 "View.MemoryView"
  __pyx_L1_error:;

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_7);

#line 507 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 507 "View.MemoryView"
  __pyx_r = 0;

#line 507 "View.MemoryView"
  __pyx_L0:;

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_struct);

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_bytesitem);

#line 507 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_result);

#line 507 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 507 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 507 "View.MemoryView"
  return __pyx_r;

#line 507 "View.MemoryView"
}

/* "View.MemoryView":523
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 523 "View.MemoryView"


#line 523 "View.MemoryView"
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL
#line 523 "View.MemoryView"
;
  char __pyx_v_c
#line 523 "View.MemoryView"
;
  PyObject *__pyx_v_bytesvalue = 0
#line 523 "View.MemoryView"
;
  Py_ssize_t __pyx_v_i
#line 523 "View.MemoryView"
;

#line 523 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 523 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 523 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 523 "View.MemoryView"
  int __pyx_t_2;

#line 523 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 523 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 523 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 523 "View.MemoryView"
  int __pyx_t_6;

#line 523 "View.MemoryView"
  Py_ssize_t __pyx_t_7;

#line 523 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 523 "View.MemoryView"
  char *__pyx_t_9;

#line 523 "View.MemoryView"
  char *__pyx_t_10;

#line 523 "View.MemoryView"
  char *__pyx_t_11;

#line 523 "View.MemoryView"
  char *__pyx_t_12;

#line 523 "View.MemoryView"
  int __pyx_lineno = 0;

#line 523 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 523 "View.MemoryView"
  int __pyx_clineno = 0;

#line 523 "View.MemoryView"
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":526
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */

#line 526 "View.MemoryView"
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 526, __pyx_L1_error)

#line 526 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 526 "View.MemoryView"
  __pyx_v_struct = __pyx_t_1;

#line 526 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":531
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */

#line 531 "View.MemoryView"
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 

#line 531 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":532
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */

#line 532 "View.MemoryView"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 532 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 532 "View.MemoryView"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 532 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_3);

#line 532 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 532 "View.MemoryView"
    __pyx_t_3 = 0;

#line 532 "View.MemoryView"
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 532 "View.MemoryView"
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 532 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 532 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 532 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 532 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 532 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 532 "View.MemoryView"
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "View.MemoryView"
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);

#line 532 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":531
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */

#line 531 "View.MemoryView"
    goto __pyx_L3;

#line 531 "View.MemoryView"
  }

  /* "View.MemoryView":534
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */

#line 534 "View.MemoryView"
  /*else*/ {

#line 534 "View.MemoryView"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 534, __pyx_L1_error)

#line 534 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 534 "View.MemoryView"
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 534, __pyx_L1_error)

#line 534 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 534 "View.MemoryView"
    __pyx_t_4 = NULL;

#line 534 "View.MemoryView"
    __pyx_t_6 = 0;

#line 534 "View.MemoryView"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 534 "View.MemoryView"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 534 "View.MemoryView"
      if (likely(__pyx_t_4)) {

#line 534 "View.MemoryView"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 534 "View.MemoryView"
        __Pyx_INCREF(__pyx_t_4);

#line 534 "View.MemoryView"
        __Pyx_INCREF(function);

#line 534 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 534 "View.MemoryView"
        __pyx_t_6 = 1;

#line 534 "View.MemoryView"
      }

#line 534 "View.MemoryView"
    }

#line 534 "View.MemoryView"
    {

#line 534 "View.MemoryView"
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_1, __pyx_v_value};

#line 534 "View.MemoryView"
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);

#line 534 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 534 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 534 "View.MemoryView"
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 534, __pyx_L1_error)

#line 534 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 534 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 534 "View.MemoryView"
    }

#line 534 "View.MemoryView"
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(1, 534, __pyx_L1_error)

#line 534 "View.MemoryView"
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);

#line 534 "View.MemoryView"
    __pyx_t_3 = 0;

#line 534 "View.MemoryView"
  }

#line 534 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":536
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */

#line 536 "View.MemoryView"
  __pyx_t_7 = 0;

#line 536 "View.MemoryView"
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {

#line 536 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");

#line 536 "View.MemoryView"
    __PYX_ERR(1, 536, __pyx_L1_error)

#line 536 "View.MemoryView"
  }

#line 536 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_bytesvalue);

#line 536 "View.MemoryView"
  __pyx_t_8 = __pyx_v_bytesvalue;

#line 536 "View.MemoryView"
  __pyx_t_10 = PyBytes_AS_STRING(__pyx_t_8);

#line 536 "View.MemoryView"
  __pyx_t_11 = (__pyx_t_10 + PyBytes_GET_SIZE(__pyx_t_8));

#line 536 "View.MemoryView"
  for (__pyx_t_12 = __pyx_t_10; __pyx_t_12 < __pyx_t_11; __pyx_t_12++) {

#line 536 "View.MemoryView"
    __pyx_t_9 = __pyx_t_12;

#line 536 "View.MemoryView"
    __pyx_v_c = (__pyx_t_9[0]);

    /* "View.MemoryView":537
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */

#line 537 "View.MemoryView"
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":536
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */

#line 536 "View.MemoryView"
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":537
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */

#line 537 "View.MemoryView"
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;

#line 537 "View.MemoryView"
  }

#line 537 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "View.MemoryView":523
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 523 "View.MemoryView"


#line 523 "View.MemoryView"
  /* function exit code */

#line 523 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 523 "View.MemoryView"
  goto __pyx_L0;

#line 523 "View.MemoryView"
  __pyx_L1_error:;

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_8);

#line 523 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 523 "View.MemoryView"
  __pyx_r = 0;

#line 523 "View.MemoryView"
  __pyx_L0:;

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_struct);

#line 523 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_bytesvalue);

#line 523 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 523 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 523 "View.MemoryView"
  return __pyx_r;

#line 523 "View.MemoryView"
}

/* "View.MemoryView":539
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 */

#line 539 "View.MemoryView"


#line 539 "View.MemoryView"
/* Python wrapper */

#line 539 "View.MemoryView"
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 539 "View.MemoryView"
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 539 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 539 "View.MemoryView"
  int __pyx_r;

#line 539 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 539 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 539 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 539 "View.MemoryView"


#line 539 "View.MemoryView"
  /* function exit code */

#line 539 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 539 "View.MemoryView"
  return __pyx_r;

#line 539 "View.MemoryView"
}

#line 539 "View.MemoryView"


#line 539 "View.MemoryView"
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 539 "View.MemoryView"
  int __pyx_r;

#line 539 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 539 "View.MemoryView"
  int __pyx_t_1;

#line 539 "View.MemoryView"
  int __pyx_t_2;

#line 539 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 539 "View.MemoryView"
  char *__pyx_t_4;

#line 539 "View.MemoryView"
  void *__pyx_t_5;

#line 539 "View.MemoryView"
  int __pyx_t_6;

#line 539 "View.MemoryView"
  Py_ssize_t __pyx_t_7;

#line 539 "View.MemoryView"
  int __pyx_lineno = 0;

#line 539 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 539 "View.MemoryView"
  int __pyx_clineno = 0;

#line 539 "View.MemoryView"
  if (unlikely(__pyx_v_info == NULL)) {

#line 539 "View.MemoryView"
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");

#line 539 "View.MemoryView"
    return -1;

#line 539 "View.MemoryView"
  }

#line 539 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 539 "View.MemoryView"
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 539 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":541
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 */

#line 541 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);

#line 541 "View.MemoryView"
  if (__pyx_t_2) {

#line 541 "View.MemoryView"
  } else {

#line 541 "View.MemoryView"
    __pyx_t_1 = __pyx_t_2;

#line 541 "View.MemoryView"
    goto __pyx_L4_bool_binop_done;

#line 541 "View.MemoryView"
  }

#line 541 "View.MemoryView"
  __pyx_t_1 = __pyx_v_self->view.readonly;

#line 541 "View.MemoryView"
  __pyx_L4_bool_binop_done:;

#line 541 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":542
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */

#line 542 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Cannot_create_writable_memory_vi, 0, 0);

#line 542 "View.MemoryView"
    __PYX_ERR(1, 542, __pyx_L1_error)

    /* "View.MemoryView":541
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 */

#line 541 "View.MemoryView"
  }

  /* "View.MemoryView":544
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */

#line 544 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);

#line 544 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":545
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */

#line 545 "View.MemoryView"
    __pyx_t_3 = __pyx_v_self->view.shape;

#line 545 "View.MemoryView"
    __pyx_v_info->shape = __pyx_t_3;

    /* "View.MemoryView":544
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */

#line 544 "View.MemoryView"
    goto __pyx_L6;

#line 544 "View.MemoryView"
  }

  /* "View.MemoryView":547
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */

#line 547 "View.MemoryView"
  /*else*/ {

#line 547 "View.MemoryView"
    __pyx_v_info->shape = NULL;

#line 547 "View.MemoryView"
  }

#line 547 "View.MemoryView"
  __pyx_L6:;

  /* "View.MemoryView":549
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */

#line 549 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);

#line 549 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":550
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */

#line 550 "View.MemoryView"
    __pyx_t_3 = __pyx_v_self->view.strides;

#line 550 "View.MemoryView"
    __pyx_v_info->strides = __pyx_t_3;

    /* "View.MemoryView":549
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */

#line 549 "View.MemoryView"
    goto __pyx_L7;

#line 549 "View.MemoryView"
  }

  /* "View.MemoryView":552
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */

#line 552 "View.MemoryView"
  /*else*/ {

#line 552 "View.MemoryView"
    __pyx_v_info->strides = NULL;

#line 552 "View.MemoryView"
  }

#line 552 "View.MemoryView"
  __pyx_L7:;

  /* "View.MemoryView":554
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */

#line 554 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);

#line 554 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":555
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */

#line 555 "View.MemoryView"
    __pyx_t_3 = __pyx_v_self->view.suboffsets;

#line 555 "View.MemoryView"
    __pyx_v_info->suboffsets = __pyx_t_3;

    /* "View.MemoryView":554
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */

#line 554 "View.MemoryView"
    goto __pyx_L8;

#line 554 "View.MemoryView"
  }

  /* "View.MemoryView":557
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */

#line 557 "View.MemoryView"
  /*else*/ {

#line 557 "View.MemoryView"
    __pyx_v_info->suboffsets = NULL;

#line 557 "View.MemoryView"
  }

#line 557 "View.MemoryView"
  __pyx_L8:;

  /* "View.MemoryView":559
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */

#line 559 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);

#line 559 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":560
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */

#line 560 "View.MemoryView"
    __pyx_t_4 = __pyx_v_self->view.format;

#line 560 "View.MemoryView"
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":559
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */

#line 559 "View.MemoryView"
    goto __pyx_L9;

#line 559 "View.MemoryView"
  }

  /* "View.MemoryView":562
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */

#line 562 "View.MemoryView"
  /*else*/ {

#line 562 "View.MemoryView"
    __pyx_v_info->format = NULL;

#line 562 "View.MemoryView"
  }

#line 562 "View.MemoryView"
  __pyx_L9:;

  /* "View.MemoryView":564
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */

#line 564 "View.MemoryView"
  __pyx_t_5 = __pyx_v_self->view.buf;

#line 564 "View.MemoryView"
  __pyx_v_info->buf = __pyx_t_5;

  /* "View.MemoryView":565
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */

#line 565 "View.MemoryView"
  __pyx_t_6 = __pyx_v_self->view.ndim;

#line 565 "View.MemoryView"
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":566
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */

#line 566 "View.MemoryView"
  __pyx_t_7 = __pyx_v_self->view.itemsize;

#line 566 "View.MemoryView"
  __pyx_v_info->itemsize = __pyx_t_7;

  /* "View.MemoryView":567
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */

#line 567 "View.MemoryView"
  __pyx_t_7 = __pyx_v_self->view.len;

#line 567 "View.MemoryView"
  __pyx_v_info->len = __pyx_t_7;

  /* "View.MemoryView":568
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */

#line 568 "View.MemoryView"
  __pyx_t_1 = __pyx_v_self->view.readonly;

#line 568 "View.MemoryView"
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":569
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 569 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_self);

#line 569 "View.MemoryView"
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);

#line 569 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 569 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 569 "View.MemoryView"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":539
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 */

#line 539 "View.MemoryView"


#line 539 "View.MemoryView"
  /* function exit code */

#line 539 "View.MemoryView"
  __pyx_r = 0;

#line 539 "View.MemoryView"
  goto __pyx_L0;

#line 539 "View.MemoryView"
  __pyx_L1_error:;

#line 539 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 539 "View.MemoryView"
  __pyx_r = -1;

#line 539 "View.MemoryView"
  if (__pyx_v_info->obj != NULL) {

#line 539 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 539 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 539 "View.MemoryView"
  }

#line 539 "View.MemoryView"
  goto __pyx_L2;

#line 539 "View.MemoryView"
  __pyx_L0:;

#line 539 "View.MemoryView"
  if (__pyx_v_info->obj == Py_None) {

#line 539 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 539 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 539 "View.MemoryView"
  }

#line 539 "View.MemoryView"
  __pyx_L2:;

#line 539 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 539 "View.MemoryView"
  return __pyx_r;

#line 539 "View.MemoryView"
}

/* "View.MemoryView":572
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 */

#line 572 "View.MemoryView"


#line 572 "View.MemoryView"
/* Python wrapper */

#line 572 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 572 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {

#line 572 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 572 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 572 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 572 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 572 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 572 "View.MemoryView"


#line 572 "View.MemoryView"
  /* function exit code */

#line 572 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 572 "View.MemoryView"
  return __pyx_r;

#line 572 "View.MemoryView"
}

#line 572 "View.MemoryView"


#line 572 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0
#line 572 "View.MemoryView"
;

#line 572 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 572 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 572 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 572 "View.MemoryView"
  int __pyx_t_2;

#line 572 "View.MemoryView"
  int __pyx_lineno = 0;

#line 572 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 572 "View.MemoryView"
  int __pyx_clineno = 0;

#line 572 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":574
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */

#line 574 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 574, __pyx_L1_error)

#line 574 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 574 "View.MemoryView"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 574, __pyx_L1_error)

#line 574 "View.MemoryView"
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);

#line 574 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":575
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */

#line 575 "View.MemoryView"
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 575, __pyx_L1_error)

  /* "View.MemoryView":576
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 576 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 576 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_result);

#line 576 "View.MemoryView"
  __pyx_r = ((PyObject *)__pyx_v_result);

#line 576 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":572
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 */

#line 572 "View.MemoryView"


#line 572 "View.MemoryView"
  /* function exit code */

#line 572 "View.MemoryView"
  __pyx_L1_error:;

#line 572 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 572 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 572 "View.MemoryView"
  __pyx_r = NULL;

#line 572 "View.MemoryView"
  __pyx_L0:;

#line 572 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 572 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 572 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 572 "View.MemoryView"
  return __pyx_r;

#line 572 "View.MemoryView"
}

/* "View.MemoryView":578
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
 */

#line 578 "View.MemoryView"


#line 578 "View.MemoryView"
/* Python wrapper */

#line 578 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 578 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {

#line 578 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 578 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 578 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 578 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 578 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 578 "View.MemoryView"


#line 578 "View.MemoryView"
  /* function exit code */

#line 578 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 578 "View.MemoryView"
  return __pyx_r;

#line 578 "View.MemoryView"
}

#line 578 "View.MemoryView"


#line 578 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 578 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 578 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 578 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 578 "View.MemoryView"
  int __pyx_lineno = 0;

#line 578 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 578 "View.MemoryView"
  int __pyx_clineno = 0;

#line 578 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":580
 *     @property
 *     def base(self):
 *         return self._get_base()             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
 */

#line 580 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 580 "View.MemoryView"
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->_get_base(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 580, __pyx_L1_error)

#line 580 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 580 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 580 "View.MemoryView"
  __pyx_t_1 = 0;

#line 580 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":578
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
 */

#line 578 "View.MemoryView"


#line 578 "View.MemoryView"
  /* function exit code */

#line 578 "View.MemoryView"
  __pyx_L1_error:;

#line 578 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 578 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 578 "View.MemoryView"
  __pyx_r = NULL;

#line 578 "View.MemoryView"
  __pyx_L0:;

#line 578 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 578 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 578 "View.MemoryView"
  return __pyx_r;

#line 578 "View.MemoryView"
}

/* "View.MemoryView":582
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

#line 582 "View.MemoryView"


#line 582 "View.MemoryView"
static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 582 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 582 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 582 "View.MemoryView"
  __Pyx_RefNannySetupContext("_get_base", 0);

  /* "View.MemoryView":583
 * 
 *     cdef _get_base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 583 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 583 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->obj);

#line 583 "View.MemoryView"
  __pyx_r = __pyx_v_self->obj;

#line 583 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":582
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

#line 582 "View.MemoryView"


#line 582 "View.MemoryView"
  /* function exit code */

#line 582 "View.MemoryView"
  __pyx_L0:;

#line 582 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 582 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 582 "View.MemoryView"
  return __pyx_r;

#line 582 "View.MemoryView"
}

/* "View.MemoryView":585
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 */

#line 585 "View.MemoryView"


#line 585 "View.MemoryView"
/* Python wrapper */

#line 585 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 585 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {

#line 585 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 585 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 585 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 585 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 585 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 585 "View.MemoryView"


#line 585 "View.MemoryView"
  /* function exit code */

#line 585 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 585 "View.MemoryView"
  return __pyx_r;

#line 585 "View.MemoryView"
}

#line 585 "View.MemoryView"


#line 585 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_7genexpr__pyx_v_length
#line 585 "View.MemoryView"
;

#line 585 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 585 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 585 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 585 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 585 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 585 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 585 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 585 "View.MemoryView"
  int __pyx_lineno = 0;

#line 585 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 585 "View.MemoryView"
  int __pyx_clineno = 0;

#line 585 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 587 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 587 "View.MemoryView"
  { /* enter inner scope */

#line 587 "View.MemoryView"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)

#line 587 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 587 "View.MemoryView"
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);

#line 587 "View.MemoryView"
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {

#line 587 "View.MemoryView"
      __pyx_t_2 = __pyx_t_4;

#line 587 "View.MemoryView"
      __pyx_7genexpr__pyx_v_length = (__pyx_t_2[0]);

#line 587 "View.MemoryView"
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_7genexpr__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 587, __pyx_L1_error)

#line 587 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 587 "View.MemoryView"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 587, __pyx_L1_error)

#line 587 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 587 "View.MemoryView"
    }

#line 587 "View.MemoryView"
  } /* exit inner scope */

#line 587 "View.MemoryView"
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 587, __pyx_L1_error)

#line 587 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_5);

#line 587 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 587 "View.MemoryView"
  __pyx_r = __pyx_t_5;

#line 587 "View.MemoryView"
  __pyx_t_5 = 0;

#line 587 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":585
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 */

#line 585 "View.MemoryView"


#line 585 "View.MemoryView"
  /* function exit code */

#line 585 "View.MemoryView"
  __pyx_L1_error:;

#line 585 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 585 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 585 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 585 "View.MemoryView"
  __pyx_r = NULL;

#line 585 "View.MemoryView"
  __pyx_L0:;

#line 585 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 585 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 585 "View.MemoryView"
  return __pyx_r;

#line 585 "View.MemoryView"
}

/* "View.MemoryView":589
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
 */

#line 589 "View.MemoryView"


#line 589 "View.MemoryView"
/* Python wrapper */

#line 589 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 589 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {

#line 589 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 589 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 589 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 589 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 589 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 589 "View.MemoryView"


#line 589 "View.MemoryView"
  /* function exit code */

#line 589 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 589 "View.MemoryView"
  return __pyx_r;

#line 589 "View.MemoryView"
}

#line 589 "View.MemoryView"


#line 589 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr1__pyx_v_stride
#line 589 "View.MemoryView"
;

#line 589 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 589 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 589 "View.MemoryView"
  int __pyx_t_1;

#line 589 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 589 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 589 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 589 "View.MemoryView"
  Py_ssize_t *__pyx_t_5;

#line 589 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 589 "View.MemoryView"
  int __pyx_lineno = 0;

#line 589 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 589 "View.MemoryView"
  int __pyx_clineno = 0;

#line 589 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
 */

#line 591 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->view.strides == NULL);

#line 591 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":593
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError, "Buffer view does not expose strides"             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */

#line 593 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Buffer_view_does_not_expose_stri, 0, 0);

#line 593 "View.MemoryView"
    __PYX_ERR(1, 593, __pyx_L1_error)

    /* "View.MemoryView":591
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
 */

#line 591 "View.MemoryView"
  }

  /* "View.MemoryView":595
 *             raise ValueError, "Buffer view does not expose strides"
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 595 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 595 "View.MemoryView"
  { /* enter inner scope */

#line 595 "View.MemoryView"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 595, __pyx_L1_error)

#line 595 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 595 "View.MemoryView"
    __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);

#line 595 "View.MemoryView"
    for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {

#line 595 "View.MemoryView"
      __pyx_t_3 = __pyx_t_5;

#line 595 "View.MemoryView"
      __pyx_8genexpr1__pyx_v_stride = (__pyx_t_3[0]);

#line 595 "View.MemoryView"
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_8genexpr1__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 595, __pyx_L1_error)

#line 595 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 595 "View.MemoryView"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 595, __pyx_L1_error)

#line 595 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 595 "View.MemoryView"
    }

#line 595 "View.MemoryView"
  } /* exit inner scope */

#line 595 "View.MemoryView"
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 595, __pyx_L1_error)

#line 595 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_6);

#line 595 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 595 "View.MemoryView"
  __pyx_r = __pyx_t_6;

#line 595 "View.MemoryView"
  __pyx_t_6 = 0;

#line 595 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":589
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
 */

#line 589 "View.MemoryView"


#line 589 "View.MemoryView"
  /* function exit code */

#line 589 "View.MemoryView"
  __pyx_L1_error:;

#line 589 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 589 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 589 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 589 "View.MemoryView"
  __pyx_r = NULL;

#line 589 "View.MemoryView"
  __pyx_L0:;

#line 589 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 589 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 589 "View.MemoryView"
  return __pyx_r;

#line 589 "View.MemoryView"
}

/* "View.MemoryView":597
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 */

#line 597 "View.MemoryView"


#line 597 "View.MemoryView"
/* Python wrapper */

#line 597 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 597 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {

#line 597 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 597 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 597 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 597 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 597 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 597 "View.MemoryView"


#line 597 "View.MemoryView"
  /* function exit code */

#line 597 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 597 "View.MemoryView"
  return __pyx_r;

#line 597 "View.MemoryView"
}

#line 597 "View.MemoryView"


#line 597 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr2__pyx_v_suboffset
#line 597 "View.MemoryView"
;

#line 597 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 597 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 597 "View.MemoryView"
  int __pyx_t_1;

#line 597 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 597 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 597 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 597 "View.MemoryView"
  Py_ssize_t *__pyx_t_5;

#line 597 "View.MemoryView"
  Py_ssize_t *__pyx_t_6;

#line 597 "View.MemoryView"
  int __pyx_lineno = 0;

#line 597 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 597 "View.MemoryView"
  int __pyx_clineno = 0;

#line 597 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":599
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */

#line 599 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->view.suboffsets == NULL);

#line 599 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":600
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */

#line 600 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 600 "View.MemoryView"
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 600, __pyx_L1_error)

#line 600 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 600 "View.MemoryView"
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 600, __pyx_L1_error)

#line 600 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 600 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 600 "View.MemoryView"
    __pyx_r = __pyx_t_3;

#line 600 "View.MemoryView"
    __pyx_t_3 = 0;

#line 600 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":599
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */

#line 599 "View.MemoryView"
  }

  /* "View.MemoryView":602
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 602 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 602 "View.MemoryView"
  { /* enter inner scope */

#line 602 "View.MemoryView"
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 602, __pyx_L1_error)

#line 602 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 602 "View.MemoryView"
    __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);

#line 602 "View.MemoryView"
    for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {

#line 602 "View.MemoryView"
      __pyx_t_4 = __pyx_t_6;

#line 602 "View.MemoryView"
      __pyx_8genexpr2__pyx_v_suboffset = (__pyx_t_4[0]);

#line 602 "View.MemoryView"
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_8genexpr2__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 602, __pyx_L1_error)

#line 602 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_2);

#line 602 "View.MemoryView"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 602, __pyx_L1_error)

#line 602 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 602 "View.MemoryView"
    }

#line 602 "View.MemoryView"
  } /* exit inner scope */

#line 602 "View.MemoryView"
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 602, __pyx_L1_error)

#line 602 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 602 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 602 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 602 "View.MemoryView"
  __pyx_t_2 = 0;

#line 602 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":597
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 */

#line 597 "View.MemoryView"


#line 597 "View.MemoryView"
  /* function exit code */

#line 597 "View.MemoryView"
  __pyx_L1_error:;

#line 597 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 597 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 597 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 597 "View.MemoryView"
  __pyx_r = NULL;

#line 597 "View.MemoryView"
  __pyx_L0:;

#line 597 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 597 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 597 "View.MemoryView"
  return __pyx_r;

#line 597 "View.MemoryView"
}

/* "View.MemoryView":604
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
 */

#line 604 "View.MemoryView"


#line 604 "View.MemoryView"
/* Python wrapper */

#line 604 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 604 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {

#line 604 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 604 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 604 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 604 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 604 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 604 "View.MemoryView"


#line 604 "View.MemoryView"
  /* function exit code */

#line 604 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 604 "View.MemoryView"
  return __pyx_r;

#line 604 "View.MemoryView"
}

#line 604 "View.MemoryView"


#line 604 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 604 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 604 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 604 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 604 "View.MemoryView"
  int __pyx_lineno = 0;

#line 604 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 604 "View.MemoryView"
  int __pyx_clineno = 0;

#line 604 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":606
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 606 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 606 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 606, __pyx_L1_error)

#line 606 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 606 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 606 "View.MemoryView"
  __pyx_t_1 = 0;

#line 606 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":604
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
 */

#line 604 "View.MemoryView"


#line 604 "View.MemoryView"
  /* function exit code */

#line 604 "View.MemoryView"
  __pyx_L1_error:;

#line 604 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 604 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 604 "View.MemoryView"
  __pyx_r = NULL;

#line 604 "View.MemoryView"
  __pyx_L0:;

#line 604 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 604 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 604 "View.MemoryView"
  return __pyx_r;

#line 604 "View.MemoryView"
}

/* "View.MemoryView":608
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
 */

#line 608 "View.MemoryView"


#line 608 "View.MemoryView"
/* Python wrapper */

#line 608 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 608 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {

#line 608 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 608 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 608 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 608 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 608 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 608 "View.MemoryView"


#line 608 "View.MemoryView"
  /* function exit code */

#line 608 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 608 "View.MemoryView"
  return __pyx_r;

#line 608 "View.MemoryView"
}

#line 608 "View.MemoryView"


#line 608 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 608 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 608 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 608 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 608 "View.MemoryView"
  int __pyx_lineno = 0;

#line 608 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 608 "View.MemoryView"
  int __pyx_clineno = 0;

#line 608 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":610
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 610 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 610 "View.MemoryView"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 610, __pyx_L1_error)

#line 610 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 610 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 610 "View.MemoryView"
  __pyx_t_1 = 0;

#line 610 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":608
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
 */

#line 608 "View.MemoryView"


#line 608 "View.MemoryView"
  /* function exit code */

#line 608 "View.MemoryView"
  __pyx_L1_error:;

#line 608 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 608 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 608 "View.MemoryView"
  __pyx_r = NULL;

#line 608 "View.MemoryView"
  __pyx_L0:;

#line 608 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 608 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 608 "View.MemoryView"
  return __pyx_r;

#line 608 "View.MemoryView"
}

/* "View.MemoryView":612
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
 */

#line 612 "View.MemoryView"


#line 612 "View.MemoryView"
/* Python wrapper */

#line 612 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 612 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {

#line 612 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 612 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 612 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 612 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 612 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 612 "View.MemoryView"


#line 612 "View.MemoryView"
  /* function exit code */

#line 612 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 612 "View.MemoryView"
  return __pyx_r;

#line 612 "View.MemoryView"
}

#line 612 "View.MemoryView"


#line 612 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 612 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 612 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 612 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 612 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 612 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 612 "View.MemoryView"
  int __pyx_lineno = 0;

#line 612 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 612 "View.MemoryView"
  int __pyx_clineno = 0;

#line 612 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":614
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 614 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 614 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 614 "View.MemoryView"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 614 "View.MemoryView"
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 614 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 614 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 614 "View.MemoryView"
  __pyx_r = __pyx_t_3;

#line 614 "View.MemoryView"
  __pyx_t_3 = 0;

#line 614 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":612
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
 */

#line 612 "View.MemoryView"


#line 612 "View.MemoryView"
  /* function exit code */

#line 612 "View.MemoryView"
  __pyx_L1_error:;

#line 612 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 612 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 612 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 612 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 612 "View.MemoryView"
  __pyx_r = NULL;

#line 612 "View.MemoryView"
  __pyx_L0:;

#line 612 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 612 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 612 "View.MemoryView"
  return __pyx_r;

#line 612 "View.MemoryView"
}

/* "View.MemoryView":616
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
 */

#line 616 "View.MemoryView"


#line 616 "View.MemoryView"
/* Python wrapper */

#line 616 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 616 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {

#line 616 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 616 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 616 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 616 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 616 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 616 "View.MemoryView"


#line 616 "View.MemoryView"
  /* function exit code */

#line 616 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 616 "View.MemoryView"
  return __pyx_r;

#line 616 "View.MemoryView"
}

#line 616 "View.MemoryView"


#line 616 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL
#line 616 "View.MemoryView"
;
  PyObject *__pyx_v_length = NULL
#line 616 "View.MemoryView"
;

#line 616 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 616 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 616 "View.MemoryView"
  int __pyx_t_1;

#line 616 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 616 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 616 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 616 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 616 "View.MemoryView"
  int __pyx_lineno = 0;

#line 616 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 616 "View.MemoryView"
  int __pyx_clineno = 0;

#line 616 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":618
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */

#line 618 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);

#line 618 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":619
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */

#line 619 "View.MemoryView"
    __Pyx_INCREF(__pyx_int_1);

#line 619 "View.MemoryView"
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":621
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */

#line 621 "View.MemoryView"
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);

#line 621 "View.MemoryView"
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {

#line 621 "View.MemoryView"
      __pyx_t_2 = __pyx_t_4;

#line 621 "View.MemoryView"
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_t_2[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 621, __pyx_L1_error)

#line 621 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 621 "View.MemoryView"
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_5);

#line 621 "View.MemoryView"
      __pyx_t_5 = 0;

      /* "View.MemoryView":622
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */

#line 622 "View.MemoryView"
      __pyx_t_5 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 622, __pyx_L1_error)

#line 622 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 622 "View.MemoryView"
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);

#line 622 "View.MemoryView"
      __pyx_t_5 = 0;

#line 622 "View.MemoryView"
    }

    /* "View.MemoryView":624
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */

#line 624 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_result);

#line 624 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_result);

#line 624 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_self->_size);

#line 624 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_self->_size);

#line 624 "View.MemoryView"
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":618
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */

#line 618 "View.MemoryView"
  }

  /* "View.MemoryView":626
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

#line 626 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 626 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->_size);

#line 626 "View.MemoryView"
  __pyx_r = __pyx_v_self->_size;

#line 626 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":616
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
 */

#line 616 "View.MemoryView"


#line 616 "View.MemoryView"
  /* function exit code */

#line 616 "View.MemoryView"
  __pyx_L1_error:;

#line 616 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 616 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 616 "View.MemoryView"
  __pyx_r = NULL;

#line 616 "View.MemoryView"
  __pyx_L0:;

#line 616 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_result);

#line 616 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_length);

#line 616 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 616 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 616 "View.MemoryView"
  return __pyx_r;

#line 616 "View.MemoryView"
}

/* "View.MemoryView":628
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

#line 628 "View.MemoryView"


#line 628 "View.MemoryView"
/* Python wrapper */

#line 628 "View.MemoryView"
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/

#line 628 "View.MemoryView"
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {

#line 628 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 628 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 628 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 628 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = 
#line 628 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 628 "View.MemoryView"


#line 628 "View.MemoryView"
  /* function exit code */

#line 628 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 628 "View.MemoryView"
  return __pyx_r;

#line 628 "View.MemoryView"
}

#line 628 "View.MemoryView"


#line 628 "View.MemoryView"
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 628 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 628 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 628 "View.MemoryView"
  int __pyx_t_1;

#line 628 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":629
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */

#line 629 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->view.ndim >= 1);

#line 629 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":630
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */

#line 630 "View.MemoryView"
    __pyx_r = (__pyx_v_self->view.shape[0]);

#line 630 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":629
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */

#line 629 "View.MemoryView"
  }

  /* "View.MemoryView":632
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

#line 632 "View.MemoryView"
  __pyx_r = 0;

#line 632 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":628
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

#line 628 "View.MemoryView"


#line 628 "View.MemoryView"
  /* function exit code */

#line 628 "View.MemoryView"
  __pyx_L0:;

#line 628 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 628 "View.MemoryView"
  return __pyx_r;

#line 628 "View.MemoryView"
}

/* "View.MemoryView":634
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

#line 634 "View.MemoryView"


#line 634 "View.MemoryView"
/* Python wrapper */

#line 634 "View.MemoryView"
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/

#line 634 "View.MemoryView"
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {

#line 634 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 634 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 634 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 634 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = 
#line 634 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 634 "View.MemoryView"


#line 634 "View.MemoryView"
  /* function exit code */

#line 634 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 634 "View.MemoryView"
  return __pyx_r;

#line 634 "View.MemoryView"
}

#line 634 "View.MemoryView"


#line 634 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 634 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 634 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 634 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 634 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 634 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 634 "View.MemoryView"
  int __pyx_lineno = 0;

#line 634 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 634 "View.MemoryView"
  int __pyx_clineno = 0;

#line 634 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":635
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */

#line 635 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 635 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 635, __pyx_L1_error)

#line 635 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 635 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 635, __pyx_L1_error)

#line 635 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 635 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 635 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 635, __pyx_L1_error)

#line 635 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 635 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":636
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */

#line 636 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 636, __pyx_L1_error)

#line 636 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":635
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */

#line 635 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 635, __pyx_L1_error)

#line 635 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 635 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 635 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 635 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 635 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);

#line 635 "View.MemoryView"
  __pyx_t_1 = 0;

#line 635 "View.MemoryView"
  __pyx_t_2 = 0;

#line 635 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 635, __pyx_L1_error)

#line 635 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 635 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 635 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 635 "View.MemoryView"
  __pyx_t_2 = 0;

#line 635 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":634
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

#line 634 "View.MemoryView"


#line 634 "View.MemoryView"
  /* function exit code */

#line 634 "View.MemoryView"
  __pyx_L1_error:;

#line 634 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 634 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 634 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 634 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 634 "View.MemoryView"
  __pyx_r = NULL;

#line 634 "View.MemoryView"
  __pyx_L0:;

#line 634 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 634 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 634 "View.MemoryView"
  return __pyx_r;

#line 634 "View.MemoryView"
}

/* "View.MemoryView":638
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

#line 638 "View.MemoryView"


#line 638 "View.MemoryView"
/* Python wrapper */

#line 638 "View.MemoryView"
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/

#line 638 "View.MemoryView"
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {

#line 638 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 638 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 638 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 638 "View.MemoryView"
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = 
#line 638 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 638 "View.MemoryView"


#line 638 "View.MemoryView"
  /* function exit code */

#line 638 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 638 "View.MemoryView"
  return __pyx_r;

#line 638 "View.MemoryView"
}

#line 638 "View.MemoryView"


#line 638 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 638 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 638 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 638 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 638 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 638 "View.MemoryView"
  int __pyx_lineno = 0;

#line 638 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 638 "View.MemoryView"
  int __pyx_clineno = 0;

#line 638 "View.MemoryView"
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":639
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 639 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 639 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 639, __pyx_L1_error)

#line 639 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 639 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 639, __pyx_L1_error)

#line 639 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 639 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 639 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 639, __pyx_L1_error)

#line 639 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 639 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 639 "View.MemoryView"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 639, __pyx_L1_error)

#line 639 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 639 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 639 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 639 "View.MemoryView"
  __pyx_t_1 = 0;

#line 639 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 639, __pyx_L1_error)

#line 639 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 639 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 639 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 639 "View.MemoryView"
  __pyx_t_1 = 0;

#line 639 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":638
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

#line 638 "View.MemoryView"


#line 638 "View.MemoryView"
  /* function exit code */

#line 638 "View.MemoryView"
  __pyx_L1_error:;

#line 638 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 638 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 638 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 638 "View.MemoryView"
  __pyx_r = NULL;

#line 638 "View.MemoryView"
  __pyx_L0:;

#line 638 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 638 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 638 "View.MemoryView"
  return __pyx_r;

#line 638 "View.MemoryView"
}

/* "View.MemoryView":642
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 642 "View.MemoryView"


#line 642 "View.MemoryView"
/* Python wrapper */

#line 642 "View.MemoryView"
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 642 "View.MemoryView"
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 642 "View.MemoryView"
  #if !CYTHON_METH_FASTCALL

#line 642 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 642 "View.MemoryView"
  #endif

#line 642 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 642 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 642 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 642 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);

#line 642 "View.MemoryView"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_c_contig", 1, 0, 0, __pyx_nargs); return NULL;
#line 642 "View.MemoryView"
}

#line 642 "View.MemoryView"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_c_contig", 0))) return NULL;
  __pyx_r = 
#line 642 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 642 "View.MemoryView"


#line 642 "View.MemoryView"
  /* function exit code */

#line 642 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 642 "View.MemoryView"
  return __pyx_r;

#line 642 "View.MemoryView"
}

#line 642 "View.MemoryView"


#line 642 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice
#line 642 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp
#line 642 "View.MemoryView"
;

#line 642 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 642 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 642 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 642 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 642 "View.MemoryView"
  int __pyx_lineno = 0;

#line 642 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 642 "View.MemoryView"
  int __pyx_clineno = 0;

#line 642 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":645
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */

#line 645 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 645, __pyx_L1_error)

#line 645 "View.MemoryView"
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":646
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */

#line 646 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 646 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 646, __pyx_L1_error)

#line 646 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 646 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 646 "View.MemoryView"
  __pyx_t_2 = 0;

#line 646 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":642
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 642 "View.MemoryView"


#line 642 "View.MemoryView"
  /* function exit code */

#line 642 "View.MemoryView"
  __pyx_L1_error:;

#line 642 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 642 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 642 "View.MemoryView"
  __pyx_r = NULL;

#line 642 "View.MemoryView"
  __pyx_L0:;

#line 642 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 642 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 642 "View.MemoryView"
  return __pyx_r;

#line 642 "View.MemoryView"
}

/* "View.MemoryView":648
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 648 "View.MemoryView"


#line 648 "View.MemoryView"
/* Python wrapper */

#line 648 "View.MemoryView"
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 648 "View.MemoryView"
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 648 "View.MemoryView"
  #if !CYTHON_METH_FASTCALL

#line 648 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 648 "View.MemoryView"
  #endif

#line 648 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 648 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 648 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 648 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);

#line 648 "View.MemoryView"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_f_contig", 1, 0, 0, __pyx_nargs); return NULL;
#line 648 "View.MemoryView"
}

#line 648 "View.MemoryView"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_f_contig", 0))) return NULL;
  __pyx_r = 
#line 648 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 648 "View.MemoryView"


#line 648 "View.MemoryView"
  /* function exit code */

#line 648 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 648 "View.MemoryView"
  return __pyx_r;

#line 648 "View.MemoryView"
}

#line 648 "View.MemoryView"


#line 648 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice
#line 648 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp
#line 648 "View.MemoryView"
;

#line 648 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 648 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 648 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 648 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 648 "View.MemoryView"
  int __pyx_lineno = 0;

#line 648 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 648 "View.MemoryView"
  int __pyx_clineno = 0;

#line 648 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":651
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */

#line 651 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 651, __pyx_L1_error)

#line 651 "View.MemoryView"
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":652
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */

#line 652 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 652 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 652, __pyx_L1_error)

#line 652 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 652 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 652 "View.MemoryView"
  __pyx_t_2 = 0;

#line 652 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":648
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 648 "View.MemoryView"


#line 648 "View.MemoryView"
  /* function exit code */

#line 648 "View.MemoryView"
  __pyx_L1_error:;

#line 648 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 648 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 648 "View.MemoryView"
  __pyx_r = NULL;

#line 648 "View.MemoryView"
  __pyx_L0:;

#line 648 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 648 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 648 "View.MemoryView"
  return __pyx_r;

#line 648 "View.MemoryView"
}

/* "View.MemoryView":654
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

#line 654 "View.MemoryView"


#line 654 "View.MemoryView"
/* Python wrapper */

#line 654 "View.MemoryView"
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 654 "View.MemoryView"
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 654 "View.MemoryView"
  #if !CYTHON_METH_FASTCALL

#line 654 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 654 "View.MemoryView"
  #endif

#line 654 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 654 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 654 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 654 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);

#line 654 "View.MemoryView"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL;
#line 654 "View.MemoryView"
}

#line 654 "View.MemoryView"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy", 0))) return NULL;
  __pyx_r = 
#line 654 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 654 "View.MemoryView"


#line 654 "View.MemoryView"
  /* function exit code */

#line 654 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 654 "View.MemoryView"
  return __pyx_r;

#line 654 "View.MemoryView"
}

#line 654 "View.MemoryView"


#line 654 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice
#line 654 "View.MemoryView"
;
  int __pyx_v_flags
#line 654 "View.MemoryView"
;

#line 654 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 654 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 654 "View.MemoryView"
  __Pyx_memviewslice __pyx_t_1;

#line 654 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 654 "View.MemoryView"
  int __pyx_lineno = 0;

#line 654 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 654 "View.MemoryView"
  int __pyx_clineno = 0;

#line 654 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":656
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */

#line 656 "View.MemoryView"
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":658
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */

#line 658 "View.MemoryView"
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":659
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */

#line 659 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 659, __pyx_L1_error)

#line 659 "View.MemoryView"
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":664
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */

#line 664 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 664 "View.MemoryView"
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 664, __pyx_L1_error)

#line 664 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 664 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 664 "View.MemoryView"
  __pyx_t_2 = 0;

#line 664 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":654
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

#line 654 "View.MemoryView"


#line 654 "View.MemoryView"
  /* function exit code */

#line 654 "View.MemoryView"
  __pyx_L1_error:;

#line 654 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 654 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 654 "View.MemoryView"
  __pyx_r = NULL;

#line 654 "View.MemoryView"
  __pyx_L0:;

#line 654 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 654 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 654 "View.MemoryView"
  return __pyx_r;

#line 654 "View.MemoryView"
}

/* "View.MemoryView":666
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

#line 666 "View.MemoryView"


#line 666 "View.MemoryView"
/* Python wrapper */

#line 666 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 666 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 666 "View.MemoryView"
  #if !CYTHON_METH_FASTCALL

#line 666 "View.MemoryView"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 666 "View.MemoryView"
  #endif

#line 666 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 666 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 666 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 666 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);

#line 666 "View.MemoryView"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy_fortran", 1, 0, 0, __pyx_nargs); return NULL;
#line 666 "View.MemoryView"
}

#line 666 "View.MemoryView"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy_fortran", 0))) return NULL;
  __pyx_r = 
#line 666 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 666 "View.MemoryView"


#line 666 "View.MemoryView"
  /* function exit code */

#line 666 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 666 "View.MemoryView"
  return __pyx_r;

#line 666 "View.MemoryView"
}

#line 666 "View.MemoryView"


#line 666 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src
#line 666 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_dst
#line 666 "View.MemoryView"
;
  int __pyx_v_flags
#line 666 "View.MemoryView"
;

#line 666 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 666 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 666 "View.MemoryView"
  __Pyx_memviewslice __pyx_t_1;

#line 666 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 666 "View.MemoryView"
  int __pyx_lineno = 0;

#line 666 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 666 "View.MemoryView"
  int __pyx_clineno = 0;

#line 666 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":668
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */

#line 668 "View.MemoryView"
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":670
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */

#line 670 "View.MemoryView"
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":671
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */

#line 671 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 671, __pyx_L1_error)

#line 671 "View.MemoryView"
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":676
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 676 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 676 "View.MemoryView"
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 676, __pyx_L1_error)

#line 676 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 676 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 676 "View.MemoryView"
  __pyx_t_2 = 0;

#line 676 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":666
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

#line 666 "View.MemoryView"


#line 666 "View.MemoryView"
  /* function exit code */

#line 666 "View.MemoryView"
  __pyx_L1_error:;

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 666 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 666 "View.MemoryView"
  __pyx_r = NULL;

#line 666 "View.MemoryView"
  __pyx_L0:;

#line 666 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 666 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 666 "View.MemoryView"
  return __pyx_r;

#line 666 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 1 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 1 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
  #endif

#line 1 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);

#line 1 "(tree fragment)"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;
#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0
#line 3 "(tree fragment)"
;

#line 3 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 3 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 3 "(tree fragment)"
  #endif

#line 3 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);

#line 3 "(tree fragment)"
  {

#line 3 "(tree fragment)"
    #if CYTHON_USE_MODULE_STATE

#line 3 "(tree fragment)"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #else

#line 3 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #endif

#line 3 "(tree fragment)"
    PyObject* values[1] = {0};

#line 3 "(tree fragment)"
    if (__pyx_kwds) {

#line 3 "(tree fragment)"
      Py_ssize_t kw_args;

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {
        case  1: 
#line 3 "(tree fragment)"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 3 "(tree fragment)"
break;
        default: 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {

#line 3 "(tree fragment)"
        case  0:

#line 3 "(tree fragment)"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 3 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 3 "(tree fragment)"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 3 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
    } else if (unlikely(__pyx_nargs != 1)) {

#line 3 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
    } else {

#line 3 "(tree fragment)"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
    }

#line 3 "(tree fragment)"
    __pyx_v___pyx_state = values[0];

#line 3 "(tree fragment)"
  }

#line 3 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 3 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); 
#line 3 "(tree fragment)"
__PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
  __pyx_L3_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return NULL;

#line 3 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v___pyx_state);

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":680
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

#line 680 "View.MemoryView"


#line 680 "View.MemoryView"
static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0
#line 680 "View.MemoryView"
;

#line 680 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 680 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 680 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 680 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 680 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 680 "View.MemoryView"
  int __pyx_lineno = 0;

#line 680 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 680 "View.MemoryView"
  int __pyx_clineno = 0;

#line 680 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":681
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */

#line 681 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 681, __pyx_L1_error)

#line 681 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 681 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 681, __pyx_L1_error)

#line 681 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 681 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 681, __pyx_L1_error)

#line 681 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 681 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_o);

#line 681 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_o);

#line 681 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);

#line 681 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 681 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 681 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 681 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);

#line 681 "View.MemoryView"
  __pyx_t_1 = 0;

#line 681 "View.MemoryView"
  __pyx_t_2 = 0;

#line 681 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 681, __pyx_L1_error)

#line 681 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 681 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 681 "View.MemoryView"
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);

#line 681 "View.MemoryView"
  __pyx_t_2 = 0;

  /* "View.MemoryView":682
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */

#line 682 "View.MemoryView"
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":683
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */

#line 683 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 683 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_result);

#line 683 "View.MemoryView"
  __pyx_r = ((PyObject *)__pyx_v_result);

#line 683 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":680
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

#line 680 "View.MemoryView"


#line 680 "View.MemoryView"
  /* function exit code */

#line 680 "View.MemoryView"
  __pyx_L1_error:;

#line 680 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 680 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 680 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 680 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 680 "View.MemoryView"
  __pyx_r = 0;

#line 680 "View.MemoryView"
  __pyx_L0:;

#line 680 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 680 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 680 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 680 "View.MemoryView"
  return __pyx_r;

#line 680 "View.MemoryView"
}

/* "View.MemoryView":686
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

#line 686 "View.MemoryView"


#line 686 "View.MemoryView"
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {

#line 686 "View.MemoryView"
  int __pyx_r;

#line 686 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 686 "View.MemoryView"
  int __pyx_t_1;

#line 686 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":687
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */

#line 687 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 

#line 687 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 687 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":686
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

#line 686 "View.MemoryView"


#line 686 "View.MemoryView"
  /* function exit code */

#line 686 "View.MemoryView"
  __pyx_L0:;

#line 686 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 686 "View.MemoryView"
  return __pyx_r;

#line 686 "View.MemoryView"
}

/* "View.MemoryView":689
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

#line 689 "View.MemoryView"


#line 689 "View.MemoryView"
static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_idx
#line 689 "View.MemoryView"
;
  PyObject *__pyx_v_tup = NULL
#line 689 "View.MemoryView"
;
  PyObject *__pyx_v_result = NULL
#line 689 "View.MemoryView"
;
  int __pyx_v_have_slices
#line 689 "View.MemoryView"
;
  int __pyx_v_seen_ellipsis
#line 689 "View.MemoryView"
;
  PyObject *__pyx_v_item = NULL
#line 689 "View.MemoryView"
;
  Py_ssize_t __pyx_v_nslices
#line 689 "View.MemoryView"
;

#line 689 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 689 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 689 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 689 "View.MemoryView"
  int __pyx_t_2;

#line 689 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 689 "View.MemoryView"
  Py_ssize_t __pyx_t_4;

#line 689 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 689 "View.MemoryView"
  Py_UCS4 __pyx_t_6;

#line 689 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 689 "View.MemoryView"
  int __pyx_lineno = 0;

#line 689 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 689 "View.MemoryView"
  int __pyx_clineno = 0;

#line 689 "View.MemoryView"
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":695
 *     """
 *     cdef Py_ssize_t idx
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)             # <<<<<<<<<<<<<<
 * 
 *     result = [slice(None)] * ndim
 */

#line 695 "View.MemoryView"
  __pyx_t_2 = PyTuple_Check(__pyx_v_index); 

#line 695 "View.MemoryView"
  if (__pyx_t_2) {

#line 695 "View.MemoryView"
    __Pyx_INCREF(((PyObject*)__pyx_v_index));

#line 695 "View.MemoryView"
    __pyx_t_1 = __pyx_v_index;

#line 695 "View.MemoryView"
  } else {

#line 695 "View.MemoryView"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 695, __pyx_L1_error)

#line 695 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 695 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_index);

#line 695 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_index);

#line 695 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);

#line 695 "View.MemoryView"
    __pyx_t_1 = __pyx_t_3;

#line 695 "View.MemoryView"
    __pyx_t_3 = 0;

#line 695 "View.MemoryView"
  }

#line 695 "View.MemoryView"
  __pyx_v_tup = ((PyObject*)__pyx_t_1);

#line 695 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":697
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */

#line 697 "View.MemoryView"
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_ndim<0) ? 0:__pyx_v_ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)

#line 697 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 697 "View.MemoryView"
  { Py_ssize_t __pyx_temp;

#line 697 "View.MemoryView"
    for (__pyx_temp=0; __pyx_temp < __pyx_v_ndim; __pyx_temp++) {

#line 697 "View.MemoryView"
      __Pyx_INCREF(__pyx_slice__5);

#line 697 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_slice__5);

#line 697 "View.MemoryView"
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_slice__5);

#line 697 "View.MemoryView"
    }

#line 697 "View.MemoryView"
  }

#line 697 "View.MemoryView"
  __pyx_v_result = ((PyObject*)__pyx_t_1);

#line 697 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":698
 * 
 *     result = [slice(None)] * ndim
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     idx = 0
 */

#line 698 "View.MemoryView"
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":699
 *     result = [slice(None)] * ndim
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     idx = 0
 *     for item in tup:
 */

#line 699 "View.MemoryView"
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":700
 *     have_slices = False
 *     seen_ellipsis = False
 *     idx = 0             # <<<<<<<<<<<<<<
 *     for item in tup:
 *         if item is Ellipsis:
 */

#line 700 "View.MemoryView"
  __pyx_v_idx = 0;

  /* "View.MemoryView":701
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */

#line 701 "View.MemoryView"
  if (unlikely(__pyx_v_tup == Py_None)) {

#line 701 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 701 "View.MemoryView"
    __PYX_ERR(1, 701, __pyx_L1_error)

#line 701 "View.MemoryView"
  }

#line 701 "View.MemoryView"
  __pyx_t_1 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;

#line 701 "View.MemoryView"
  for (;;) {

#line 701 "View.MemoryView"
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 701 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 701 "View.MemoryView"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(1, 701, __pyx_L1_error)

#line 701 "View.MemoryView"
    #else

#line 701 "View.MemoryView"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 701, __pyx_L1_error)

#line 701 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 701 "View.MemoryView"
    #endif

#line 701 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_3);

#line 701 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":702
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 */

#line 702 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);

#line 702 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":703
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 */

#line 703 "View.MemoryView"
      __pyx_t_2 = (!__pyx_v_seen_ellipsis);

#line 703 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":704
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             have_slices = True
 */

#line 704 "View.MemoryView"
        if (unlikely(__pyx_v_tup == Py_None)) {

#line 704 "View.MemoryView"
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 704 "View.MemoryView"
          __PYX_ERR(1, 704, __pyx_L1_error)

#line 704 "View.MemoryView"
        }

#line 704 "View.MemoryView"
        __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 704, __pyx_L1_error)

#line 704 "View.MemoryView"
        __pyx_v_idx = (__pyx_v_idx + (__pyx_v_ndim - __pyx_t_5));

        /* "View.MemoryView":705
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */

#line 705 "View.MemoryView"
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":703
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 */

#line 703 "View.MemoryView"
      }

      /* "View.MemoryView":706
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(item, slice):
 */

#line 706 "View.MemoryView"
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":702
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 */

#line 702 "View.MemoryView"
      goto __pyx_L5;

#line 702 "View.MemoryView"
    }

    /* "View.MemoryView":708
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 */

#line 708 "View.MemoryView"
    /*else*/ {

#line 708 "View.MemoryView"
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 

#line 708 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":709
 *         else:
 *             if isinstance(item, slice):
 *                 have_slices = True             # <<<<<<<<<<<<<<
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 */

#line 709 "View.MemoryView"
        __pyx_v_have_slices = 1;

        /* "View.MemoryView":708
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 */

#line 708 "View.MemoryView"
        goto __pyx_L7;

#line 708 "View.MemoryView"
      }

      /* "View.MemoryView":710
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 */

#line 710 "View.MemoryView"
      __pyx_t_2 = (!(PyIndex_Check(__pyx_v_item) != 0));

#line 710 "View.MemoryView"
      if (unlikely(__pyx_t_2)) {

        /* "View.MemoryView":711
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"             # <<<<<<<<<<<<<<
 *             result[idx] = item
 *         idx += 1
 */

#line 711 "View.MemoryView"
        __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 711, __pyx_L1_error)

#line 711 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_3);

#line 711 "View.MemoryView"
        __pyx_t_5 = 0;

#line 711 "View.MemoryView"
        __pyx_t_6 = 127;

#line 711 "View.MemoryView"
        __Pyx_INCREF(__pyx_kp_u_Cannot_index_with_type);

#line 711 "View.MemoryView"
        __pyx_t_5 += 24;

#line 711 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_kp_u_Cannot_index_with_type);

#line 711 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Cannot_index_with_type);

#line 711 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_item)), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 711, __pyx_L1_error)

#line 711 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 711 "View.MemoryView"
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;

#line 711 "View.MemoryView"
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);

#line 711 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_7);

#line 711 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);

#line 711 "View.MemoryView"
        __pyx_t_7 = 0;

#line 711 "View.MemoryView"
        __Pyx_INCREF(__pyx_kp_u__6);

#line 711 "View.MemoryView"
        __pyx_t_5 += 1;

#line 711 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_kp_u__6);

#line 711 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__6);

#line 711 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 711, __pyx_L1_error)

#line 711 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 711 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 711 "View.MemoryView"
        __Pyx_Raise(__pyx_builtin_TypeError, __pyx_t_7, 0, 0);

#line 711 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 711 "View.MemoryView"
        __PYX_ERR(1, 711, __pyx_L1_error)

        /* "View.MemoryView":710
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 */

#line 710 "View.MemoryView"
      }

#line 710 "View.MemoryView"
      __pyx_L7:;

      /* "View.MemoryView":712
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item             # <<<<<<<<<<<<<<
 *         idx += 1
 * 
 */

#line 712 "View.MemoryView"
      if (unlikely((__Pyx_SetItemInt(__pyx_v_result, __pyx_v_idx, __pyx_v_item, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0))) __PYX_ERR(1, 712, __pyx_L1_error)

#line 712 "View.MemoryView"
    }

#line 712 "View.MemoryView"
    __pyx_L5:;

    /* "View.MemoryView":713
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 *         idx += 1             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - idx
 */

#line 713 "View.MemoryView"
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "View.MemoryView":701
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */

#line 701 "View.MemoryView"
  }

#line 701 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":715
 *         idx += 1
 * 
 *     nslices = ndim - idx             # <<<<<<<<<<<<<<
 *     return have_slices or nslices, tuple(result)
 * 
 */

#line 715 "View.MemoryView"
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_v_idx);

  /* "View.MemoryView":716
 * 
 *     nslices = ndim - idx
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */

#line 716 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 716 "View.MemoryView"
  if (!__pyx_v_have_slices) {

#line 716 "View.MemoryView"
  } else {

#line 716 "View.MemoryView"
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 716, __pyx_L1_error)

#line 716 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_7);

#line 716 "View.MemoryView"
    __pyx_t_1 = __pyx_t_7;

#line 716 "View.MemoryView"
    __pyx_t_7 = 0;

#line 716 "View.MemoryView"
    goto __pyx_L8_bool_binop_done;

#line 716 "View.MemoryView"
  }

#line 716 "View.MemoryView"
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 716, __pyx_L1_error)

#line 716 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 716 "View.MemoryView"
  __pyx_t_1 = __pyx_t_7;

#line 716 "View.MemoryView"
  __pyx_t_7 = 0;

#line 716 "View.MemoryView"
  __pyx_L8_bool_binop_done:;

#line 716 "View.MemoryView"
  __pyx_t_7 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 716, __pyx_L1_error)

#line 716 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 716 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 716, __pyx_L1_error)

#line 716 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 716 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 716 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 716 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_7);

#line 716 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);

#line 716 "View.MemoryView"
  __pyx_t_1 = 0;

#line 716 "View.MemoryView"
  __pyx_t_7 = 0;

#line 716 "View.MemoryView"
  __pyx_r = ((PyObject*)__pyx_t_3);

#line 716 "View.MemoryView"
  __pyx_t_3 = 0;

#line 716 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":689
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

#line 689 "View.MemoryView"


#line 689 "View.MemoryView"
  /* function exit code */

#line 689 "View.MemoryView"
  __pyx_L1_error:;

#line 689 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 689 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 689 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_7);

#line 689 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 689 "View.MemoryView"
  __pyx_r = 0;

#line 689 "View.MemoryView"
  __pyx_L0:;

#line 689 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_tup);

#line 689 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_result);

#line 689 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_item);

#line 689 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 689 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 689 "View.MemoryView"
  return __pyx_r;

#line 689 "View.MemoryView"
}

/* "View.MemoryView":718
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

#line 718 "View.MemoryView"


#line 718 "View.MemoryView"
static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset
#line 718 "View.MemoryView"
;

#line 718 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 718 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 718 "View.MemoryView"
  Py_ssize_t *__pyx_t_1;

#line 718 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 718 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 718 "View.MemoryView"
  int __pyx_t_4;

#line 718 "View.MemoryView"
  int __pyx_lineno = 0;

#line 718 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 718 "View.MemoryView"
  int __pyx_clineno = 0;

#line 718 "View.MemoryView"
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":719
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
 */

#line 719 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);

#line 719 "View.MemoryView"
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {

#line 719 "View.MemoryView"
    __pyx_t_1 = __pyx_t_3;

#line 719 "View.MemoryView"
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":720
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 * 
 */

#line 720 "View.MemoryView"
    __pyx_t_4 = (__pyx_v_suboffset >= 0);

#line 720 "View.MemoryView"
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":721
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 721 "View.MemoryView"
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Indirect_dimensions_not_supporte, 0, 0);

#line 721 "View.MemoryView"
      __PYX_ERR(1, 721, __pyx_L1_error)

      /* "View.MemoryView":720
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 * 
 */

#line 720 "View.MemoryView"
    }

#line 720 "View.MemoryView"
  }

  /* "View.MemoryView":718
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

#line 718 "View.MemoryView"


#line 718 "View.MemoryView"
  /* function exit code */

#line 718 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 718 "View.MemoryView"
  goto __pyx_L0;

#line 718 "View.MemoryView"
  __pyx_L1_error:;

#line 718 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 718 "View.MemoryView"
  __pyx_r = 0;

#line 718 "View.MemoryView"
  __pyx_L0:;

#line 718 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 718 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 718 "View.MemoryView"
  return __pyx_r;

#line 718 "View.MemoryView"
}

/* "View.MemoryView":728
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

#line 728 "View.MemoryView"


#line 728 "View.MemoryView"
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim
#line 728 "View.MemoryView"
;
  int __pyx_v_suboffset_dim
#line 728 "View.MemoryView"
;
  int __pyx_v_dim
#line 728 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_src
#line 728 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_dst
#line 728 "View.MemoryView"
;
  __Pyx_memviewslice *__pyx_v_p_src
#line 728 "View.MemoryView"
;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0
#line 728 "View.MemoryView"
;
  __Pyx_memviewslice *__pyx_v_p_dst
#line 728 "View.MemoryView"
;
  int *__pyx_v_p_suboffset_dim
#line 728 "View.MemoryView"
;
  Py_ssize_t __pyx_v_start
#line 728 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stop
#line 728 "View.MemoryView"
;
  Py_ssize_t __pyx_v_step
#line 728 "View.MemoryView"
;
  Py_ssize_t __pyx_v_cindex
#line 728 "View.MemoryView"
;
  int __pyx_v_have_start
#line 728 "View.MemoryView"
;
  int __pyx_v_have_stop
#line 728 "View.MemoryView"
;
  int __pyx_v_have_step
#line 728 "View.MemoryView"
;
  PyObject *__pyx_v_index = NULL
#line 728 "View.MemoryView"
;

#line 728 "View.MemoryView"
  struct __pyx_memoryview_obj *__pyx_r = NULL;

#line 728 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 728 "View.MemoryView"
  int __pyx_t_1;

#line 728 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 728 "View.MemoryView"
  struct __pyx_memoryview_obj *__pyx_t_3;

#line 728 "View.MemoryView"
  char *__pyx_t_4;

#line 728 "View.MemoryView"
  int __pyx_t_5;

#line 728 "View.MemoryView"
  Py_ssize_t __pyx_t_6;

#line 728 "View.MemoryView"
  PyObject *(*__pyx_t_7)(PyObject *);

#line 728 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 728 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 728 "View.MemoryView"
  int __pyx_t_10;

#line 728 "View.MemoryView"
  Py_ssize_t __pyx_t_11;

#line 728 "View.MemoryView"
  int __pyx_lineno = 0;

#line 728 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 728 "View.MemoryView"
  int __pyx_clineno = 0;

#line 728 "View.MemoryView"
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":729
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */

#line 729 "View.MemoryView"
  __pyx_v_new_ndim = 0;

#line 729 "View.MemoryView"
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":736
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */

#line 736 "View.MemoryView"
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":740
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */

#line 740 "View.MemoryView"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 740 "View.MemoryView"
  if (unlikely(!Py_OptimizeFlag)) {

#line 740 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_memview->view.ndim > 0);

#line 740 "View.MemoryView"
    if (unlikely(!__pyx_t_1)) {

#line 740 "View.MemoryView"
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);

#line 740 "View.MemoryView"
      __PYX_ERR(1, 740, __pyx_L1_error)

#line 740 "View.MemoryView"
    }

#line 740 "View.MemoryView"
  }

#line 740 "View.MemoryView"
  #else

#line 740 "View.MemoryView"
  if ((1)); else __PYX_ERR(1, 740, __pyx_L1_error)

#line 740 "View.MemoryView"
  #endif

  /* "View.MemoryView":742
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */

#line 742 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 742 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":743
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */

#line 743 "View.MemoryView"
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 743, __pyx_L1_error)

#line 743 "View.MemoryView"
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);

#line 743 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_2);

#line 743 "View.MemoryView"
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);

#line 743 "View.MemoryView"
    __pyx_t_2 = 0;

    /* "View.MemoryView":744
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */

#line 744 "View.MemoryView"
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":742
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */

#line 742 "View.MemoryView"
    goto __pyx_L3;

#line 742 "View.MemoryView"
  }

  /* "View.MemoryView":746
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */

#line 746 "View.MemoryView"
  /*else*/ {

#line 746 "View.MemoryView"
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":747
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 747 "View.MemoryView"
    __pyx_v_p_src = (&__pyx_v_src);

#line 747 "View.MemoryView"
  }

#line 747 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":753
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */

#line 753 "View.MemoryView"
  __pyx_t_3 = __pyx_v_p_src->memview;

#line 753 "View.MemoryView"
  __pyx_v_dst.memview = __pyx_t_3;

  /* "View.MemoryView":754
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 754 "View.MemoryView"
  __pyx_t_4 = __pyx_v_p_src->data;

#line 754 "View.MemoryView"
  __pyx_v_dst.data = __pyx_t_4;

  /* "View.MemoryView":759
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step, cindex
 */

#line 759 "View.MemoryView"
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":760
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step, cindex
 *     cdef bint have_start, have_stop, have_step
 */

#line 760 "View.MemoryView"
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":764
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
 */

#line 764 "View.MemoryView"
  __pyx_t_5 = 0;

#line 764 "View.MemoryView"
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {

#line 764 "View.MemoryView"
    __pyx_t_2 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;

#line 764 "View.MemoryView"
    __pyx_t_7 = NULL;

#line 764 "View.MemoryView"
  } else {
    __pyx_t_6 = -1; 
#line 764 "View.MemoryView"
__pyx_t_2 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 764 "View.MemoryView"
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
  }

#line 764 "View.MemoryView"
  for (;;) {

#line 764 "View.MemoryView"
    if (likely(!__pyx_t_7)) {

#line 764 "View.MemoryView"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 764 "View.MemoryView"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 764 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 764 "View.MemoryView"
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
        #else

#line 764 "View.MemoryView"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_8);

#line 764 "View.MemoryView"
        #endif

#line 764 "View.MemoryView"
      } else {

#line 764 "View.MemoryView"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 764 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 764 "View.MemoryView"
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
        #else

#line 764 "View.MemoryView"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_8);

#line 764 "View.MemoryView"
        #endif

#line 764 "View.MemoryView"
      }
    } else 
#line 764 "View.MemoryView"
{

#line 764 "View.MemoryView"
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);

#line 764 "View.MemoryView"
      if (unlikely(!__pyx_t_8)) {

#line 764 "View.MemoryView"
        PyObject* exc_type = PyErr_Occurred();

#line 764 "View.MemoryView"
        if (exc_type) {

#line 764 "View.MemoryView"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 764 "View.MemoryView"
          else __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
        }

#line 764 "View.MemoryView"
        break;

#line 764 "View.MemoryView"
      }

#line 764 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 764 "View.MemoryView"
    }

#line 764 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_8);

#line 764 "View.MemoryView"
    __pyx_t_8 = 0;

#line 764 "View.MemoryView"
    __pyx_v_dim = __pyx_t_5;

#line 764 "View.MemoryView"
    __pyx_t_5 = (__pyx_t_5 + 1);

    /* "View.MemoryView":765
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
 */

#line 765 "View.MemoryView"
    __pyx_t_1 = (PyIndex_Check(__pyx_v_index) != 0);

#line 765 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":766
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             cindex = index             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */

#line 766 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 766, __pyx_L1_error)

#line 766 "View.MemoryView"
      __pyx_v_cindex = __pyx_t_9;

      /* "View.MemoryView":767
 *         if PyIndex_Check(index):
 *             cindex = index
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */

#line 767 "View.MemoryView"
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_cindex, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 767, __pyx_L1_error)

      /* "View.MemoryView":765
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
 */

#line 765 "View.MemoryView"
      goto __pyx_L6;

#line 765 "View.MemoryView"
    }

    /* "View.MemoryView":773
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */

#line 773 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_index == Py_None);

#line 773 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":774
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */

#line 774 "View.MemoryView"
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":775
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */

#line 775 "View.MemoryView"
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":776
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */

#line 776 "View.MemoryView"
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":777
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */

#line 777 "View.MemoryView"
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":773
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */

#line 773 "View.MemoryView"
      goto __pyx_L6;

#line 773 "View.MemoryView"
    }

    /* "View.MemoryView":779
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */

#line 779 "View.MemoryView"
    /*else*/ {

#line 779 "View.MemoryView"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 779, __pyx_L1_error)

#line 779 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 779 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 779, __pyx_L1_error)

#line 779 "View.MemoryView"
      if (!__pyx_t_1) {

#line 779 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 779 "View.MemoryView"
      } else {

#line 779 "View.MemoryView"
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 779, __pyx_L1_error)

#line 779 "View.MemoryView"
        __pyx_t_9 = __pyx_t_11;

#line 779 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 779 "View.MemoryView"
        goto __pyx_L7_bool_binop_done;

#line 779 "View.MemoryView"
      }

#line 779 "View.MemoryView"
      __pyx_t_9 = 0;

#line 779 "View.MemoryView"
      __pyx_L7_bool_binop_done:;

#line 779 "View.MemoryView"
      __pyx_v_start = __pyx_t_9;

      /* "View.MemoryView":780
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */

#line 780 "View.MemoryView"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 780, __pyx_L1_error)

#line 780 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 780 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 780, __pyx_L1_error)

#line 780 "View.MemoryView"
      if (!__pyx_t_1) {

#line 780 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 780 "View.MemoryView"
      } else {

#line 780 "View.MemoryView"
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 780, __pyx_L1_error)

#line 780 "View.MemoryView"
        __pyx_t_9 = __pyx_t_11;

#line 780 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 780 "View.MemoryView"
        goto __pyx_L9_bool_binop_done;

#line 780 "View.MemoryView"
      }

#line 780 "View.MemoryView"
      __pyx_t_9 = 0;

#line 780 "View.MemoryView"
      __pyx_L9_bool_binop_done:;

#line 780 "View.MemoryView"
      __pyx_v_stop = __pyx_t_9;

      /* "View.MemoryView":781
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */

#line 781 "View.MemoryView"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 781, __pyx_L1_error)

#line 781 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 781 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 781, __pyx_L1_error)

#line 781 "View.MemoryView"
      if (!__pyx_t_1) {

#line 781 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 781 "View.MemoryView"
      } else {

#line 781 "View.MemoryView"
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 781, __pyx_L1_error)

#line 781 "View.MemoryView"
        __pyx_t_9 = __pyx_t_11;

#line 781 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 781 "View.MemoryView"
        goto __pyx_L11_bool_binop_done;

#line 781 "View.MemoryView"
      }

#line 781 "View.MemoryView"
      __pyx_t_9 = 0;

#line 781 "View.MemoryView"
      __pyx_L11_bool_binop_done:;

#line 781 "View.MemoryView"
      __pyx_v_step = __pyx_t_9;

      /* "View.MemoryView":783
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */

#line 783 "View.MemoryView"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 783, __pyx_L1_error)

#line 783 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 783 "View.MemoryView"
      __pyx_t_1 = (__pyx_t_8 != Py_None);

#line 783 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 783 "View.MemoryView"
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":784
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */

#line 784 "View.MemoryView"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 784, __pyx_L1_error)

#line 784 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 784 "View.MemoryView"
      __pyx_t_1 = (__pyx_t_8 != Py_None);

#line 784 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 784 "View.MemoryView"
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":785
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */

#line 785 "View.MemoryView"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 785, __pyx_L1_error)

#line 785 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 785 "View.MemoryView"
      __pyx_t_1 = (__pyx_t_8 != Py_None);

#line 785 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 785 "View.MemoryView"
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":787
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */

#line 787 "View.MemoryView"
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 787, __pyx_L1_error)

      /* "View.MemoryView":793
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */

#line 793 "View.MemoryView"
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

#line 793 "View.MemoryView"
    }

#line 793 "View.MemoryView"
    __pyx_L6:;

    /* "View.MemoryView":764
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
 */

#line 764 "View.MemoryView"
  }

#line 764 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":795
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */

#line 795 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 795 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":796
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */

#line 796 "View.MemoryView"
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":797
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */

#line 797 "View.MemoryView"
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 797, __pyx_L1_error) }

    /* "View.MemoryView":798
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */

#line 798 "View.MemoryView"
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 798, __pyx_L1_error) }

    /* "View.MemoryView":796
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */

#line 796 "View.MemoryView"
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 796, __pyx_L1_error)

#line 796 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 796 "View.MemoryView"
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_memoryview_type))))) __PYX_ERR(1, 796, __pyx_L1_error)

#line 796 "View.MemoryView"
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);

#line 796 "View.MemoryView"
    __pyx_t_2 = 0;

#line 796 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":795
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */

#line 795 "View.MemoryView"
  }

  /* "View.MemoryView":801
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */

#line 801 "View.MemoryView"
  /*else*/ {

#line 801 "View.MemoryView"
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":802
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 802 "View.MemoryView"
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 801, __pyx_L1_error)

#line 802 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

    /* "View.MemoryView":801
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */

#line 801 "View.MemoryView"
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_memoryview_type))))) __PYX_ERR(1, 801, __pyx_L1_error)

#line 801 "View.MemoryView"
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);

#line 801 "View.MemoryView"
    __pyx_t_2 = 0;

#line 801 "View.MemoryView"
    goto __pyx_L0;

#line 801 "View.MemoryView"
  }

  /* "View.MemoryView":728
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

#line 728 "View.MemoryView"


#line 728 "View.MemoryView"
  /* function exit code */

#line 728 "View.MemoryView"
  __pyx_L1_error:;

#line 728 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 728 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_8);

#line 728 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 728 "View.MemoryView"
  __pyx_r = 0;

#line 728 "View.MemoryView"
  __pyx_L0:;

#line 728 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);

#line 728 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_index);

#line 728 "View.MemoryView"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 728 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 728 "View.MemoryView"
  return __pyx_r;

#line 728 "View.MemoryView"
}

/* "View.MemoryView":810
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

#line 810 "View.MemoryView"


#line 810 "View.MemoryView"
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape
#line 810 "View.MemoryView"
;
  int __pyx_v_negative_step
#line 810 "View.MemoryView"
;

#line 810 "View.MemoryView"
  int __pyx_r;

#line 810 "View.MemoryView"
  int __pyx_t_1;

#line 810 "View.MemoryView"
  int __pyx_t_2;

#line 810 "View.MemoryView"
  int __pyx_t_3;

#line 810 "View.MemoryView"
  int __pyx_lineno = 0;

#line 810 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 810 "View.MemoryView"
  int __pyx_clineno = 0;

#line 810 "View.MemoryView"
  #ifdef WITH_THREAD

#line 810 "View.MemoryView"
  PyGILState_STATE __pyx_gilstate_save;

#line 810 "View.MemoryView"
  #endif

  /* "View.MemoryView":830
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */

#line 830 "View.MemoryView"
  __pyx_t_1 = (!__pyx_v_is_slice);

#line 830 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":832
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */

#line 832 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_start < 0);

#line 832 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":833
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 */

#line 833 "View.MemoryView"
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":832
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */

#line 832 "View.MemoryView"
    }

    /* "View.MemoryView":834
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */

#line 834 "View.MemoryView"
    __pyx_t_1 = (0 <= __pyx_v_start);

#line 834 "View.MemoryView"
    if (__pyx_t_1) {

#line 834 "View.MemoryView"
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);

#line 834 "View.MemoryView"
    }

#line 834 "View.MemoryView"
    __pyx_t_2 = (!__pyx_t_1);

#line 834 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":835
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */

#line 835 "View.MemoryView"
      __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_kp_s_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 835, __pyx_L1_error)

      /* "View.MemoryView":834
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */

#line 834 "View.MemoryView"
    }

    /* "View.MemoryView":830
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */

#line 830 "View.MemoryView"
    goto __pyx_L3;

#line 830 "View.MemoryView"
  }

  /* "View.MemoryView":838
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
 */

#line 838 "View.MemoryView"
  /*else*/ {

#line 838 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_have_step != 0);

#line 838 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":839
 * 
 *         if have_step:
 *             negative_step = step < 0             # <<<<<<<<<<<<<<
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 */

#line 839 "View.MemoryView"
      __pyx_v_negative_step = (__pyx_v_step < 0);

      /* "View.MemoryView":840
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 */

#line 840 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_step == 0);

#line 840 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":841
 *             negative_step = step < 0
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             negative_step = False
 */

#line 841 "View.MemoryView"
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_kp_s_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 841, __pyx_L1_error)

        /* "View.MemoryView":840
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 */

#line 840 "View.MemoryView"
      }

      /* "View.MemoryView":838
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
 */

#line 838 "View.MemoryView"
      goto __pyx_L6;

#line 838 "View.MemoryView"
    }

    /* "View.MemoryView":843
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 *             negative_step = False             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */

#line 843 "View.MemoryView"
    /*else*/ {

#line 843 "View.MemoryView"
      __pyx_v_negative_step = 0;

      /* "View.MemoryView":844
 *         else:
 *             negative_step = False
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 844 "View.MemoryView"
      __pyx_v_step = 1;

#line 844 "View.MemoryView"
    }

#line 844 "View.MemoryView"
    __pyx_L6:;

    /* "View.MemoryView":847
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */

#line 847 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_have_start != 0);

#line 847 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":848
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */

#line 848 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_start < 0);

#line 848 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */

#line 849 "View.MemoryView"
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":850
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */

#line 850 "View.MemoryView"
        __pyx_t_2 = (__pyx_v_start < 0);

#line 850 "View.MemoryView"
        if (__pyx_t_2) {

          /* "View.MemoryView":851
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */

#line 851 "View.MemoryView"
          __pyx_v_start = 0;

          /* "View.MemoryView":850
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */

#line 850 "View.MemoryView"
        }

        /* "View.MemoryView":848
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */

#line 848 "View.MemoryView"
        goto __pyx_L9;

#line 848 "View.MemoryView"
      }

      /* "View.MemoryView":852
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */

#line 852 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_start >= __pyx_v_shape);

#line 852 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */

#line 853 "View.MemoryView"
        if (__pyx_v_negative_step) {

          /* "View.MemoryView":854
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */

#line 854 "View.MemoryView"
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":853
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */

#line 853 "View.MemoryView"
          goto __pyx_L11;

#line 853 "View.MemoryView"
        }

        /* "View.MemoryView":856
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */

#line 856 "View.MemoryView"
        /*else*/ {

#line 856 "View.MemoryView"
          __pyx_v_start = __pyx_v_shape;

#line 856 "View.MemoryView"
        }

#line 856 "View.MemoryView"
        __pyx_L11:;

        /* "View.MemoryView":852
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */

#line 852 "View.MemoryView"
      }

#line 852 "View.MemoryView"
      __pyx_L9:;

      /* "View.MemoryView":847
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */

#line 847 "View.MemoryView"
      goto __pyx_L8;

#line 847 "View.MemoryView"
    }

    /* "View.MemoryView":858
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */

#line 858 "View.MemoryView"
    /*else*/ {

#line 858 "View.MemoryView"
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":859
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */

#line 859 "View.MemoryView"
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":858
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */

#line 858 "View.MemoryView"
        goto __pyx_L12;

#line 858 "View.MemoryView"
      }

      /* "View.MemoryView":861
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */

#line 861 "View.MemoryView"
      /*else*/ {

#line 861 "View.MemoryView"
        __pyx_v_start = 0;

#line 861 "View.MemoryView"
      }

#line 861 "View.MemoryView"
      __pyx_L12:;

#line 861 "View.MemoryView"
    }

#line 861 "View.MemoryView"
    __pyx_L8:;

    /* "View.MemoryView":863
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */

#line 863 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_have_stop != 0);

#line 863 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */

#line 864 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_stop < 0);

#line 864 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":865
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */

#line 865 "View.MemoryView"
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":866
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */

#line 866 "View.MemoryView"
        __pyx_t_2 = (__pyx_v_stop < 0);

#line 866 "View.MemoryView"
        if (__pyx_t_2) {

          /* "View.MemoryView":867
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */

#line 867 "View.MemoryView"
          __pyx_v_stop = 0;

          /* "View.MemoryView":866
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */

#line 866 "View.MemoryView"
        }

        /* "View.MemoryView":864
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */

#line 864 "View.MemoryView"
        goto __pyx_L14;

#line 864 "View.MemoryView"
      }

      /* "View.MemoryView":868
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */

#line 868 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_stop > __pyx_v_shape);

#line 868 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":869
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */

#line 869 "View.MemoryView"
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":868
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */

#line 868 "View.MemoryView"
      }

#line 868 "View.MemoryView"
      __pyx_L14:;

      /* "View.MemoryView":863
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */

#line 863 "View.MemoryView"
      goto __pyx_L13;

#line 863 "View.MemoryView"
    }

    /* "View.MemoryView":871
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */

#line 871 "View.MemoryView"
    /*else*/ {

#line 871 "View.MemoryView"
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":872
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */

#line 872 "View.MemoryView"
        __pyx_v_stop = -1L;

        /* "View.MemoryView":871
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */

#line 871 "View.MemoryView"
        goto __pyx_L16;

#line 871 "View.MemoryView"
      }

      /* "View.MemoryView":874
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 874 "View.MemoryView"
      /*else*/ {

#line 874 "View.MemoryView"
        __pyx_v_stop = __pyx_v_shape;

#line 874 "View.MemoryView"
      }

#line 874 "View.MemoryView"
      __pyx_L16:;

#line 874 "View.MemoryView"
    }

#line 874 "View.MemoryView"
    __pyx_L13:;

    /* "View.MemoryView":878
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */

#line 878 "View.MemoryView"
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":880
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */

#line 880 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);

#line 880 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */

#line 881 "View.MemoryView"
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":880
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */

#line 880 "View.MemoryView"
    }

    /* "View.MemoryView":883
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */

#line 883 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_new_shape < 0);

#line 883 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":884
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 884 "View.MemoryView"
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":883
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */

#line 883 "View.MemoryView"
    }

    /* "View.MemoryView":887
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */

#line 887 "View.MemoryView"
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":888
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */

#line 888 "View.MemoryView"
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":889
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 889 "View.MemoryView"
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;

#line 889 "View.MemoryView"
  }

#line 889 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":892
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */

#line 892 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_suboffset_dim[0]) < 0);

#line 892 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":893
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */

#line 893 "View.MemoryView"
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":892
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */

#line 892 "View.MemoryView"
    goto __pyx_L19;

#line 892 "View.MemoryView"
  }

  /* "View.MemoryView":895
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */

#line 895 "View.MemoryView"
  /*else*/ {

#line 895 "View.MemoryView"
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);

#line 895 "View.MemoryView"
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));

#line 895 "View.MemoryView"
  }

#line 895 "View.MemoryView"
  __pyx_L19:;

  /* "View.MemoryView":897
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */

#line 897 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_suboffset >= 0);

#line 897 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":898
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */

#line 898 "View.MemoryView"
    __pyx_t_2 = (!__pyx_v_is_slice);

#line 898 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":899
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */

#line 899 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_new_ndim == 0);

#line 899 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":900
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 */

#line 900 "View.MemoryView"
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":899
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */

#line 899 "View.MemoryView"
        goto __pyx_L22;

#line 899 "View.MemoryView"
      }

      /* "View.MemoryView":902
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */

#line 902 "View.MemoryView"
      /*else*/ {

        /* "View.MemoryView":903
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */

#line 903 "View.MemoryView"
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_kp_s_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 902, __pyx_L1_error)

#line 903 "View.MemoryView"
      }

#line 903 "View.MemoryView"
      __pyx_L22:;

      /* "View.MemoryView":898
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */

#line 898 "View.MemoryView"
      goto __pyx_L21;

#line 898 "View.MemoryView"
    }

    /* "View.MemoryView":905
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */

#line 905 "View.MemoryView"
    /*else*/ {

#line 905 "View.MemoryView"
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;

#line 905 "View.MemoryView"
    }

#line 905 "View.MemoryView"
    __pyx_L21:;

    /* "View.MemoryView":897
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */

#line 897 "View.MemoryView"
  }

  /* "View.MemoryView":907
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 907 "View.MemoryView"
  __pyx_r = 0;

#line 907 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":810
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

#line 810 "View.MemoryView"


#line 810 "View.MemoryView"
  /* function exit code */

#line 810 "View.MemoryView"
  __pyx_L1_error:;

#line 810 "View.MemoryView"
  #ifdef WITH_THREAD

#line 810 "View.MemoryView"
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 810 "View.MemoryView"
  #endif

#line 810 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 810 "View.MemoryView"
  __pyx_r = -1;

#line 810 "View.MemoryView"
  #ifdef WITH_THREAD

#line 810 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 810 "View.MemoryView"
  #endif

#line 810 "View.MemoryView"
  __pyx_L0:;

#line 810 "View.MemoryView"
  return __pyx_r;

#line 810 "View.MemoryView"
}

/* "View.MemoryView":913
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

#line 913 "View.MemoryView"


#line 913 "View.MemoryView"
static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape
#line 913 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stride
#line 913 "View.MemoryView"
;
  Py_ssize_t __pyx_v_suboffset
#line 913 "View.MemoryView"
;
  Py_ssize_t __pyx_v_itemsize
#line 913 "View.MemoryView"
;
  char *__pyx_v_resultp
#line 913 "View.MemoryView"
;

#line 913 "View.MemoryView"
  char *__pyx_r;

#line 913 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 913 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 913 "View.MemoryView"
  int __pyx_t_2;

#line 913 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 913 "View.MemoryView"
  Py_UCS4 __pyx_t_4;

#line 913 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 913 "View.MemoryView"
  int __pyx_lineno = 0;

#line 913 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 913 "View.MemoryView"
  int __pyx_clineno = 0;

#line 913 "View.MemoryView"
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":915
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */

#line 915 "View.MemoryView"
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":916
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */

#line 916 "View.MemoryView"
  __pyx_t_1 = __pyx_v_view->itemsize;

#line 916 "View.MemoryView"
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":919
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
 */

#line 919 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_view->ndim == 0);

#line 919 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":920
 * 
 *     if view.ndim == 0:
 *         shape = view.len // itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */

#line 920 "View.MemoryView"
    if (unlikely(__pyx_v_itemsize == 0)) {

#line 920 "View.MemoryView"
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");

#line 920 "View.MemoryView"
      __PYX_ERR(1, 920, __pyx_L1_error)

#line 920 "View.MemoryView"
    }

#line 920 "View.MemoryView"
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {

#line 920 "View.MemoryView"
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");

#line 920 "View.MemoryView"
      __PYX_ERR(1, 920, __pyx_L1_error)

#line 920 "View.MemoryView"
    }

#line 920 "View.MemoryView"
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":921
 *     if view.ndim == 0:
 *         shape = view.len // itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */

#line 921 "View.MemoryView"
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":919
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
 */

#line 919 "View.MemoryView"
    goto __pyx_L3;

#line 919 "View.MemoryView"
  }

  /* "View.MemoryView":923
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */

#line 923 "View.MemoryView"
  /*else*/ {

#line 923 "View.MemoryView"
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":924
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */

#line 924 "View.MemoryView"
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":925
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */

#line 925 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_view->suboffsets != NULL);

#line 925 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":926
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */

#line 926 "View.MemoryView"
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":925
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */

#line 925 "View.MemoryView"
    }

#line 925 "View.MemoryView"
  }

#line 925 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":928
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */

#line 928 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_index < 0);

#line 928 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":929
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 */

#line 929 "View.MemoryView"
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":930
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */

#line 930 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_index < 0);

#line 930 "View.MemoryView"
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":931
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */

#line 931 "View.MemoryView"
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)

#line 931 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 931 "View.MemoryView"
      __pyx_t_1 = 0;

#line 931 "View.MemoryView"
      __pyx_t_4 = 127;

#line 931 "View.MemoryView"
      __Pyx_INCREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);

#line 931 "View.MemoryView"
      __pyx_t_1 += 37;

#line 931 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);

#line 931 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Out_of_bounds_on_buffer_access_a);

#line 931 "View.MemoryView"
      __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 931, __pyx_L1_error)

#line 931 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 931 "View.MemoryView"
      __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);

#line 931 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_t_5);

#line 931 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);

#line 931 "View.MemoryView"
      __pyx_t_5 = 0;

#line 931 "View.MemoryView"
      __Pyx_INCREF(__pyx_kp_u__7);

#line 931 "View.MemoryView"
      __pyx_t_1 += 1;

#line 931 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_kp_u__7);

#line 931 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__7);

#line 931 "View.MemoryView"
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 931, __pyx_L1_error)

#line 931 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 931 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 931 "View.MemoryView"
      __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);

#line 931 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 931 "View.MemoryView"
      __PYX_ERR(1, 931, __pyx_L1_error)

      /* "View.MemoryView":930
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */

#line 930 "View.MemoryView"
    }

    /* "View.MemoryView":928
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */

#line 928 "View.MemoryView"
  }

  /* "View.MemoryView":933
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */

#line 933 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_index >= __pyx_v_shape);

#line 933 "View.MemoryView"
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":934
 * 
 *     if index >= shape:
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */

#line 934 "View.MemoryView"
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 934, __pyx_L1_error)

#line 934 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 934 "View.MemoryView"
    __pyx_t_1 = 0;

#line 934 "View.MemoryView"
    __pyx_t_4 = 127;

#line 934 "View.MemoryView"
    __Pyx_INCREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);

#line 934 "View.MemoryView"
    __pyx_t_1 += 37;

#line 934 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);

#line 934 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Out_of_bounds_on_buffer_access_a);

#line 934 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 934, __pyx_L1_error)

#line 934 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 934 "View.MemoryView"
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);

#line 934 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_3);

#line 934 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);

#line 934 "View.MemoryView"
    __pyx_t_3 = 0;

#line 934 "View.MemoryView"
    __Pyx_INCREF(__pyx_kp_u__7);

#line 934 "View.MemoryView"
    __pyx_t_1 += 1;

#line 934 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_kp_u__7);

#line 934 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__7);

#line 934 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 934, __pyx_L1_error)

#line 934 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 934 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 934 "View.MemoryView"
    __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_3, 0, 0);

#line 934 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 934 "View.MemoryView"
    __PYX_ERR(1, 934, __pyx_L1_error)

    /* "View.MemoryView":933
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */

#line 933 "View.MemoryView"
  }

  /* "View.MemoryView":936
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */

#line 936 "View.MemoryView"
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":937
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */

#line 937 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_suboffset >= 0);

#line 937 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":938
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */

#line 938 "View.MemoryView"
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":937
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */

#line 937 "View.MemoryView"
  }

  /* "View.MemoryView":940
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 940 "View.MemoryView"
  __pyx_r = __pyx_v_resultp;

#line 940 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":913
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

#line 913 "View.MemoryView"


#line 913 "View.MemoryView"
  /* function exit code */

#line 913 "View.MemoryView"
  __pyx_L1_error:;

#line 913 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 913 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 913 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 913 "View.MemoryView"
  __pyx_r = NULL;

#line 913 "View.MemoryView"
  __pyx_L0:;

#line 913 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 913 "View.MemoryView"
  return __pyx_r;

#line 913 "View.MemoryView"
}

/* "View.MemoryView":946
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except -1:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

#line 946 "View.MemoryView"


#line 946 "View.MemoryView"
static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim
#line 946 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_shape
#line 946 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_strides
#line 946 "View.MemoryView"
;
  int __pyx_v_i
#line 946 "View.MemoryView"
;
  int __pyx_v_j
#line 946 "View.MemoryView"
;

#line 946 "View.MemoryView"
  int __pyx_r;

#line 946 "View.MemoryView"
  int __pyx_t_1;

#line 946 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 946 "View.MemoryView"
  long __pyx_t_3;

#line 946 "View.MemoryView"
  long __pyx_t_4;

#line 946 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 946 "View.MemoryView"
  Py_ssize_t __pyx_t_6;

#line 946 "View.MemoryView"
  int __pyx_t_7;

#line 946 "View.MemoryView"
  int __pyx_t_8;

#line 946 "View.MemoryView"
  int __pyx_t_9;

#line 946 "View.MemoryView"
  int __pyx_lineno = 0;

#line 946 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 946 "View.MemoryView"
  int __pyx_clineno = 0;

#line 946 "View.MemoryView"
  #ifdef WITH_THREAD

#line 946 "View.MemoryView"
  PyGILState_STATE __pyx_gilstate_save;

#line 946 "View.MemoryView"
  #endif

  /* "View.MemoryView":947
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except -1:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */

#line 947 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;

#line 947 "View.MemoryView"
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":949
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */

#line 949 "View.MemoryView"
  __pyx_t_2 = __pyx_v_memslice->shape;

#line 949 "View.MemoryView"
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":950
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 950 "View.MemoryView"
  __pyx_t_2 = __pyx_v_memslice->strides;

#line 950 "View.MemoryView"
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":954
 * 
 *     cdef int i, j
 *     for i in range(ndim // 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */

#line 954 "View.MemoryView"
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);

#line 954 "View.MemoryView"
  __pyx_t_4 = __pyx_t_3;

#line 954 "View.MemoryView"
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {

#line 954 "View.MemoryView"
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":955
 *     cdef int i, j
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */

#line 955 "View.MemoryView"
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":956
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */

#line 956 "View.MemoryView"
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);

#line 956 "View.MemoryView"
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);

#line 956 "View.MemoryView"
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;

#line 956 "View.MemoryView"
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":957
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */

#line 957 "View.MemoryView"
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);

#line 957 "View.MemoryView"
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);

#line 957 "View.MemoryView"
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;

#line 957 "View.MemoryView"
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":959
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */

#line 959 "View.MemoryView"
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0);

#line 959 "View.MemoryView"
    if (!__pyx_t_8) {

#line 959 "View.MemoryView"
    } else {

#line 959 "View.MemoryView"
      __pyx_t_7 = __pyx_t_8;

#line 959 "View.MemoryView"
      goto __pyx_L6_bool_binop_done;

#line 959 "View.MemoryView"
    }

#line 959 "View.MemoryView"
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0);

#line 959 "View.MemoryView"
    __pyx_t_7 = __pyx_t_8;

#line 959 "View.MemoryView"
    __pyx_L6_bool_binop_done:;

#line 959 "View.MemoryView"
    if (__pyx_t_7) {

      /* "View.MemoryView":960
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */

#line 960 "View.MemoryView"
      __pyx_t_9 = __pyx_memoryview_err(PyExc_ValueError, __pyx_kp_s_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 960, __pyx_L1_error)

      /* "View.MemoryView":959
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */

#line 959 "View.MemoryView"
    }

#line 959 "View.MemoryView"
  }

  /* "View.MemoryView":962
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 962 "View.MemoryView"
  __pyx_r = 0;

#line 962 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":946
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except -1:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

#line 946 "View.MemoryView"


#line 946 "View.MemoryView"
  /* function exit code */

#line 946 "View.MemoryView"
  __pyx_L1_error:;

#line 946 "View.MemoryView"
  #ifdef WITH_THREAD

#line 946 "View.MemoryView"
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 946 "View.MemoryView"
  #endif

#line 946 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 946 "View.MemoryView"
  __pyx_r = -1;

#line 946 "View.MemoryView"
  #ifdef WITH_THREAD

#line 946 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 946 "View.MemoryView"
  #endif

#line 946 "View.MemoryView"
  __pyx_L0:;

#line 946 "View.MemoryView"
  return __pyx_r;

#line 946 "View.MemoryView"
}

/* "View.MemoryView":979
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 */

#line 979 "View.MemoryView"


#line 979 "View.MemoryView"
/* Python wrapper */

#line 979 "View.MemoryView"
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 979 "View.MemoryView"
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {

#line 979 "View.MemoryView"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);

#line 979 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 979 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 979 "View.MemoryView"
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

#line 979 "View.MemoryView"


#line 979 "View.MemoryView"
  /* function exit code */

#line 979 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 979 "View.MemoryView"
}

#line 979 "View.MemoryView"


#line 979 "View.MemoryView"
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

#line 979 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 979 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":980
 * 
 *     def __dealloc__(self):
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */

#line 980 "View.MemoryView"
  __PYX_XCLEAR_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":979
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 */

#line 979 "View.MemoryView"


#line 979 "View.MemoryView"
  /* function exit code */

#line 979 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 979 "View.MemoryView"
}

/* "View.MemoryView":982
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

#line 982 "View.MemoryView"


#line 982 "View.MemoryView"
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {

#line 982 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 982 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 982 "View.MemoryView"
  int __pyx_t_1;

#line 982 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 982 "View.MemoryView"
  int __pyx_lineno = 0;

#line 982 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 982 "View.MemoryView"
  int __pyx_clineno = 0;

#line 982 "View.MemoryView"
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":983
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */

#line 983 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->to_object_func != NULL);

#line 983 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":984
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */

#line 984 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 984 "View.MemoryView"
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 984, __pyx_L1_error)

#line 984 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 984 "View.MemoryView"
    __pyx_r = __pyx_t_2;

#line 984 "View.MemoryView"
    __pyx_t_2 = 0;

#line 984 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":983
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */

#line 983 "View.MemoryView"
  }

  /* "View.MemoryView":986
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */

#line 986 "View.MemoryView"
  /*else*/ {

#line 986 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 986 "View.MemoryView"
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 986, __pyx_L1_error)

#line 986 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 986 "View.MemoryView"
    __pyx_r = __pyx_t_2;

#line 986 "View.MemoryView"
    __pyx_t_2 = 0;

#line 986 "View.MemoryView"
    goto __pyx_L0;

#line 986 "View.MemoryView"
  }

  /* "View.MemoryView":982
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

#line 982 "View.MemoryView"


#line 982 "View.MemoryView"
  /* function exit code */

#line 982 "View.MemoryView"
  __pyx_L1_error:;

#line 982 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 982 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 982 "View.MemoryView"
  __pyx_r = 0;

#line 982 "View.MemoryView"
  __pyx_L0:;

#line 982 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 982 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 982 "View.MemoryView"
  return __pyx_r;

#line 982 "View.MemoryView"
}

/* "View.MemoryView":988
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

#line 988 "View.MemoryView"


#line 988 "View.MemoryView"
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {

#line 988 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 988 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 988 "View.MemoryView"
  int __pyx_t_1;

#line 988 "View.MemoryView"
  int __pyx_t_2;

#line 988 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 988 "View.MemoryView"
  int __pyx_lineno = 0;

#line 988 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 988 "View.MemoryView"
  int __pyx_clineno = 0;

#line 988 "View.MemoryView"
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":989
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */

#line 989 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->to_dtype_func != NULL);

#line 989 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":990
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */

#line 990 "View.MemoryView"
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 990, __pyx_L1_error)

    /* "View.MemoryView":989
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */

#line 989 "View.MemoryView"
    goto __pyx_L3;

#line 989 "View.MemoryView"
  }

  /* "View.MemoryView":992
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
 */

#line 992 "View.MemoryView"
  /*else*/ {

#line 992 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 992, __pyx_L1_error)

#line 992 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 992 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 992 "View.MemoryView"
  }

#line 992 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":988
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

#line 988 "View.MemoryView"


#line 988 "View.MemoryView"
  /* function exit code */

#line 988 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 988 "View.MemoryView"
  goto __pyx_L0;

#line 988 "View.MemoryView"
  __pyx_L1_error:;

#line 988 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 988 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 988 "View.MemoryView"
  __pyx_r = 0;

#line 988 "View.MemoryView"
  __pyx_L0:;

#line 988 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 988 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 988 "View.MemoryView"
  return __pyx_r;

#line 988 "View.MemoryView"
}

/* "View.MemoryView":994
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

#line 994 "View.MemoryView"


#line 994 "View.MemoryView"
static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

#line 994 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 994 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 994 "View.MemoryView"
  __Pyx_RefNannySetupContext("_get_base", 0);

  /* "View.MemoryView":995
 * 
 *     cdef _get_base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 995 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 995 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->from_object);

#line 995 "View.MemoryView"
  __pyx_r = __pyx_v_self->from_object;

#line 995 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":994
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

#line 994 "View.MemoryView"


#line 994 "View.MemoryView"
  /* function exit code */

#line 994 "View.MemoryView"
  __pyx_L0:;

#line 994 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 994 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 994 "View.MemoryView"
  return __pyx_r;

#line 994 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {

#line 1 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 1 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
  #endif

#line 1 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);

#line 1 "(tree fragment)"
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;
#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0
#line 3 "(tree fragment)"
;

#line 3 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 3 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 3 "(tree fragment)"
  #endif

#line 3 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);

#line 3 "(tree fragment)"
  {

#line 3 "(tree fragment)"
    #if CYTHON_USE_MODULE_STATE

#line 3 "(tree fragment)"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #else

#line 3 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};

#line 3 "(tree fragment)"
    #endif

#line 3 "(tree fragment)"
    PyObject* values[1] = {0};

#line 3 "(tree fragment)"
    if (__pyx_kwds) {

#line 3 "(tree fragment)"
      Py_ssize_t kw_args;

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {
        case  1: 
#line 3 "(tree fragment)"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 3 "(tree fragment)"
break;
        default: 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 3 "(tree fragment)"
      switch (__pyx_nargs) {

#line 3 "(tree fragment)"
        case  0:

#line 3 "(tree fragment)"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 3 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else 
#line 3 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 3 "(tree fragment)"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 3 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
      }

#line 3 "(tree fragment)"
    } else if (unlikely(__pyx_nargs != 1)) {

#line 3 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 3 "(tree fragment)"
    } else {

#line 3 "(tree fragment)"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 3 "(tree fragment)"
    }

#line 3 "(tree fragment)"
    __pyx_v___pyx_state = values[0];

#line 3 "(tree fragment)"
  }

#line 3 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 3 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); 
#line 3 "(tree fragment)"
__PYX_ERR(1, 3, __pyx_L3_error)

#line 3 "(tree fragment)"
  __pyx_L3_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return NULL;

#line 3 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), __pyx_v___pyx_state);

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":1015
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

#line 1015 "View.MemoryView"


#line 1015 "View.MemoryView"
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0
#line 1015 "View.MemoryView"
;
  Py_ssize_t __pyx_v_suboffset
#line 1015 "View.MemoryView"
;
  PyObject *__pyx_v_length = NULL
#line 1015 "View.MemoryView"
;

#line 1015 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 1015 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1015 "View.MemoryView"
  int __pyx_t_1;

#line 1015 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 1015 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 1015 "View.MemoryView"
  __Pyx_TypeInfo *__pyx_t_4;

#line 1015 "View.MemoryView"
  Py_buffer __pyx_t_5;

#line 1015 "View.MemoryView"
  Py_ssize_t *__pyx_t_6;

#line 1015 "View.MemoryView"
  Py_ssize_t *__pyx_t_7;

#line 1015 "View.MemoryView"
  Py_ssize_t *__pyx_t_8;

#line 1015 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 1015 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1015 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1015 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1015 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1023
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

#line 1023 "View.MemoryView"
  __pyx_t_1 = (((PyObject *)__pyx_v_memviewslice.memview) == Py_None);

#line 1023 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1024
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1024 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 1024 "View.MemoryView"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1024 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1023
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

#line 1023 "View.MemoryView"
  }

  /* "View.MemoryView":1029
 * 
 * 
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */

#line 1029 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1029, __pyx_L1_error)

#line 1029 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1029 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1029, __pyx_L1_error)

#line 1029 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 1029 "View.MemoryView"
  __Pyx_INCREF(Py_None);

#line 1029 "View.MemoryView"
  __Pyx_GIVEREF(Py_None);

#line 1029 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);

#line 1029 "View.MemoryView"
  __Pyx_INCREF(__pyx_int_0);

#line 1029 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_int_0);

#line 1029 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);

#line 1029 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 1029 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);

#line 1029 "View.MemoryView"
  __pyx_t_2 = 0;

#line 1029 "View.MemoryView"
  __pyx_t_2 = ((PyObject *)__pyx_tp_new__memoryviewslice(((PyTypeObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1029, __pyx_L1_error)

#line 1029 "View.MemoryView"
  __Pyx_GOTREF((PyObject *)__pyx_t_2);

#line 1029 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1029 "View.MemoryView"
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);

#line 1029 "View.MemoryView"
  __pyx_t_2 = 0;

  /* "View.MemoryView":1031
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */

#line 1031 "View.MemoryView"
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1032
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 */

#line 1032 "View.MemoryView"
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1034
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */

#line 1034 "View.MemoryView"
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->__pyx_vtab)->_get_base(((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1034, __pyx_L1_error)

#line 1034 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1034 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 1034 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_result->from_object);

#line 1034 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_result->from_object);

#line 1034 "View.MemoryView"
  __pyx_v_result->from_object = __pyx_t_2;

#line 1034 "View.MemoryView"
  __pyx_t_2 = 0;

  /* "View.MemoryView":1035
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */

#line 1035 "View.MemoryView"
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;

#line 1035 "View.MemoryView"
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1037
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */

#line 1037 "View.MemoryView"
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;

#line 1037 "View.MemoryView"
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1038
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */

#line 1038 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1039
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */

#line 1039 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1040
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */

#line 1040 "View.MemoryView"
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1041
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */

#line 1041 "View.MemoryView"
  Py_INCREF(Py_None);

  /* "View.MemoryView":1043
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */

#line 1043 "View.MemoryView"
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);

#line 1043 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1044
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */

#line 1044 "View.MemoryView"
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1043
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */

#line 1043 "View.MemoryView"
    goto __pyx_L4;

#line 1043 "View.MemoryView"
  }

  /* "View.MemoryView":1046
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */

#line 1046 "View.MemoryView"
  /*else*/ {

#line 1046 "View.MemoryView"
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;

#line 1046 "View.MemoryView"
  }

#line 1046 "View.MemoryView"
  __pyx_L4:;

  /* "View.MemoryView":1048
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */

#line 1048 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1049
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1049 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1052
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

#line 1052 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1053
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */

#line 1053 "View.MemoryView"
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);

#line 1053 "View.MemoryView"
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {

#line 1053 "View.MemoryView"
    __pyx_t_6 = __pyx_t_8;

#line 1053 "View.MemoryView"
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1054
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */

#line 1054 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_suboffset >= 0);

#line 1054 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":1055
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */

#line 1055 "View.MemoryView"
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1056
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */

#line 1056 "View.MemoryView"
      goto __pyx_L6_break;

      /* "View.MemoryView":1054
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */

#line 1054 "View.MemoryView"
    }

#line 1054 "View.MemoryView"
  }

#line 1054 "View.MemoryView"
  __pyx_L6_break:;

  /* "View.MemoryView":1058
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */

#line 1058 "View.MemoryView"
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;

#line 1058 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1059
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */

#line 1059 "View.MemoryView"
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);

#line 1059 "View.MemoryView"
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {

#line 1059 "View.MemoryView"
    __pyx_t_6 = __pyx_t_8;

#line 1059 "View.MemoryView"
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1059, __pyx_L1_error)

#line 1059 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 1059 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);

#line 1059 "View.MemoryView"
    __pyx_t_2 = 0;

    /* "View.MemoryView":1060
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */

#line 1060 "View.MemoryView"
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1060, __pyx_L1_error)

#line 1060 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 1060 "View.MemoryView"
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1060, __pyx_L1_error)

#line 1060 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 1060 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1060 "View.MemoryView"
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1060, __pyx_L1_error)

#line 1060 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1060 "View.MemoryView"
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

#line 1060 "View.MemoryView"
  }

  /* "View.MemoryView":1062
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */

#line 1062 "View.MemoryView"
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1063
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */

#line 1063 "View.MemoryView"
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1065
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */

#line 1065 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 1065 "View.MemoryView"
  __Pyx_INCREF((PyObject *)__pyx_v_result);

#line 1065 "View.MemoryView"
  __pyx_r = ((PyObject *)__pyx_v_result);

#line 1065 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1015
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

#line 1015 "View.MemoryView"


#line 1015 "View.MemoryView"
  /* function exit code */

#line 1015 "View.MemoryView"
  __pyx_L1_error:;

#line 1015 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 1015 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 1015 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1015 "View.MemoryView"
  __pyx_r = 0;

#line 1015 "View.MemoryView"
  __pyx_L0:;

#line 1015 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 1015 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_length);

#line 1015 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 1015 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1015 "View.MemoryView"
  return __pyx_r;

#line 1015 "View.MemoryView"
}

/* "View.MemoryView":1068
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

#line 1068 "View.MemoryView"


#line 1068 "View.MemoryView"
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0
#line 1068 "View.MemoryView"
;

#line 1068 "View.MemoryView"
  __Pyx_memviewslice *__pyx_r;

#line 1068 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1068 "View.MemoryView"
  int __pyx_t_1;

#line 1068 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 1068 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1068 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1068 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1068 "View.MemoryView"
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1071
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */

#line 1071 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 1071 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1072
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */

#line 1072 "View.MemoryView"
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1072, __pyx_L1_error)

#line 1072 "View.MemoryView"
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);

#line 1072 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_2);

#line 1072 "View.MemoryView"
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);

#line 1072 "View.MemoryView"
    __pyx_t_2 = 0;

    /* "View.MemoryView":1073
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */

#line 1073 "View.MemoryView"
    __pyx_r = (&__pyx_v_obj->from_slice);

#line 1073 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1071
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */

#line 1071 "View.MemoryView"
  }

  /* "View.MemoryView":1075
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */

#line 1075 "View.MemoryView"
  /*else*/ {

#line 1075 "View.MemoryView"
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1076
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */

#line 1076 "View.MemoryView"
    __pyx_r = __pyx_v_mslice;

#line 1076 "View.MemoryView"
    goto __pyx_L0;

#line 1076 "View.MemoryView"
  }

  /* "View.MemoryView":1068
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

#line 1068 "View.MemoryView"


#line 1068 "View.MemoryView"
  /* function exit code */

#line 1068 "View.MemoryView"
  __pyx_L1_error:;

#line 1068 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 1068 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1068 "View.MemoryView"
  __pyx_r = NULL;

#line 1068 "View.MemoryView"
  __pyx_L0:;

#line 1068 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);

#line 1068 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1068 "View.MemoryView"
  return __pyx_r;

#line 1068 "View.MemoryView"
}

/* "View.MemoryView":1079
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

#line 1079 "View.MemoryView"


#line 1079 "View.MemoryView"
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim
#line 1079 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_shape
#line 1079 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_strides
#line 1079 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_suboffsets
#line 1079 "View.MemoryView"
;

#line 1079 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1079 "View.MemoryView"
  Py_ssize_t *__pyx_t_1;

#line 1079 "View.MemoryView"
  int __pyx_t_2;

#line 1079 "View.MemoryView"
  int __pyx_t_3;

#line 1079 "View.MemoryView"
  int __pyx_t_4;

#line 1079 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 1079 "View.MemoryView"
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1083
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */

#line 1083 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memview->view.shape;

#line 1083 "View.MemoryView"
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1084
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */

#line 1084 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memview->view.strides;

#line 1084 "View.MemoryView"
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1085
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */

#line 1085 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;

#line 1085 "View.MemoryView"
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1087
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */

#line 1087 "View.MemoryView"
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1088
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */

#line 1088 "View.MemoryView"
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1090
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */

#line 1090 "View.MemoryView"
  __pyx_t_2 = __pyx_v_memview->view.ndim;

#line 1090 "View.MemoryView"
  __pyx_t_3 = __pyx_t_2;

#line 1090 "View.MemoryView"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1090 "View.MemoryView"
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1091
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */

#line 1091 "View.MemoryView"
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1092
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */

#line 1092 "View.MemoryView"
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1093
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */

#line 1093 "View.MemoryView"
    if ((__pyx_v_suboffsets != 0)) {

#line 1093 "View.MemoryView"
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);

#line 1093 "View.MemoryView"
    } else {

#line 1093 "View.MemoryView"
      __pyx_t_5 = -1L;

#line 1093 "View.MemoryView"
    }

#line 1093 "View.MemoryView"
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;

#line 1093 "View.MemoryView"
  }

  /* "View.MemoryView":1079
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

#line 1079 "View.MemoryView"


#line 1079 "View.MemoryView"
  /* function exit code */

#line 1079 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1079 "View.MemoryView"
}

/* "View.MemoryView":1096
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

#line 1096 "View.MemoryView"


#line 1096 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice
#line 1096 "View.MemoryView"
;

#line 1096 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 1096 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1096 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 1096 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1096 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1096 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1096 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1099
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */

#line 1099 "View.MemoryView"
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1100
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */

#line 1100 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 1100 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1100, __pyx_L1_error)

#line 1100 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 1100 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 1100 "View.MemoryView"
  __pyx_t_1 = 0;

#line 1100 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1096
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

#line 1096 "View.MemoryView"


#line 1096 "View.MemoryView"
  /* function exit code */

#line 1096 "View.MemoryView"
  __pyx_L1_error:;

#line 1096 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 1096 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1096 "View.MemoryView"
  __pyx_r = 0;

#line 1096 "View.MemoryView"
  __pyx_L0:;

#line 1096 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 1096 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1096 "View.MemoryView"
  return __pyx_r;

#line 1096 "View.MemoryView"
}

/* "View.MemoryView":1103
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

#line 1103 "View.MemoryView"


#line 1103 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *)
#line 1103 "View.MemoryView"
;
  int (*__pyx_v_to_dtype_func)(char *, PyObject *)
#line 1103 "View.MemoryView"
;

#line 1103 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 1103 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1103 "View.MemoryView"
  int __pyx_t_1;

#line 1103 "View.MemoryView"
  PyObject *(*__pyx_t_2)(char *);

#line 1103 "View.MemoryView"
  int (*__pyx_t_3)(char *, PyObject *);

#line 1103 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 1103 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1103 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1103 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1103 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1110
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */

#line 1110 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 1110 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */

#line 1111 "View.MemoryView"
    __pyx_t_2 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;

#line 1111 "View.MemoryView"
    __pyx_v_to_object_func = __pyx_t_2;

    /* "View.MemoryView":1112
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */

#line 1112 "View.MemoryView"
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;

#line 1112 "View.MemoryView"
    __pyx_v_to_dtype_func = __pyx_t_3;

    /* "View.MemoryView":1110
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */

#line 1110 "View.MemoryView"
    goto __pyx_L3;

#line 1110 "View.MemoryView"
  }

  /* "View.MemoryView":1114
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */

#line 1114 "View.MemoryView"
  /*else*/ {

#line 1114 "View.MemoryView"
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1115
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */

#line 1115 "View.MemoryView"
    __pyx_v_to_dtype_func = NULL;

#line 1115 "View.MemoryView"
  }

#line 1115 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1117
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */

#line 1117 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1119
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1119 "View.MemoryView"
  __pyx_t_4 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1117, __pyx_L1_error)

#line 1119 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1119 "View.MemoryView"
  __pyx_r = __pyx_t_4;

#line 1119 "View.MemoryView"
  __pyx_t_4 = 0;

#line 1119 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1103
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

#line 1103 "View.MemoryView"


#line 1103 "View.MemoryView"
  /* function exit code */

#line 1103 "View.MemoryView"
  __pyx_L1_error:;

#line 1103 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 1103 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1103 "View.MemoryView"
  __pyx_r = 0;

#line 1103 "View.MemoryView"
  __pyx_L0:;

#line 1103 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 1103 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1103 "View.MemoryView"
  return __pyx_r;

#line 1103 "View.MemoryView"
}

/* "View.MemoryView":1125
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
 */

#line 1125 "View.MemoryView"


#line 1125 "View.MemoryView"
static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {

#line 1125 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 1125 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

  /* "View.MemoryView":1126
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     return -arg if arg < 0 else arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */

#line 1126 "View.MemoryView"
  if ((__pyx_v_arg < 0)) {

#line 1126 "View.MemoryView"
    __pyx_t_1 = (-__pyx_v_arg);

#line 1126 "View.MemoryView"
  } else {

#line 1126 "View.MemoryView"
    __pyx_t_1 = __pyx_v_arg;

#line 1126 "View.MemoryView"
  }

#line 1126 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 1126 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1125
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
 */

#line 1125 "View.MemoryView"


#line 1125 "View.MemoryView"
  /* function exit code */

#line 1125 "View.MemoryView"
  __pyx_L0:;

#line 1125 "View.MemoryView"
  return __pyx_r;

#line 1125 "View.MemoryView"
}

/* "View.MemoryView":1129
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

#line 1129 "View.MemoryView"


#line 1129 "View.MemoryView"
static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i
#line 1129 "View.MemoryView"
;
  Py_ssize_t __pyx_v_c_stride
#line 1129 "View.MemoryView"
;
  Py_ssize_t __pyx_v_f_stride
#line 1129 "View.MemoryView"
;

#line 1129 "View.MemoryView"
  char __pyx_r;

#line 1129 "View.MemoryView"
  int __pyx_t_1;

#line 1129 "View.MemoryView"
  int __pyx_t_2;

#line 1129 "View.MemoryView"
  int __pyx_t_3;

#line 1129 "View.MemoryView"
  int __pyx_t_4;

  /* "View.MemoryView":1134
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */

#line 1134 "View.MemoryView"
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1135
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */

#line 1135 "View.MemoryView"
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1137
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */

#line 1137 "View.MemoryView"
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {

#line 1137 "View.MemoryView"
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1138
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */

#line 1138 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);

#line 1138 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1139
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */

#line 1139 "View.MemoryView"
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1140
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */

#line 1140 "View.MemoryView"
      goto __pyx_L4_break;

      /* "View.MemoryView":1138
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */

#line 1138 "View.MemoryView"
    }

#line 1138 "View.MemoryView"
  }

#line 1138 "View.MemoryView"
  __pyx_L4_break:;

  /* "View.MemoryView":1142
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */

#line 1142 "View.MemoryView"
  __pyx_t_1 = __pyx_v_ndim;

#line 1142 "View.MemoryView"
  __pyx_t_3 = __pyx_t_1;

#line 1142 "View.MemoryView"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1142 "View.MemoryView"
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1143
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */

#line 1143 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);

#line 1143 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1144
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */

#line 1144 "View.MemoryView"
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1145
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */

#line 1145 "View.MemoryView"
      goto __pyx_L7_break;

      /* "View.MemoryView":1143
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */

#line 1143 "View.MemoryView"
    }

#line 1143 "View.MemoryView"
  }

#line 1143 "View.MemoryView"
  __pyx_L7_break:;

  /* "View.MemoryView":1147
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */

#line 1147 "View.MemoryView"
  __pyx_t_2 = (abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride));

#line 1147 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1148
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */

#line 1148 "View.MemoryView"
    __pyx_r = 'C';

#line 1148 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1147
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */

#line 1147 "View.MemoryView"
  }

  /* "View.MemoryView":1150
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */

#line 1150 "View.MemoryView"
  /*else*/ {

#line 1150 "View.MemoryView"
    __pyx_r = 'F';

#line 1150 "View.MemoryView"
    goto __pyx_L0;

#line 1150 "View.MemoryView"
  }

  /* "View.MemoryView":1129
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

#line 1129 "View.MemoryView"


#line 1129 "View.MemoryView"
  /* function exit code */

#line 1129 "View.MemoryView"
  __pyx_L0:;

#line 1129 "View.MemoryView"
  return __pyx_r;

#line 1129 "View.MemoryView"
}

/* "View.MemoryView":1153
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

#line 1153 "View.MemoryView"


#line 1153 "View.MemoryView"
static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i
#line 1153 "View.MemoryView"
;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent
#line 1153 "View.MemoryView"
;
  Py_ssize_t __pyx_v_dst_extent
#line 1153 "View.MemoryView"
;
  Py_ssize_t __pyx_v_src_stride
#line 1153 "View.MemoryView"
;
  Py_ssize_t __pyx_v_dst_stride
#line 1153 "View.MemoryView"
;

#line 1153 "View.MemoryView"
  int __pyx_t_1;

#line 1153 "View.MemoryView"
  int __pyx_t_2;

#line 1153 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 1153 "View.MemoryView"
  Py_ssize_t __pyx_t_4;

#line 1153 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1160
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */

#line 1160 "View.MemoryView"
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1161
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */

#line 1161 "View.MemoryView"
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1162
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */

#line 1162 "View.MemoryView"
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1163
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */

#line 1163 "View.MemoryView"
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1165
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */

#line 1165 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_ndim == 1);

#line 1165 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1166
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */

#line 1166 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_src_stride > 0);

#line 1166 "View.MemoryView"
    if (__pyx_t_2) {

#line 1166 "View.MemoryView"
    } else {

#line 1166 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 1166 "View.MemoryView"
      goto __pyx_L5_bool_binop_done;

#line 1166 "View.MemoryView"
    }

#line 1166 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_dst_stride > 0);

#line 1166 "View.MemoryView"
    if (__pyx_t_2) {

#line 1166 "View.MemoryView"
    } else {

#line 1166 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 1166 "View.MemoryView"
      goto __pyx_L5_bool_binop_done;

#line 1166 "View.MemoryView"
    }

    /* "View.MemoryView":1167
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */

#line 1167 "View.MemoryView"
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);

#line 1167 "View.MemoryView"
    if (__pyx_t_2) {

#line 1167 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));

#line 1167 "View.MemoryView"
    }

#line 1167 "View.MemoryView"
    __pyx_t_1 = __pyx_t_2;

#line 1167 "View.MemoryView"
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1166
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */

#line 1166 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":1168
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */

#line 1168 "View.MemoryView"
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1166
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */

#line 1166 "View.MemoryView"
      goto __pyx_L4;

#line 1166 "View.MemoryView"
    }

    /* "View.MemoryView":1170
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */

#line 1170 "View.MemoryView"
    /*else*/ {

#line 1170 "View.MemoryView"
      __pyx_t_3 = __pyx_v_dst_extent;

#line 1170 "View.MemoryView"
      __pyx_t_4 = __pyx_t_3;

#line 1170 "View.MemoryView"
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 1170 "View.MemoryView"
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1171
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */

#line 1171 "View.MemoryView"
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1172
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */

#line 1172 "View.MemoryView"
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1173
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */

#line 1173 "View.MemoryView"
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);

#line 1173 "View.MemoryView"
      }

#line 1173 "View.MemoryView"
    }

#line 1173 "View.MemoryView"
    __pyx_L4:;

    /* "View.MemoryView":1165
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */

#line 1165 "View.MemoryView"
    goto __pyx_L3;

#line 1165 "View.MemoryView"
  }

  /* "View.MemoryView":1175
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */

#line 1175 "View.MemoryView"
  /*else*/ {

#line 1175 "View.MemoryView"
    __pyx_t_3 = __pyx_v_dst_extent;

#line 1175 "View.MemoryView"
    __pyx_t_4 = __pyx_t_3;

#line 1175 "View.MemoryView"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 1175 "View.MemoryView"
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1176
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */

#line 1176 "View.MemoryView"
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1180
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */

#line 1180 "View.MemoryView"
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1181
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */

#line 1181 "View.MemoryView"
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);

#line 1181 "View.MemoryView"
    }

#line 1181 "View.MemoryView"
  }

#line 1181 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1153
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

#line 1153 "View.MemoryView"


#line 1153 "View.MemoryView"
  /* function exit code */

#line 1153 "View.MemoryView"
}

/* "View.MemoryView":1183
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

#line 1183 "View.MemoryView"


#line 1183 "View.MemoryView"
static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1186
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */

#line 1186 "View.MemoryView"
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1183
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

#line 1183 "View.MemoryView"


#line 1183 "View.MemoryView"
  /* function exit code */

#line 1183 "View.MemoryView"
}

/* "View.MemoryView":1190
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

#line 1190 "View.MemoryView"


#line 1190 "View.MemoryView"
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape
#line 1190 "View.MemoryView"
;
  Py_ssize_t __pyx_v_size
#line 1190 "View.MemoryView"
;

#line 1190 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 1190 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1190 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 1190 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 1190 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1192
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */

#line 1192 "View.MemoryView"
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;

#line 1192 "View.MemoryView"
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1194
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */

#line 1194 "View.MemoryView"
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);

#line 1194 "View.MemoryView"
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {

#line 1194 "View.MemoryView"
    __pyx_t_2 = __pyx_t_4;

#line 1194 "View.MemoryView"
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1195
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */

#line 1195 "View.MemoryView"
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);

#line 1195 "View.MemoryView"
  }

  /* "View.MemoryView":1197
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */

#line 1197 "View.MemoryView"
  __pyx_r = __pyx_v_size;

#line 1197 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1190
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

#line 1190 "View.MemoryView"


#line 1190 "View.MemoryView"
  /* function exit code */

#line 1190 "View.MemoryView"
  __pyx_L0:;

#line 1190 "View.MemoryView"
  return __pyx_r;

#line 1190 "View.MemoryView"
}

/* "View.MemoryView":1200
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

#line 1200 "View.MemoryView"


#line 1200 "View.MemoryView"
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx
#line 1200 "View.MemoryView"
;

#line 1200 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 1200 "View.MemoryView"
  int __pyx_t_1;

#line 1200 "View.MemoryView"
  int __pyx_t_2;

#line 1200 "View.MemoryView"
  int __pyx_t_3;

#line 1200 "View.MemoryView"
  int __pyx_t_4;

  /* "View.MemoryView":1209
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */

#line 1209 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_order == 'F');

#line 1209 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1210
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */

#line 1210 "View.MemoryView"
    __pyx_t_2 = __pyx_v_ndim;

#line 1210 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 1210 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1210 "View.MemoryView"
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1211
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */

#line 1211 "View.MemoryView"
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1212
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */

#line 1212 "View.MemoryView"
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));

#line 1212 "View.MemoryView"
    }

    /* "View.MemoryView":1209
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */

#line 1209 "View.MemoryView"
    goto __pyx_L3;

#line 1209 "View.MemoryView"
  }

  /* "View.MemoryView":1214
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */

#line 1214 "View.MemoryView"
  /*else*/ {

#line 1214 "View.MemoryView"
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {

#line 1214 "View.MemoryView"
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1215
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */

#line 1215 "View.MemoryView"
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1216
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */

#line 1216 "View.MemoryView"
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));

#line 1216 "View.MemoryView"
    }

#line 1216 "View.MemoryView"
  }

#line 1216 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1218
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */

#line 1218 "View.MemoryView"
  __pyx_r = __pyx_v_stride;

#line 1218 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1200
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

#line 1200 "View.MemoryView"


#line 1200 "View.MemoryView"
  /* function exit code */

#line 1200 "View.MemoryView"
  __pyx_L0:;

#line 1200 "View.MemoryView"
  return __pyx_r;

#line 1200 "View.MemoryView"
}

/* "View.MemoryView":1221
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

#line 1221 "View.MemoryView"


#line 1221 "View.MemoryView"
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i
#line 1221 "View.MemoryView"
;
  void *__pyx_v_result
#line 1221 "View.MemoryView"
;
  size_t __pyx_v_itemsize
#line 1221 "View.MemoryView"
;
  size_t __pyx_v_size
#line 1221 "View.MemoryView"
;

#line 1221 "View.MemoryView"
  void *__pyx_r;

#line 1221 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1221 "View.MemoryView"
  int __pyx_t_2;

#line 1221 "View.MemoryView"
  int __pyx_t_3;

#line 1221 "View.MemoryView"
  struct __pyx_memoryview_obj *__pyx_t_4;

#line 1221 "View.MemoryView"
  int __pyx_t_5;

#line 1221 "View.MemoryView"
  int __pyx_t_6;

#line 1221 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1221 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1221 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1221 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1221 "View.MemoryView"
  PyGILState_STATE __pyx_gilstate_save;

#line 1221 "View.MemoryView"
  #endif

  /* "View.MemoryView":1232
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */

#line 1232 "View.MemoryView"
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;

#line 1232 "View.MemoryView"
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1233
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */

#line 1233 "View.MemoryView"
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1235
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err_no_memory()
 */

#line 1235 "View.MemoryView"
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1236
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
 */

#line 1236 "View.MemoryView"
  __pyx_t_2 = (!(__pyx_v_result != 0));

#line 1236 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1237
 *     result = malloc(size)
 *     if not result:
 *         _err_no_memory()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1237 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_err_no_memory(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1237, __pyx_L1_error)

    /* "View.MemoryView":1236
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
 */

#line 1236 "View.MemoryView"
  }

  /* "View.MemoryView":1240
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */

#line 1240 "View.MemoryView"
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1241
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */

#line 1241 "View.MemoryView"
  __pyx_t_4 = __pyx_v_src->memview;

#line 1241 "View.MemoryView"
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1242
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */

#line 1242 "View.MemoryView"
  __pyx_t_3 = __pyx_v_ndim;

#line 1242 "View.MemoryView"
  __pyx_t_5 = __pyx_t_3;

#line 1242 "View.MemoryView"
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 1242 "View.MemoryView"
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1243
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */

#line 1243 "View.MemoryView"
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1244
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)
 */

#line 1244 "View.MemoryView"
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;

#line 1244 "View.MemoryView"
  }

  /* "View.MemoryView":1246
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1246 "View.MemoryView"
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1249
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */

#line 1249 "View.MemoryView"
  __pyx_t_3 = __pyx_v_ndim;

#line 1249 "View.MemoryView"
  __pyx_t_5 = __pyx_t_3;

#line 1249 "View.MemoryView"
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 1249 "View.MemoryView"
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1250
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */

#line 1250 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1);

#line 1250 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1251
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */

#line 1251 "View.MemoryView"
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1250
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */

#line 1250 "View.MemoryView"
    }

#line 1250 "View.MemoryView"
  }

  /* "View.MemoryView":1253
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */

#line 1253 "View.MemoryView"
  __pyx_t_2 = __pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim);

#line 1253 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1254
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */

#line 1254 "View.MemoryView"
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1253
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */

#line 1253 "View.MemoryView"
    goto __pyx_L9;

#line 1253 "View.MemoryView"
  }

  /* "View.MemoryView":1256
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */

#line 1256 "View.MemoryView"
  /*else*/ {

#line 1256 "View.MemoryView"
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);

#line 1256 "View.MemoryView"
  }

#line 1256 "View.MemoryView"
  __pyx_L9:;

  /* "View.MemoryView":1258
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1258 "View.MemoryView"
  __pyx_r = __pyx_v_result;

#line 1258 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1221
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

#line 1221 "View.MemoryView"


#line 1221 "View.MemoryView"
  /* function exit code */

#line 1221 "View.MemoryView"
  __pyx_L1_error:;

#line 1221 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1221 "View.MemoryView"
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1221 "View.MemoryView"
  #endif

#line 1221 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1221 "View.MemoryView"
  __pyx_r = NULL;

#line 1221 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1221 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1221 "View.MemoryView"
  #endif

#line 1221 "View.MemoryView"
  __pyx_L0:;

#line 1221 "View.MemoryView"
  return __pyx_r;

#line 1221 "View.MemoryView"
}

/* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 */

#line 1263 "View.MemoryView"


#line 1263 "View.MemoryView"
static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {

#line 1263 "View.MemoryView"
  int __pyx_r;

#line 1263 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1263 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 1263 "View.MemoryView"
  Py_ssize_t __pyx_t_2;

#line 1263 "View.MemoryView"
  Py_UCS4 __pyx_t_3;

#line 1263 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 1263 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1263 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1263 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1263 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1263 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1263 "View.MemoryView"
  #endif

#line 1263 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1265
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */

#line 1265 "View.MemoryView"
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1265, __pyx_L1_error)

#line 1265 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 1265 "View.MemoryView"
  __pyx_t_2 = 0;

#line 1265 "View.MemoryView"
  __pyx_t_3 = 127;

#line 1265 "View.MemoryView"
  __Pyx_INCREF(__pyx_kp_u_got_differing_extents_in_dimensi);

#line 1265 "View.MemoryView"
  __pyx_t_2 += 35;

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_kp_u_got_differing_extents_in_dimensi);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_got_differing_extents_in_dimensi);

#line 1265 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_i, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1265, __pyx_L1_error)

#line 1265 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);

#line 1265 "View.MemoryView"
  __pyx_t_4 = 0;

#line 1265 "View.MemoryView"
  __Pyx_INCREF(__pyx_kp_u_got);

#line 1265 "View.MemoryView"
  __pyx_t_2 += 6;

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_kp_u_got);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_got);

#line 1265 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent1, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1265, __pyx_L1_error)

#line 1265 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);

#line 1265 "View.MemoryView"
  __pyx_t_4 = 0;

#line 1265 "View.MemoryView"
  __Pyx_INCREF(__pyx_kp_u_and);

#line 1265 "View.MemoryView"
  __pyx_t_2 += 5;

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_kp_u_and);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_and);

#line 1265 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent2, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1265, __pyx_L1_error)

#line 1265 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);

#line 1265 "View.MemoryView"
  __pyx_t_4 = 0;

#line 1265 "View.MemoryView"
  __Pyx_INCREF(__pyx_kp_u__7);

#line 1265 "View.MemoryView"
  __pyx_t_2 += 1;

#line 1265 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_kp_u__7);

#line 1265 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__7);

#line 1265 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1265, __pyx_L1_error)

#line 1265 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1265 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1265 "View.MemoryView"
  __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_4, 0, 0);

#line 1265 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1265 "View.MemoryView"
  __PYX_ERR(1, 1265, __pyx_L1_error)

  /* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 */

#line 1263 "View.MemoryView"


#line 1263 "View.MemoryView"
  /* function exit code */

#line 1263 "View.MemoryView"
  __pyx_L1_error:;

#line 1263 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 1263 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 1263 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1263 "View.MemoryView"
  __pyx_r = -1;

#line 1263 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1263 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1263 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1263 "View.MemoryView"
  #endif

#line 1263 "View.MemoryView"
  return __pyx_r;

#line 1263 "View.MemoryView"
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg % dim
 * 
 */

#line 1268 "View.MemoryView"


#line 1268 "View.MemoryView"
static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, PyObject *__pyx_v_msg, int __pyx_v_dim) {

#line 1268 "View.MemoryView"
  int __pyx_r;

#line 1268 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1268 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 1268 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 1268 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1268 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1268 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1268 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1268 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1268 "View.MemoryView"
  #endif

#line 1268 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err_dim", 0);

#line 1268 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1269
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:
 *     raise <object>error, msg % dim             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */

#line 1269 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1269, __pyx_L1_error)

#line 1269 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 1269 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_v_msg, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1269, __pyx_L1_error)

#line 1269 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1269 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1269 "View.MemoryView"
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_t_2, 0, 0);

#line 1269 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1269 "View.MemoryView"
  __PYX_ERR(1, 1269, __pyx_L1_error)

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg % dim
 * 
 */

#line 1268 "View.MemoryView"


#line 1268 "View.MemoryView"
  /* function exit code */

#line 1268 "View.MemoryView"
  __pyx_L1_error:;

#line 1268 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 1268 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 1268 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1268 "View.MemoryView"
  __pyx_r = -1;

#line 1268 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_msg);

#line 1268 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1268 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1268 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1268 "View.MemoryView"
  #endif

#line 1268 "View.MemoryView"
  return __pyx_r;

#line 1268 "View.MemoryView"
}

/* "View.MemoryView":1272
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg
 * 
 */

#line 1272 "View.MemoryView"


#line 1272 "View.MemoryView"
static int __pyx_memoryview_err(PyObject *__pyx_v_error, PyObject *__pyx_v_msg) {

#line 1272 "View.MemoryView"
  int __pyx_r;

#line 1272 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1272 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1272 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1272 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1272 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1272 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1272 "View.MemoryView"
  #endif

#line 1272 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err", 0);

#line 1272 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1273
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:
 *     raise <object>error, msg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 */

#line 1273 "View.MemoryView"
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_v_msg, 0, 0);

#line 1273 "View.MemoryView"
  __PYX_ERR(1, 1273, __pyx_L1_error)

  /* "View.MemoryView":1272
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg
 * 
 */

#line 1272 "View.MemoryView"


#line 1272 "View.MemoryView"
  /* function exit code */

#line 1272 "View.MemoryView"
  __pyx_L1_error:;

#line 1272 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1272 "View.MemoryView"
  __pyx_r = -1;

#line 1272 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_msg);

#line 1272 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1272 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1272 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1272 "View.MemoryView"
  #endif

#line 1272 "View.MemoryView"
  return __pyx_r;

#line 1272 "View.MemoryView"
}

/* "View.MemoryView":1276
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise MemoryError
 * 
 */

#line 1276 "View.MemoryView"


#line 1276 "View.MemoryView"
static int __pyx_memoryview_err_no_memory(void) {

#line 1276 "View.MemoryView"
  int __pyx_r;

#line 1276 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1276 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1276 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1276 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1276 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1276 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1276 "View.MemoryView"
  #endif

#line 1276 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err_no_memory", 0);

  /* "View.MemoryView":1277
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:
 *     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1277 "View.MemoryView"
  PyErr_NoMemory(); __PYX_ERR(1, 1277, __pyx_L1_error)

  /* "View.MemoryView":1276
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise MemoryError
 * 
 */

#line 1276 "View.MemoryView"


#line 1276 "View.MemoryView"
  /* function exit code */

#line 1276 "View.MemoryView"
  __pyx_L1_error:;

#line 1276 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err_no_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1276 "View.MemoryView"
  __pyx_r = -1;

#line 1276 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1276 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1276 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1276 "View.MemoryView"
  #endif

#line 1276 "View.MemoryView"
  return __pyx_r;

#line 1276 "View.MemoryView"
}

/* "View.MemoryView":1281
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

#line 1281 "View.MemoryView"


#line 1281 "View.MemoryView"
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata
#line 1281 "View.MemoryView"
;
  size_t __pyx_v_itemsize
#line 1281 "View.MemoryView"
;
  int __pyx_v_i
#line 1281 "View.MemoryView"
;
  char __pyx_v_order
#line 1281 "View.MemoryView"
;
  int __pyx_v_broadcasting
#line 1281 "View.MemoryView"
;
  int __pyx_v_direct_copy
#line 1281 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp
#line 1281 "View.MemoryView"
;
  int __pyx_v_ndim
#line 1281 "View.MemoryView"
;

#line 1281 "View.MemoryView"
  int __pyx_r;

#line 1281 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1281 "View.MemoryView"
  int __pyx_t_2;

#line 1281 "View.MemoryView"
  int __pyx_t_3;

#line 1281 "View.MemoryView"
  int __pyx_t_4;

#line 1281 "View.MemoryView"
  int __pyx_t_5;

#line 1281 "View.MemoryView"
  int __pyx_t_6;

#line 1281 "View.MemoryView"
  void *__pyx_t_7;

#line 1281 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1281 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1281 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1281 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1281 "View.MemoryView"
  PyGILState_STATE __pyx_gilstate_save;

#line 1281 "View.MemoryView"
  #endif

  /* "View.MemoryView":1289
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */

#line 1289 "View.MemoryView"
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1290
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */

#line 1290 "View.MemoryView"
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;

#line 1290 "View.MemoryView"
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1292
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */

#line 1292 "View.MemoryView"
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1293
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */

#line 1293 "View.MemoryView"
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1294
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */

#line 1294 "View.MemoryView"
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1297
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */

#line 1297 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_src_ndim < __pyx_v_dst_ndim);

#line 1297 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1298
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */

#line 1298 "View.MemoryView"
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1297
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */

#line 1297 "View.MemoryView"
    goto __pyx_L3;

#line 1297 "View.MemoryView"
  }

  /* "View.MemoryView":1299
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */

#line 1299 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_dst_ndim < __pyx_v_src_ndim);

#line 1299 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1300
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */

#line 1300 "View.MemoryView"
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1299
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */

#line 1299 "View.MemoryView"
  }

#line 1299 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1302
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */

#line 1302 "View.MemoryView"
  __pyx_t_3 = __pyx_v_dst_ndim;

#line 1302 "View.MemoryView"
  __pyx_t_4 = __pyx_v_src_ndim;

#line 1302 "View.MemoryView"
  if ((__pyx_t_3 > __pyx_t_4)) {

#line 1302 "View.MemoryView"
    __pyx_t_5 = __pyx_t_3;

#line 1302 "View.MemoryView"
  } else {

#line 1302 "View.MemoryView"
    __pyx_t_5 = __pyx_t_4;

#line 1302 "View.MemoryView"
  }

#line 1302 "View.MemoryView"
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1304
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */

#line 1304 "View.MemoryView"
  __pyx_t_5 = __pyx_v_ndim;

#line 1304 "View.MemoryView"
  __pyx_t_3 = __pyx_t_5;

#line 1304 "View.MemoryView"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1304 "View.MemoryView"
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1305
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */

#line 1305 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i]));

#line 1305 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1306
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */

#line 1306 "View.MemoryView"
      __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) == 1);

#line 1306 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":1307
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */

#line 1307 "View.MemoryView"
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1308
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */

#line 1308 "View.MemoryView"
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1306
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */

#line 1306 "View.MemoryView"
        goto __pyx_L7;

#line 1306 "View.MemoryView"
      }

      /* "View.MemoryView":1310
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */

#line 1310 "View.MemoryView"
      /*else*/ {

#line 1310 "View.MemoryView"
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1310, __pyx_L1_error)

#line 1310 "View.MemoryView"
      }

#line 1310 "View.MemoryView"
      __pyx_L7:;

      /* "View.MemoryView":1305
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */

#line 1305 "View.MemoryView"
    }

    /* "View.MemoryView":1312
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 */

#line 1312 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0);

#line 1312 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1313
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */

#line 1313 "View.MemoryView"
      __pyx_t_6 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_kp_s_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1313, __pyx_L1_error)

      /* "View.MemoryView":1312
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 */

#line 1312 "View.MemoryView"
    }

#line 1312 "View.MemoryView"
  }

  /* "View.MemoryView":1315
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */

#line 1315 "View.MemoryView"
  __pyx_t_2 = __pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

#line 1315 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1317
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */

#line 1317 "View.MemoryView"
    __pyx_t_2 = (!__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim));

#line 1317 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1318
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */

#line 1318 "View.MemoryView"
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1317
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */

#line 1317 "View.MemoryView"
    }

    /* "View.MemoryView":1320
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */

#line 1320 "View.MemoryView"
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1320, __pyx_L1_error)

#line 1320 "View.MemoryView"
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1321
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */

#line 1321 "View.MemoryView"
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1315
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */

#line 1315 "View.MemoryView"
  }

  /* "View.MemoryView":1323
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1323 "View.MemoryView"
  __pyx_t_2 = (!__pyx_v_broadcasting);

#line 1323 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1326
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */

#line 1326 "View.MemoryView"
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim);

#line 1326 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1327
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */

#line 1327 "View.MemoryView"
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1326
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */

#line 1326 "View.MemoryView"
      goto __pyx_L12;

#line 1326 "View.MemoryView"
    }

    /* "View.MemoryView":1328
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */

#line 1328 "View.MemoryView"
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim);

#line 1328 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1329
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */

#line 1329 "View.MemoryView"
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1328
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */

#line 1328 "View.MemoryView"
    }

#line 1328 "View.MemoryView"
    __pyx_L12:;

    /* "View.MemoryView":1331
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */

#line 1331 "View.MemoryView"
    if (__pyx_v_direct_copy) {

      /* "View.MemoryView":1333
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 */

#line 1333 "View.MemoryView"
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1334
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 */

#line 1334 "View.MemoryView"
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1335
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */

#line 1335 "View.MemoryView"
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1336
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */

#line 1336 "View.MemoryView"
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1337
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */

#line 1337 "View.MemoryView"
      __pyx_r = 0;

#line 1337 "View.MemoryView"
      goto __pyx_L0;

      /* "View.MemoryView":1331
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */

#line 1331 "View.MemoryView"
    }

    /* "View.MemoryView":1323
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1323 "View.MemoryView"
  }

  /* "View.MemoryView":1339
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1339 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_order == 'F');

#line 1339 "View.MemoryView"
  if (__pyx_t_2) {

#line 1339 "View.MemoryView"
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));

#line 1339 "View.MemoryView"
  }

#line 1339 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1342
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */

#line 1342 "View.MemoryView"
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 1342, __pyx_L1_error)

    /* "View.MemoryView":1343
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */

#line 1343 "View.MemoryView"
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 1343, __pyx_L1_error)

    /* "View.MemoryView":1339
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1339 "View.MemoryView"
  }

  /* "View.MemoryView":1345
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 */

#line 1345 "View.MemoryView"
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1346
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 */

#line 1346 "View.MemoryView"
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1347
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */

#line 1347 "View.MemoryView"
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1349
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

#line 1349 "View.MemoryView"
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1350
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */

#line 1350 "View.MemoryView"
  __pyx_r = 0;

#line 1350 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1281
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

#line 1281 "View.MemoryView"


#line 1281 "View.MemoryView"
  /* function exit code */

#line 1281 "View.MemoryView"
  __pyx_L1_error:;

#line 1281 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1281 "View.MemoryView"
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1281 "View.MemoryView"
  #endif

#line 1281 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1281 "View.MemoryView"
  __pyx_r = -1;

#line 1281 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1281 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1281 "View.MemoryView"
  #endif

#line 1281 "View.MemoryView"
  __pyx_L0:;

#line 1281 "View.MemoryView"
  return __pyx_r;

#line 1281 "View.MemoryView"
}

/* "View.MemoryView":1353
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

#line 1353 "View.MemoryView"


#line 1353 "View.MemoryView"
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i
#line 1353 "View.MemoryView"
;
  int __pyx_v_offset
#line 1353 "View.MemoryView"
;

#line 1353 "View.MemoryView"
  int __pyx_t_1;

#line 1353 "View.MemoryView"
  int __pyx_t_2;

#line 1353 "View.MemoryView"
  int __pyx_t_3;

  /* "View.MemoryView":1357
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */

#line 1357 "View.MemoryView"
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1359
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */

#line 1359 "View.MemoryView"
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {

#line 1359 "View.MemoryView"
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1360
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */

#line 1360 "View.MemoryView"
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1361
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */

#line 1361 "View.MemoryView"
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1362
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */

#line 1362 "View.MemoryView"
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);

#line 1362 "View.MemoryView"
  }

  /* "View.MemoryView":1364
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */

#line 1364 "View.MemoryView"
  __pyx_t_1 = __pyx_v_offset;

#line 1364 "View.MemoryView"
  __pyx_t_2 = __pyx_t_1;

#line 1364 "View.MemoryView"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 1364 "View.MemoryView"
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1365
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */

#line 1365 "View.MemoryView"
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1366
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */

#line 1366 "View.MemoryView"
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1367
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1367 "View.MemoryView"
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;

#line 1367 "View.MemoryView"
  }

  /* "View.MemoryView":1353
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

#line 1353 "View.MemoryView"


#line 1353 "View.MemoryView"
  /* function exit code */

#line 1353 "View.MemoryView"
}

/* "View.MemoryView":1375
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) nogil:             # <<<<<<<<<<<<<<
 * 
 *     if dtype_is_object:
 */

#line 1375 "View.MemoryView"


#line 1375 "View.MemoryView"
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {

  /* "View.MemoryView":1377
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 */

#line 1377 "View.MemoryView"
  if (__pyx_v_dtype_is_object) {

    /* "View.MemoryView":1378
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 */

#line 1378 "View.MemoryView"
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1377
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 */

#line 1377 "View.MemoryView"
  }

  /* "View.MemoryView":1375
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) nogil:             # <<<<<<<<<<<<<<
 * 
 *     if dtype_is_object:
 */

#line 1375 "View.MemoryView"


#line 1375 "View.MemoryView"
  /* function exit code */

#line 1375 "View.MemoryView"
}

/* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

#line 1381 "View.MemoryView"


#line 1381 "View.MemoryView"
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {

#line 1381 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1381 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1381 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1381 "View.MemoryView"
  #endif

#line 1381 "View.MemoryView"
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1384
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */

#line 1384 "View.MemoryView"
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

#line 1381 "View.MemoryView"


#line 1381 "View.MemoryView"
  /* function exit code */

#line 1381 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1381 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1381 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1381 "View.MemoryView"
  #endif

#line 1381 "View.MemoryView"
}

/* "View.MemoryView":1387
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

#line 1387 "View.MemoryView"


#line 1387 "View.MemoryView"
static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i
#line 1387 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stride
#line 1387 "View.MemoryView"
;

#line 1387 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1387 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1387 "View.MemoryView"
  Py_ssize_t __pyx_t_2;

#line 1387 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 1387 "View.MemoryView"
  int __pyx_t_4;

#line 1387 "View.MemoryView"
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1390
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(shape[0]):
 */

#line 1390 "View.MemoryView"
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1392
 *     cdef Py_ssize_t stride = strides[0]
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */

#line 1392 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_shape[0]);

#line 1392 "View.MemoryView"
  __pyx_t_2 = __pyx_t_1;

#line 1392 "View.MemoryView"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 1392 "View.MemoryView"
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1393
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */

#line 1393 "View.MemoryView"
    __pyx_t_4 = (__pyx_v_ndim == 1);

#line 1393 "View.MemoryView"
    if (__pyx_t_4) {

      /* "View.MemoryView":1394
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */

#line 1394 "View.MemoryView"
      if (__pyx_v_inc) {

        /* "View.MemoryView":1395
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */

#line 1395 "View.MemoryView"
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1394
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */

#line 1394 "View.MemoryView"
        goto __pyx_L6;

#line 1394 "View.MemoryView"
      }

      /* "View.MemoryView":1397
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 */

#line 1397 "View.MemoryView"
      /*else*/ {

#line 1397 "View.MemoryView"
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));

#line 1397 "View.MemoryView"
      }

#line 1397 "View.MemoryView"
      __pyx_L6:;

      /* "View.MemoryView":1393
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */

#line 1393 "View.MemoryView"
      goto __pyx_L5;

#line 1393 "View.MemoryView"
    }

    /* "View.MemoryView":1399
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += stride
 */

#line 1399 "View.MemoryView"
    /*else*/ {

#line 1399 "View.MemoryView"
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);

#line 1399 "View.MemoryView"
    }

#line 1399 "View.MemoryView"
    __pyx_L5:;

    /* "View.MemoryView":1401
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 * 
 *         data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1401 "View.MemoryView"
    __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

#line 1401 "View.MemoryView"
  }

  /* "View.MemoryView":1387
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

#line 1387 "View.MemoryView"


#line 1387 "View.MemoryView"
  /* function exit code */

#line 1387 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1387 "View.MemoryView"
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

#line 1407 "View.MemoryView"


#line 1407 "View.MemoryView"
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1410
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 */

#line 1410 "View.MemoryView"
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1411
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)             # <<<<<<<<<<<<<<
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 * 
 */

#line 1411 "View.MemoryView"
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1412
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1412 "View.MemoryView"
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

#line 1407 "View.MemoryView"


#line 1407 "View.MemoryView"
  /* function exit code */

#line 1407 "View.MemoryView"
}

/* "View.MemoryView":1416
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

#line 1416 "View.MemoryView"


#line 1416 "View.MemoryView"
static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i
#line 1416 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stride
#line 1416 "View.MemoryView"
;
  Py_ssize_t __pyx_v_extent
#line 1416 "View.MemoryView"
;

#line 1416 "View.MemoryView"
  int __pyx_t_1;

#line 1416 "View.MemoryView"
  Py_ssize_t __pyx_t_2;

#line 1416 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 1416 "View.MemoryView"
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1420
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */

#line 1420 "View.MemoryView"
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1421
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */

#line 1421 "View.MemoryView"
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1423
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */

#line 1423 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_ndim == 1);

#line 1423 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1424
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */

#line 1424 "View.MemoryView"
    __pyx_t_2 = __pyx_v_extent;

#line 1424 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 1424 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1424 "View.MemoryView"
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1425
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */

#line 1425 "View.MemoryView"
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1426
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */

#line 1426 "View.MemoryView"
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

#line 1426 "View.MemoryView"
    }

    /* "View.MemoryView":1423
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */

#line 1423 "View.MemoryView"
    goto __pyx_L3;

#line 1423 "View.MemoryView"
  }

  /* "View.MemoryView":1428
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride
 */

#line 1428 "View.MemoryView"
  /*else*/ {

#line 1428 "View.MemoryView"
    __pyx_t_2 = __pyx_v_extent;

#line 1428 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 1428 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1428 "View.MemoryView"
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1429
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)             # <<<<<<<<<<<<<<
 *             data += stride
 * 
 */

#line 1429 "View.MemoryView"
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1430
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1430 "View.MemoryView"
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

#line 1430 "View.MemoryView"
    }

#line 1430 "View.MemoryView"
  }

#line 1430 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1416
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

#line 1416 "View.MemoryView"


#line 1416 "View.MemoryView"
  /* function exit code */

#line 1416 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = 
#line 1 "(tree fragment)"
{"__pyx_unpickle_Enum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0
#line 1 "(tree fragment)"
;
  long __pyx_v___pyx_checksum
#line 1 "(tree fragment)"
;
  PyObject *__pyx_v___pyx_state = 0
#line 1 "(tree fragment)"
;

#line 1 "(tree fragment)"
  #if !CYTHON_METH_FASTCALL

#line 1 "(tree fragment)"
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
  #endif

#line 1 "(tree fragment)"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);

#line 1 "(tree fragment)"
  {

#line 1 "(tree fragment)"
    #if CYTHON_USE_MODULE_STATE

#line 1 "(tree fragment)"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};

#line 1 "(tree fragment)"
    #else

#line 1 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};

#line 1 "(tree fragment)"
    #endif

#line 1 "(tree fragment)"
    PyObject* values[3] = {0,0,0};

#line 1 "(tree fragment)"
    if (__pyx_kwds) {

#line 1 "(tree fragment)"
      Py_ssize_t kw_args;

#line 1 "(tree fragment)"
      switch (__pyx_nargs) {
        case  3: 
#line 1 "(tree fragment)"
values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 1 "(tree fragment)"
values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 1 "(tree fragment)"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 1 "(tree fragment)"
break;
        default: 
#line 1 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 1 "(tree fragment)"
      }

#line 1 "(tree fragment)"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 1 "(tree fragment)"
      switch (__pyx_nargs) {

#line 1 "(tree fragment)"
        case  0:

#line 1 "(tree fragment)"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;

#line 1 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else 
#line 1 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;

#line 1 "(tree fragment)"
        case  1:

#line 1 "(tree fragment)"
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;

#line 1 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); 
#line 1 "(tree fragment)"
__PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
        }

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;

#line 1 "(tree fragment)"
        case  2:

#line 1 "(tree fragment)"
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 1 "(tree fragment)"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); 
#line 1 "(tree fragment)"
__PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
        }

#line 1 "(tree fragment)"
      }

#line 1 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 1 "(tree fragment)"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 1 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
      }

#line 1 "(tree fragment)"
    } else if (unlikely(__pyx_nargs != 3)) {

#line 1 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 1 "(tree fragment)"
    } else {

#line 1 "(tree fragment)"
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 1 "(tree fragment)"
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 1 "(tree fragment)"
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 1 "(tree fragment)"
    }

#line 1 "(tree fragment)"
    __pyx_v___pyx_type = values[0];

#line 1 "(tree fragment)"
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
    __pyx_v___pyx_state = values[2];

#line 1 "(tree fragment)"
  }

#line 1 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 1 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, __pyx_nargs); 
#line 1 "(tree fragment)"
__PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
  __pyx_L3_error:;

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return NULL;

#line 1 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0
#line 1 "(tree fragment)"
;
  PyObject *__pyx_v___pyx_result = 0
#line 1 "(tree fragment)"
;

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_t_2;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_3 = NULL;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_4 = NULL;

#line 1 "(tree fragment)"
  int __pyx_t_5;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__8, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 */

#line 5 "(tree fragment)"
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 5 "(tree fragment)"
    __Pyx_INCREF(__pyx_n_s_PickleError);

#line 5 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_n_s_PickleError);

#line 5 "(tree fragment)"
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);

#line 5 "(tree fragment)"
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 5 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 5 "(tree fragment)"
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 5 "(tree fragment)"
    __Pyx_INCREF(__pyx_t_1);

#line 5 "(tree fragment)"
    __pyx_v___pyx_PickleError = __pyx_t_1;

#line 5 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 5 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */

#line 6 "(tree fragment)"
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 6 "(tree fragment)"
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 6 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 6 "(tree fragment)"
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);

#line 6 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 6 "(tree fragment)"
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */

#line 4 "(tree fragment)"
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */

#line 7 "(tree fragment)"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_3);

#line 7 "(tree fragment)"
  __pyx_t_4 = NULL;

#line 7 "(tree fragment)"
  __pyx_t_5 = 0;

#line 7 "(tree fragment)"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 7 "(tree fragment)"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 7 "(tree fragment)"
    if (likely(__pyx_t_4)) {

#line 7 "(tree fragment)"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 7 "(tree fragment)"
      __Pyx_INCREF(__pyx_t_4);

#line 7 "(tree fragment)"
      __Pyx_INCREF(function);

#line 7 "(tree fragment)"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 7 "(tree fragment)"
      __pyx_t_5 = 1;

#line 7 "(tree fragment)"
    }

#line 7 "(tree fragment)"
  }

#line 7 "(tree fragment)"
  {

#line 7 "(tree fragment)"
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};

#line 7 "(tree fragment)"
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);

#line 7 "(tree fragment)"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 7 "(tree fragment)"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 7 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 7 "(tree fragment)"
  }

#line 7 "(tree fragment)"
  __pyx_v___pyx_result = __pyx_t_1;

#line 7 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */

#line 8 "(tree fragment)"
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);

#line 8 "(tree fragment)"
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */

#line 9 "(tree fragment)"
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "(tree fragment)"
    __pyx_t_1 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 9 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */

#line 8 "(tree fragment)"
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */

#line 10 "(tree fragment)"
  __Pyx_XDECREF(__pyx_r);

#line 10 "(tree fragment)"
  __Pyx_INCREF(__pyx_v___pyx_result);

#line 10 "(tree fragment)"
  __pyx_r = __pyx_v___pyx_result;

#line 10 "(tree fragment)"
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_3);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __pyx_L0:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v___pyx_result);

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {

#line 11 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 11 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 11 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 11 "(tree fragment)"
  int __pyx_t_2;

#line 11 "(tree fragment)"
  Py_ssize_t __pyx_t_3;

#line 11 "(tree fragment)"
  int __pyx_t_4;

#line 11 "(tree fragment)"
  PyObject *__pyx_t_5 = NULL;

#line 11 "(tree fragment)"
  PyObject *__pyx_t_6 = NULL;

#line 11 "(tree fragment)"
  PyObject *__pyx_t_7 = NULL;

#line 11 "(tree fragment)"
  int __pyx_t_8;

#line 11 "(tree fragment)"
  int __pyx_lineno = 0;

#line 11 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 11 "(tree fragment)"
  int __pyx_clineno = 0;

#line 11 "(tree fragment)"
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */

#line 12 "(tree fragment)"
  if (unlikely(__pyx_v___pyx_state == Py_None)) {

#line 12 "(tree fragment)"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 12 "(tree fragment)"
    __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "(tree fragment)"
  }

#line 12 "(tree fragment)"
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 12 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_t_1);

#line 12 "(tree fragment)"
  __Pyx_GOTREF(__pyx_v___pyx_result->name);

#line 12 "(tree fragment)"
  __Pyx_DECREF(__pyx_v___pyx_result->name);

#line 12 "(tree fragment)"
  __pyx_v___pyx_result->name = __pyx_t_1;

#line 12 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */

#line 13 "(tree fragment)"
  if (unlikely(__pyx_v___pyx_state == Py_None)) {

#line 13 "(tree fragment)"
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 13 "(tree fragment)"
    __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
  }

#line 13 "(tree fragment)"
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
  __pyx_t_4 = (__pyx_t_3 > 1);

#line 13 "(tree fragment)"
  if (__pyx_t_4) {

#line 13 "(tree fragment)"
  } else {

#line 13 "(tree fragment)"
    __pyx_t_2 = __pyx_t_4;

#line 13 "(tree fragment)"
    goto __pyx_L4_bool_binop_done;

#line 13 "(tree fragment)"
  }

#line 13 "(tree fragment)"
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
  __pyx_t_2 = __pyx_t_4;

#line 13 "(tree fragment)"
  __pyx_L4_bool_binop_done:;

#line 13 "(tree fragment)"
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */

#line 14 "(tree fragment)"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_5);

#line 14 "(tree fragment)"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_6);

#line 14 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 14 "(tree fragment)"
    if (unlikely(__pyx_v___pyx_state == Py_None)) {

#line 14 "(tree fragment)"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 14 "(tree fragment)"
      __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    }

#line 14 "(tree fragment)"
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_5);

#line 14 "(tree fragment)"
    __pyx_t_7 = NULL;

#line 14 "(tree fragment)"
    __pyx_t_8 = 0;

#line 14 "(tree fragment)"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 14 "(tree fragment)"
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);

#line 14 "(tree fragment)"
      if (likely(__pyx_t_7)) {

#line 14 "(tree fragment)"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 14 "(tree fragment)"
        __Pyx_INCREF(__pyx_t_7);

#line 14 "(tree fragment)"
        __Pyx_INCREF(function);

#line 14 "(tree fragment)"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 14 "(tree fragment)"
        __pyx_t_8 = 1;

#line 14 "(tree fragment)"
      }

#line 14 "(tree fragment)"
    }

#line 14 "(tree fragment)"
    {

#line 14 "(tree fragment)"
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};

#line 14 "(tree fragment)"
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);

#line 14 "(tree fragment)"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 14 "(tree fragment)"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 14 "(tree fragment)"
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
      __Pyx_GOTREF(__pyx_t_1);

#line 14 "(tree fragment)"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 14 "(tree fragment)"
    }

#line 14 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */

#line 13 "(tree fragment)"
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  /* function exit code */

#line 11 "(tree fragment)"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 11 "(tree fragment)"
  goto __pyx_L0;

#line 11 "(tree fragment)"
  __pyx_L1_error:;

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_5);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_6);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_7);

#line 11 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "(tree fragment)"
  __pyx_r = 0;

#line 11 "(tree fragment)"
  __pyx_L0:;

#line 11 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 11 "(tree fragment)"
  return __pyx_r;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct_5getdb_AllDb __pyx_vtable_5getdb_AllDb;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_5getdb_AllDb(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_obj_5getdb_AllDb *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_LIMITED_API

#line 11 "(tree fragment)"
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);

#line 11 "(tree fragment)"
  o = alloc_func(t, 0);

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  p = ((struct __pyx_obj_5getdb_AllDb *)o);

#line 11 "(tree fragment)"
  p->__pyx_vtab = __pyx_vtabptr_5getdb_AllDb;

#line 11 "(tree fragment)"
  new((void*)&(p->active)) __Pyx_Optional_Type<lgraph_api::olap::ParallelBitset> ();

#line 11 "(tree fragment)"
  new((void*)&(p->txn)) __Pyx_Optional_Type<lgraph_api::Transaction> ();

#line 11 "(tree fragment)"
  new((void*)&(p->label_key)) __Pyx_Optional_Type<std::string> ();

#line 11 "(tree fragment)"
  new((void*)&(p->feature_key)) __Pyx_Optional_Type<std::string> ();

#line 11 "(tree fragment)"
  new((void*)&(p->s_key)) __Pyx_Optional_Type<std::string> ();

#line 11 "(tree fragment)"
  p->node.data = NULL;

#line 11 "(tree fragment)"
  p->node.memview = NULL;

#line 11 "(tree fragment)"
  p->flag.data = NULL;

#line 11 "(tree fragment)"
  p->flag.memview = NULL;

#line 11 "(tree fragment)"
  p->feature.data = NULL;

#line 11 "(tree fragment)"
  p->feature.memview = NULL;

#line 11 "(tree fragment)"
  p->label.data = NULL;

#line 11 "(tree fragment)"
  p->label.memview = NULL;

#line 11 "(tree fragment)"
  p->src_list.data = NULL;

#line 11 "(tree fragment)"
  p->src_list.memview = NULL;

#line 11 "(tree fragment)"
  p->dst_list.data = NULL;

#line 11 "(tree fragment)"
  p->dst_list.memview = NULL;

#line 11 "(tree fragment)"
  p->local_node_num.data = NULL;

#line 11 "(tree fragment)"
  p->local_node_num.memview = NULL;

#line 11 "(tree fragment)"
  p->local_edge_num.data = NULL;

#line 11 "(tree fragment)"
  p->local_edge_num.memview = NULL;

#line 11 "(tree fragment)"
  p->local_feature.data = NULL;

#line 11 "(tree fragment)"
  p->local_feature.memview = NULL;

#line 11 "(tree fragment)"
  p->local_node.data = NULL;

#line 11 "(tree fragment)"
  p->local_node.memview = NULL;

#line 11 "(tree fragment)"
  p->local_label.data = NULL;

#line 11 "(tree fragment)"
  p->local_label.memview = NULL;

#line 11 "(tree fragment)"
  p->index.data = NULL;

#line 11 "(tree fragment)"
  p->index.memview = NULL;

#line 11 "(tree fragment)"
  p->edge_index.data = NULL;

#line 11 "(tree fragment)"
  p->edge_index.memview = NULL;

#line 11 "(tree fragment)"
  p->local_src_list.data = NULL;

#line 11 "(tree fragment)"
  p->local_src_list.memview = NULL;

#line 11 "(tree fragment)"
  p->local_dst_list.data = NULL;

#line 11 "(tree fragment)"
  p->local_dst_list.memview = NULL;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_5getdb_AllDb(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_obj_5getdb_AllDb *p = (struct __pyx_obj_5getdb_AllDb *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 11 "(tree fragment)"
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5getdb_AllDb) {

#line 11 "(tree fragment)"
      if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __Pyx_call_destructor(p->active);

#line 11 "(tree fragment)"
  __Pyx_call_destructor(p->txn);

#line 11 "(tree fragment)"
  __Pyx_call_destructor(p->label_key);

#line 11 "(tree fragment)"
  __Pyx_call_destructor(p->feature_key);

#line 11 "(tree fragment)"
  __Pyx_call_destructor(p->s_key);

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->node, 1);

#line 11 "(tree fragment)"
  p->node.memview = NULL; p->node.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->flag, 1);

#line 11 "(tree fragment)"
  p->flag.memview = NULL; p->flag.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->feature, 1);

#line 11 "(tree fragment)"
  p->feature.memview = NULL; p->feature.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->label, 1);

#line 11 "(tree fragment)"
  p->label.memview = NULL; p->label.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->src_list, 1);

#line 11 "(tree fragment)"
  p->src_list.memview = NULL; p->src_list.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->dst_list, 1);

#line 11 "(tree fragment)"
  p->dst_list.memview = NULL; p->dst_list.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_node_num, 1);

#line 11 "(tree fragment)"
  p->local_node_num.memview = NULL; p->local_node_num.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_edge_num, 1);

#line 11 "(tree fragment)"
  p->local_edge_num.memview = NULL; p->local_edge_num.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_feature, 1);

#line 11 "(tree fragment)"
  p->local_feature.memview = NULL; p->local_feature.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_node, 1);

#line 11 "(tree fragment)"
  p->local_node.memview = NULL; p->local_node.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_label, 1);

#line 11 "(tree fragment)"
  p->local_label.memview = NULL; p->local_label.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->index, 1);

#line 11 "(tree fragment)"
  p->index.memview = NULL; p->index.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->edge_index, 1);

#line 11 "(tree fragment)"
  p->edge_index.memview = NULL; p->edge_index.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_src_list, 1);

#line 11 "(tree fragment)"
  p->local_src_list.memview = NULL; p->local_src_list.data = NULL;

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->local_dst_list, 1);

#line 11 "(tree fragment)"
  p->local_dst_list.memview = NULL; p->local_dst_list.data = NULL;

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_5getdb_AllDb[] = {

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5getdb_5AllDb_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5getdb_5AllDb_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#if CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
static PyType_Slot __pyx_type_5getdb_AllDb_slots[] = {

#line 11 "(tree fragment)"
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5getdb_AllDb},

#line 11 "(tree fragment)"
  {Py_tp_methods, (void *)__pyx_methods_5getdb_AllDb},

#line 11 "(tree fragment)"
  {Py_tp_new, (void *)__pyx_tp_new_5getdb_AllDb},

#line 11 "(tree fragment)"
  {0, 0},

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static PyType_Spec __pyx_type_5getdb_AllDb_spec = {

#line 11 "(tree fragment)"
  "getdb.AllDb",

#line 11 "(tree fragment)"
  sizeof(struct __pyx_obj_5getdb_AllDb),

#line 11 "(tree fragment)"
  0,

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,

#line 11 "(tree fragment)"
  __pyx_type_5getdb_AllDb_slots,

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#else

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type_5getdb_AllDb = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "getdb.""AllDb", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_obj_5getdb_AllDb), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_5getdb_AllDb, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  0, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  0, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  0, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  0, /*tp_traverse*/

#line 11 "(tree fragment)"
  0, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_5getdb_AllDb, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  0, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  #if !CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_5getdb_AllDb, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  NULL, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_pypy_flags*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct_array __pyx_vtable_array;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_array_obj *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_LIMITED_API

#line 11 "(tree fragment)"
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);

#line 11 "(tree fragment)"
  o = alloc_func(t, 0);

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  p = ((struct __pyx_array_obj *)o);

#line 11 "(tree fragment)"
  p->__pyx_vtab = __pyx_vtabptr_array;

#line 11 "(tree fragment)"
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
  bad:

#line 11 "(tree fragment)"
  Py_DECREF(o); o = 0;

#line 11 "(tree fragment)"
  return NULL;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_array(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 11 "(tree fragment)"
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_array) {

#line 11 "(tree fragment)"
      if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  {

#line 11 "(tree fragment)"
    PyObject *etype, *eval, *etb;

#line 11 "(tree fragment)"
    PyErr_Fetch(&etype, &eval, &etb);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 11 "(tree fragment)"
    __pyx_array___dealloc__(o);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 11 "(tree fragment)"
    PyErr_Restore(etype, eval, etb);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  Py_CLEAR(p->mode);

#line 11 "(tree fragment)"
  Py_CLEAR(p->_format);

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {

#line 11 "(tree fragment)"
  PyObject *r;

#line 11 "(tree fragment)"
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;

#line 11 "(tree fragment)"
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);

#line 11 "(tree fragment)"
  Py_DECREF(x);

#line 11 "(tree fragment)"
  return r;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {

#line 11 "(tree fragment)"
  if (v) {

#line 11 "(tree fragment)"
    return __pyx_array___setitem__(o, i, v);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  else {

#line 11 "(tree fragment)"
    __Pyx_TypeName o_type_name;

#line 11 "(tree fragment)"
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));

#line 11 "(tree fragment)"
    PyErr_Format(PyExc_NotImplementedError,

#line 11 "(tree fragment)"
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);

#line 11 "(tree fragment)"
    __Pyx_DECREF_TypeName(o_type_name);

#line 11 "(tree fragment)"
    return -1;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {

#line 11 "(tree fragment)"
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);

#line 11 "(tree fragment)"
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {

#line 11 "(tree fragment)"
    PyErr_Clear();

#line 11 "(tree fragment)"
    v = __pyx_array___getattr__(o, n);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return v;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_array[] = {

#line 11 "(tree fragment)"
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static struct PyGetSetDef __pyx_getsets_array[] = {

#line 11 "(tree fragment)"
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#if CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
#if !CYTHON_COMPILING_IN_LIMITED_API

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyBufferProcs __pyx_tp_as_buffer_array = {

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getreadbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getwritebuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getsegcount*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getcharbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_array_getbuffer, /*bf_getbuffer*/

#line 11 "(tree fragment)"
  0, /*bf_releasebuffer*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"
static PyType_Slot __pyx_type___pyx_array_slots[] = {

#line 11 "(tree fragment)"
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_array},

#line 11 "(tree fragment)"
  {Py_sq_length, (void *)__pyx_array___len__},

#line 11 "(tree fragment)"
  {Py_sq_item, (void *)__pyx_sq_item_array},

#line 11 "(tree fragment)"
  {Py_mp_length, (void *)__pyx_array___len__},

#line 11 "(tree fragment)"
  {Py_mp_subscript, (void *)__pyx_array___getitem__},

#line 11 "(tree fragment)"
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_array},

#line 11 "(tree fragment)"
  {Py_tp_getattro, (void *)__pyx_tp_getattro_array},

#line 11 "(tree fragment)"
  {Py_tp_methods, (void *)__pyx_methods_array},

#line 11 "(tree fragment)"
  {Py_tp_getset, (void *)__pyx_getsets_array},

#line 11 "(tree fragment)"
  {Py_tp_new, (void *)__pyx_tp_new_array},

#line 11 "(tree fragment)"
  {0, 0},

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static PyType_Spec __pyx_type___pyx_array_spec = {

#line 11 "(tree fragment)"
  "getdb.array",

#line 11 "(tree fragment)"
  sizeof(struct __pyx_array_obj),

#line 11 "(tree fragment)"
  0,

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,

#line 11 "(tree fragment)"
  __pyx_type___pyx_array_slots,

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#else

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PySequenceMethods __pyx_tp_as_sequence_array = {

#line 11 "(tree fragment)"
  __pyx_array___len__, /*sq_length*/

#line 11 "(tree fragment)"
  0, /*sq_concat*/

#line 11 "(tree fragment)"
  0, /*sq_repeat*/

#line 11 "(tree fragment)"
  __pyx_sq_item_array, /*sq_item*/

#line 11 "(tree fragment)"
  0, /*sq_slice*/

#line 11 "(tree fragment)"
  0, /*sq_ass_item*/

#line 11 "(tree fragment)"
  0, /*sq_ass_slice*/

#line 11 "(tree fragment)"
  0, /*sq_contains*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_concat*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_repeat*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMappingMethods __pyx_tp_as_mapping_array = {

#line 11 "(tree fragment)"
  __pyx_array___len__, /*mp_length*/

#line 11 "(tree fragment)"
  __pyx_array___getitem__, /*mp_subscript*/

#line 11 "(tree fragment)"
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyBufferProcs __pyx_tp_as_buffer_array = {

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getreadbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getwritebuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getsegcount*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getcharbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_array_getbuffer, /*bf_getbuffer*/

#line 11 "(tree fragment)"
  0, /*bf_releasebuffer*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_array = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "getdb.""array", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_array, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  __pyx_tp_getattro_array, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  0, /*tp_traverse*/

#line 11 "(tree fragment)"
  0, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_array, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  __pyx_getsets_array, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  #if !CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_array, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  NULL, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_pypy_flags*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_LIMITED_API

#line 11 "(tree fragment)"
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);

#line 11 "(tree fragment)"
  o = alloc_func(t, 0);

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  p = ((struct __pyx_MemviewEnum_obj *)o);

#line 11 "(tree fragment)"
  p->name = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_Enum(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_Enum) {

#line 11 "(tree fragment)"
      if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  Py_CLEAR(p->name);

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;

#line 11 "(tree fragment)"
  if (p->name) {

#line 11 "(tree fragment)"
    e = (*v)(p->name, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear_Enum(PyObject *o) {

#line 11 "(tree fragment)"
  PyObject* tmp;

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->name);

#line 11 "(tree fragment)"
  p->name = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_specialmethod___pyx_MemviewEnum___repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {

#line 11 "(tree fragment)"
  return __pyx_MemviewEnum___repr__(self);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_Enum[] = {

#line 11 "(tree fragment)"
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_MemviewEnum___repr__, METH_NOARGS|METH_COEXIST, 0},

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#if CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
static PyType_Slot __pyx_type___pyx_MemviewEnum_slots[] = {

#line 11 "(tree fragment)"
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_Enum},

#line 11 "(tree fragment)"
  {Py_tp_repr, (void *)__pyx_MemviewEnum___repr__},

#line 11 "(tree fragment)"
  {Py_tp_traverse, (void *)__pyx_tp_traverse_Enum},

#line 11 "(tree fragment)"
  {Py_tp_clear, (void *)__pyx_tp_clear_Enum},

#line 11 "(tree fragment)"
  {Py_tp_methods, (void *)__pyx_methods_Enum},

#line 11 "(tree fragment)"
  {Py_tp_init, (void *)__pyx_MemviewEnum___init__},

#line 11 "(tree fragment)"
  {Py_tp_new, (void *)__pyx_tp_new_Enum},

#line 11 "(tree fragment)"
  {0, 0},

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static PyType_Spec __pyx_type___pyx_MemviewEnum_spec = {

#line 11 "(tree fragment)"
  "getdb.Enum",

#line 11 "(tree fragment)"
  sizeof(struct __pyx_MemviewEnum_obj),

#line 11 "(tree fragment)"
  0,

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,

#line 11 "(tree fragment)"
  __pyx_type___pyx_MemviewEnum_slots,

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#else

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_MemviewEnum = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "getdb.""Enum", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_MemviewEnum___repr__, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  0, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  0, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  0, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse_Enum, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear_Enum, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_Enum, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  0, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  #if !CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_MemviewEnum___init__, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_Enum, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  NULL, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_pypy_flags*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_LIMITED_API

#line 11 "(tree fragment)"
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);

#line 11 "(tree fragment)"
  o = alloc_func(t, 0);

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  p = ((struct __pyx_memoryview_obj *)o);

#line 11 "(tree fragment)"
  p->__pyx_vtab = __pyx_vtabptr_memoryview;

#line 11 "(tree fragment)"
  p->obj = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->_size = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->_array_interface = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->view.obj = NULL;

#line 11 "(tree fragment)"
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
  bad:

#line 11 "(tree fragment)"
  Py_DECREF(o); o = 0;

#line 11 "(tree fragment)"
  return NULL;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_memoryview(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_memoryview) {

#line 11 "(tree fragment)"
      if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  {

#line 11 "(tree fragment)"
    PyObject *etype, *eval, *etb;

#line 11 "(tree fragment)"
    PyErr_Fetch(&etype, &eval, &etb);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 11 "(tree fragment)"
    __pyx_memoryview___dealloc__(o);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 11 "(tree fragment)"
    PyErr_Restore(etype, eval, etb);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  Py_CLEAR(p->obj);

#line 11 "(tree fragment)"
  Py_CLEAR(p->_size);

#line 11 "(tree fragment)"
  Py_CLEAR(p->_array_interface);

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;

#line 11 "(tree fragment)"
  if (p->obj) {

#line 11 "(tree fragment)"
    e = (*v)(p->obj, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (p->_size) {

#line 11 "(tree fragment)"
    e = (*v)(p->_size, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (p->_array_interface) {

#line 11 "(tree fragment)"
    e = (*v)(p->_array_interface, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (p->view.obj) {

#line 11 "(tree fragment)"
    e = (*v)(p->view.obj, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear_memoryview(PyObject *o) {

#line 11 "(tree fragment)"
  PyObject* tmp;

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->obj);

#line 11 "(tree fragment)"
  p->obj = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->_size);

#line 11 "(tree fragment)"
  p->_size = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->_array_interface);

#line 11 "(tree fragment)"
  p->_array_interface = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  Py_CLEAR(p->view.obj);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {

#line 11 "(tree fragment)"
  PyObject *r;

#line 11 "(tree fragment)"
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;

#line 11 "(tree fragment)"
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);

#line 11 "(tree fragment)"
  Py_DECREF(x);

#line 11 "(tree fragment)"
  return r;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {

#line 11 "(tree fragment)"
  if (v) {

#line 11 "(tree fragment)"
    return __pyx_memoryview___setitem__(o, i, v);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  else {

#line 11 "(tree fragment)"
    __Pyx_TypeName o_type_name;

#line 11 "(tree fragment)"
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));

#line 11 "(tree fragment)"
    PyErr_Format(PyExc_NotImplementedError,

#line 11 "(tree fragment)"
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);

#line 11 "(tree fragment)"
    __Pyx_DECREF_TypeName(o_type_name);

#line 11 "(tree fragment)"
    return -1;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_specialmethod___pyx_memoryview___repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {

#line 11 "(tree fragment)"
  return __pyx_memoryview___repr__(self);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_memoryview[] = {

#line 11 "(tree fragment)"
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_memoryview___repr__, METH_NOARGS|METH_COEXIST, 0},

#line 11 "(tree fragment)"
  {"is_c_contig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_c_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"is_f_contig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_f_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"copy_fortran", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy_fortran, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static struct PyGetSetDef __pyx_getsets_memoryview[] = {

#line 11 "(tree fragment)"
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#if CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
#if !CYTHON_COMPILING_IN_LIMITED_API

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyBufferProcs __pyx_tp_as_buffer_memoryview = {

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getreadbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getwritebuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getsegcount*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getcharbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/

#line 11 "(tree fragment)"
  0, /*bf_releasebuffer*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"
static PyType_Slot __pyx_type___pyx_memoryview_slots[] = {

#line 11 "(tree fragment)"
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_memoryview},

#line 11 "(tree fragment)"
  {Py_tp_repr, (void *)__pyx_memoryview___repr__},

#line 11 "(tree fragment)"
  {Py_sq_length, (void *)__pyx_memoryview___len__},

#line 11 "(tree fragment)"
  {Py_sq_item, (void *)__pyx_sq_item_memoryview},

#line 11 "(tree fragment)"
  {Py_mp_length, (void *)__pyx_memoryview___len__},

#line 11 "(tree fragment)"
  {Py_mp_subscript, (void *)__pyx_memoryview___getitem__},

#line 11 "(tree fragment)"
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_memoryview},

#line 11 "(tree fragment)"
  {Py_tp_str, (void *)__pyx_memoryview___str__},

#line 11 "(tree fragment)"
  {Py_tp_traverse, (void *)__pyx_tp_traverse_memoryview},

#line 11 "(tree fragment)"
  {Py_tp_clear, (void *)__pyx_tp_clear_memoryview},

#line 11 "(tree fragment)"
  {Py_tp_methods, (void *)__pyx_methods_memoryview},

#line 11 "(tree fragment)"
  {Py_tp_getset, (void *)__pyx_getsets_memoryview},

#line 11 "(tree fragment)"
  {Py_tp_new, (void *)__pyx_tp_new_memoryview},

#line 11 "(tree fragment)"
  {0, 0},

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static PyType_Spec __pyx_type___pyx_memoryview_spec = {

#line 11 "(tree fragment)"
  "getdb.memoryview",

#line 11 "(tree fragment)"
  sizeof(struct __pyx_memoryview_obj),

#line 11 "(tree fragment)"
  0,

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,

#line 11 "(tree fragment)"
  __pyx_type___pyx_memoryview_slots,

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#else

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PySequenceMethods __pyx_tp_as_sequence_memoryview = {

#line 11 "(tree fragment)"
  __pyx_memoryview___len__, /*sq_length*/

#line 11 "(tree fragment)"
  0, /*sq_concat*/

#line 11 "(tree fragment)"
  0, /*sq_repeat*/

#line 11 "(tree fragment)"
  __pyx_sq_item_memoryview, /*sq_item*/

#line 11 "(tree fragment)"
  0, /*sq_slice*/

#line 11 "(tree fragment)"
  0, /*sq_ass_item*/

#line 11 "(tree fragment)"
  0, /*sq_ass_slice*/

#line 11 "(tree fragment)"
  0, /*sq_contains*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_concat*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_repeat*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMappingMethods __pyx_tp_as_mapping_memoryview = {

#line 11 "(tree fragment)"
  __pyx_memoryview___len__, /*mp_length*/

#line 11 "(tree fragment)"
  __pyx_memoryview___getitem__, /*mp_subscript*/

#line 11 "(tree fragment)"
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyBufferProcs __pyx_tp_as_buffer_memoryview = {

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getreadbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getwritebuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getsegcount*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getcharbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/

#line 11 "(tree fragment)"
  0, /*bf_releasebuffer*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_memoryview = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "getdb.""memoryview", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_memoryview___repr__, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  __pyx_memoryview___str__, /*tp_str*/

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse_memoryview, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear_memoryview, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_memoryview, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  __pyx_getsets_memoryview, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  #if !CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_memoryview, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  NULL, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_pypy_flags*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p;

#line 11 "(tree fragment)"
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  p = ((struct __pyx_memoryviewslice_obj *)o);

#line 11 "(tree fragment)"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;

#line 11 "(tree fragment)"
  new((void*)&(p->from_slice)) __Pyx_memviewslice();

#line 11 "(tree fragment)"
  p->from_object = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->from_slice.memview = NULL;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc__memoryviewslice) {

#line 11 "(tree fragment)"
      if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  {

#line 11 "(tree fragment)"
    PyObject *etype, *eval, *etb;

#line 11 "(tree fragment)"
    PyErr_Fetch(&etype, &eval, &etb);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 11 "(tree fragment)"
    __pyx_memoryviewslice___dealloc__(o);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 11 "(tree fragment)"
    PyErr_Restore(etype, eval, etb);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  __Pyx_call_destructor(p->from_slice);

#line 11 "(tree fragment)"
  Py_CLEAR(p->from_object);

#line 11 "(tree fragment)"
  PyObject_GC_Track(o);

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_memoryview(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;

#line 11 "(tree fragment)"
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;

#line 11 "(tree fragment)"
  if (p->from_object) {

#line 11 "(tree fragment)"
    e = (*v)(p->from_object, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear__memoryviewslice(PyObject *o) {

#line 11 "(tree fragment)"
  PyObject* tmp;

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;

#line 11 "(tree fragment)"
  __pyx_tp_clear_memoryview(o);

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->from_object);

#line 11 "(tree fragment)"
  p->from_object = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  __PYX_XCLEAR_MEMVIEW(&p->from_slice, 1);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods__memoryviewslice[] = {

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#if CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
static PyType_Slot __pyx_type___pyx_memoryviewslice_slots[] = {

#line 11 "(tree fragment)"
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc__memoryviewslice},

#line 11 "(tree fragment)"
  {Py_tp_doc, (void *)PyDoc_STR("Internal class for passing memoryview slices to Python")},

#line 11 "(tree fragment)"
  {Py_tp_traverse, (void *)__pyx_tp_traverse__memoryviewslice},

#line 11 "(tree fragment)"
  {Py_tp_clear, (void *)__pyx_tp_clear__memoryviewslice},

#line 11 "(tree fragment)"
  {Py_tp_methods, (void *)__pyx_methods__memoryviewslice},

#line 11 "(tree fragment)"
  {Py_tp_new, (void *)__pyx_tp_new__memoryviewslice},

#line 11 "(tree fragment)"
  {0, 0},

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static PyType_Spec __pyx_type___pyx_memoryviewslice_spec = {

#line 11 "(tree fragment)"
  "getdb._memoryviewslice",

#line 11 "(tree fragment)"
  sizeof(struct __pyx_memoryviewslice_obj),

#line 11 "(tree fragment)"
  0,

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,

#line 11 "(tree fragment)"
  __pyx_type___pyx_memoryviewslice_slots,

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#else

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_memoryviewslice = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "getdb.""_memoryviewslice", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY || 0

#line 11 "(tree fragment)"
  __pyx_memoryview___repr__, /*tp_repr*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  0, /*tp_repr*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  0, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  0, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY || 0

#line 11 "(tree fragment)"
  __pyx_memoryview___str__, /*tp_str*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  0, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  PyDoc_STR("Internal class for passing memoryview slices to Python"), /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods__memoryviewslice, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  0, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  #if !CYTHON_USE_TYPE_SPECS

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new__memoryviewslice, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  NULL, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_pypy_flags*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods[] = {

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_USE_MODULE_STATE
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {0, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {0, __pyx_k_AllDb, sizeof(__pyx_k_AllDb), 0, 0, 1, 1},
  {0, __pyx_k_AllDb___reduce_cython, sizeof(__pyx_k_AllDb___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_AllDb___setstate_cython, sizeof(__pyx_k_AllDb___setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_All_dimensions_preceding_dimensi, sizeof(__pyx_k_All_dimensions_preceding_dimensi), 0, 0, 1, 0},
  {0, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {0, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {0, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {0, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {0, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {0, __pyx_k_Cannot_index_with_type, sizeof(__pyx_k_Cannot_index_with_type), 0, 1, 0, 0},
  {0, __pyx_k_Cannot_transpose_memoryview_with, sizeof(__pyx_k_Cannot_transpose_memoryview_with), 0, 0, 1, 0},
  {0, __pyx_k_Dimension_d_is_not_direct, sizeof(__pyx_k_Dimension_d_is_not_direct), 0, 0, 1, 0},
  {0, __pyx_k_EdgeInfo, sizeof(__pyx_k_EdgeInfo), 0, 0, 1, 1},
  {0, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {0, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {0, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {0, __pyx_k_Index_out_of_bounds_axis_d, sizeof(__pyx_k_Index_out_of_bounds_axis_d), 0, 0, 1, 0},
  {0, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {0, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 1, 0, 0},
  {0, __pyx_k_Invalid_shape_in_axis, sizeof(__pyx_k_Invalid_shape_in_axis), 0, 1, 0, 0},
  {0, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {0, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {0, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {0, __pyx_k_NodeInfo, sizeof(__pyx_k_NodeInfo), 0, 0, 1, 1},
  {0, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {0, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 1, 0, 0},
  {0, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {0, __pyx_k_Process, sizeof(__pyx_k_Process), 0, 0, 1, 1},
  {0, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {0, __pyx_k_Step_may_not_be_zero_axis_d, sizeof(__pyx_k_Step_may_not_be_zero_axis_d), 0, 0, 1, 0},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {0, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {0, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 1},
  {0, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},
  {0, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {0, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {0, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
  {0, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {0, __pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0, 0},
  {0, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {0, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {0, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {0, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {0, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 0},
  {0, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {0, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {0, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {0, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {0, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {0, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {0, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {0, __pyx_k_feature_float, sizeof(__pyx_k_feature_float), 0, 0, 0, 1},
  {0, __pyx_k_feature_num, sizeof(__pyx_k_feature_num), 0, 0, 1, 1},
  {0, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {0, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {0, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {0, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {0, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_get_pointer, sizeof(__pyx_k_get_pointer), 0, 0, 1, 1},
  {0, __pyx_k_getdb, sizeof(__pyx_k_getdb), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_got, sizeof(__pyx_k_got), 0, 1, 0, 0},
  {0, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 1, 0, 0},
  {0, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_intp, sizeof(__pyx_k_intp), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {0, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {0, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 0, 1},
  {0, __pyx_k_lgraph_db_python, sizeof(__pyx_k_lgraph_db_python), 0, 0, 1, 1},
  {0, __pyx_k_lgraph_db_python_PyGraphDB, sizeof(__pyx_k_lgraph_db_python_PyGraphDB), 0, 0, 1, 0},
  {0, __pyx_k_lgraph_db_python_PyOlapOnDB, sizeof(__pyx_k_lgraph_db_python_PyOlapOnDB), 0, 0, 1, 0},
  {0, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {0, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {0, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {0, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {0, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {0, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {0, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {0, __pyx_k_olapondb, sizeof(__pyx_k_olapondb), 0, 0, 1, 1},
  {0, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {0, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {0, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {0, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {0, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self_active_self_db_self_g_self, sizeof(__pyx_k_self_active_self_db_self_g_self), 0, 0, 1, 0},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {0, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {0, __pyx_k_size_t, sizeof(__pyx_k_size_t), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {0, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {0, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {0, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {0, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {0, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {0, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {0, __pyx_k_tugraph_db_learn_procedures_get, sizeof(__pyx_k_tugraph_db_learn_procedures_get), 0, 0, 1, 0},
  {0, __pyx_k_uintp, sizeof(__pyx_k_uintp), 0, 0, 1, 1},
  {0, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {0, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {0, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {0, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
  {0, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  #else
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_AllDb, __pyx_k_AllDb, sizeof(__pyx_k_AllDb), 0, 0, 1, 1},
  {&__pyx_n_s_AllDb___reduce_cython, __pyx_k_AllDb___reduce_cython, sizeof(__pyx_k_AllDb___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_AllDb___setstate_cython, __pyx_k_AllDb___setstate_cython, sizeof(__pyx_k_AllDb___setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_All_dimensions_preceding_dimensi, __pyx_k_All_dimensions_preceding_dimensi, sizeof(__pyx_k_All_dimensions_preceding_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_u_Cannot_index_with_type, __pyx_k_Cannot_index_with_type, sizeof(__pyx_k_Cannot_index_with_type), 0, 1, 0, 0},
  {&__pyx_kp_s_Cannot_transpose_memoryview_with, __pyx_k_Cannot_transpose_memoryview_with, sizeof(__pyx_k_Cannot_transpose_memoryview_with), 0, 0, 1, 0},
  {&__pyx_kp_s_Dimension_d_is_not_direct, __pyx_k_Dimension_d_is_not_direct, sizeof(__pyx_k_Dimension_d_is_not_direct), 0, 0, 1, 0},
  {&__pyx_n_s_EdgeInfo, __pyx_k_EdgeInfo, sizeof(__pyx_k_EdgeInfo), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_out_of_bounds_axis_d, __pyx_k_Index_out_of_bounds_axis_d, sizeof(__pyx_k_Index_out_of_bounds_axis_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_shape_in_axis, __pyx_k_Invalid_shape_in_axis, sizeof(__pyx_k_Invalid_shape_in_axis), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_NodeInfo, __pyx_k_NodeInfo, sizeof(__pyx_k_NodeInfo), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_u_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 1, 0, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Process, __pyx_k_Process, sizeof(__pyx_k_Process), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_kp_s_Step_may_not_be_zero_axis_d, __pyx_k_Step_may_not_be_zero_axis_d, sizeof(__pyx_k_Step_may_not_be_zero_axis_d), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_n_s__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 1},
  {&__pyx_n_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_n_s_abc, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_kp_u_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0, 0},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_kp_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_db, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_b_feature_float, __pyx_k_feature_float, sizeof(__pyx_k_feature_float), 0, 0, 0, 1},
  {&__pyx_n_s_feature_num, __pyx_k_feature_num, sizeof(__pyx_k_feature_num), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_get_pointer, __pyx_k_get_pointer, sizeof(__pyx_k_get_pointer), 0, 0, 1, 1},
  {&__pyx_n_s_getdb, __pyx_k_getdb, sizeof(__pyx_k_getdb), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_u_got, __pyx_k_got, sizeof(__pyx_k_got), 0, 1, 0, 0},
  {&__pyx_kp_u_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 1, 0, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_intp, __pyx_k_intp, sizeof(__pyx_k_intp), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_b_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 0, 1},
  {&__pyx_n_s_lgraph_db_python, __pyx_k_lgraph_db_python, sizeof(__pyx_k_lgraph_db_python), 0, 0, 1, 1},
  {&__pyx_kp_s_lgraph_db_python_PyGraphDB, __pyx_k_lgraph_db_python_PyGraphDB, sizeof(__pyx_k_lgraph_db_python_PyGraphDB), 0, 0, 1, 0},
  {&__pyx_kp_s_lgraph_db_python_PyOlapOnDB, __pyx_k_lgraph_db_python_PyOlapOnDB, sizeof(__pyx_k_lgraph_db_python_PyOlapOnDB), 0, 0, 1, 0},
  {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_olapondb, __pyx_k_olapondb, sizeof(__pyx_k_olapondb), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_active_self_db_self_g_self, __pyx_k_self_active_self_db_self_g_self, sizeof(__pyx_k_self_active_self_db_self_g_self), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_size_t, __pyx_k_size_t, sizeof(__pyx_k_size_t), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_kp_s_tugraph_db_learn_procedures_get, __pyx_k_tugraph_db_learn_procedures_get, sizeof(__pyx_k_tugraph_db_learn_procedures_get), 0, 0, 1, 0},
  {&__pyx_n_s_uintp, __pyx_k_uintp, sizeof(__pyx_k_uintp), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(3, 120, __pyx_L1_error)
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_n_s_import); if (!__pyx_builtin___import__) __PYX_ERR(1, 100, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 140, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 158, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 426, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 636, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(1, 740, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 931, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "View.MemoryView":600
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */

#line 600 "View.MemoryView"
  __pyx_tuple__4 = PyTuple_New(1); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 600, __pyx_L1_error)

#line 600 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 600 "View.MemoryView"
  __Pyx_INCREF(__pyx_int_neg_1);

#line 600 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_int_neg_1);

#line 600 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_tuple__4, 0, __pyx_int_neg_1);

#line 600 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "View.MemoryView":697
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */

#line 697 "View.MemoryView"
  __pyx_slice__5 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(1, 697, __pyx_L1_error)

#line 697 "View.MemoryView"
  __Pyx_GOTREF(__pyx_slice__5);

#line 697 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */

#line 4 "(tree fragment)"
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_int_136983863, __pyx_int_112105877, __pyx_int_184977713); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__8);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 1 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__9);

#line 1 "(tree fragment)"
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 */

#line 3 "(tree fragment)"
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 3, __pyx_L1_error)

#line 3 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__11);

#line 3 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__11);

#line 3 "(tree fragment)"
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "getdb.py":139
 *         # printf("all_cost = %lf s\n", cython.cast(cython.double, end_cost - start))
 * 
 * @cython.ccall             # <<<<<<<<<<<<<<
 * def Process(db_: lgraph_db_python.PyGraphDB, olapondb:lgraph_db_python.PyOlapOnDB, feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())
 */

#line 139 "getdb.py"
  __pyx_tuple__13 = PyTuple_Pack(5, __pyx_n_s_db, __pyx_n_s_olapondb, __pyx_n_s_feature_num, __pyx_n_s_NodeInfo, __pyx_n_s_EdgeInfo); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 139 "getdb.py"
  __Pyx_GIVEREF(__pyx_tuple__13);

#line 139 "getdb.py"
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_tugraph_db_learn_procedures_get, __pyx_n_s_Process, 139, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 139, __pyx_L1_error)

  /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */

#line 100 "View.MemoryView"
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_sys); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 100, __pyx_L1_error)

#line 100 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__15);

#line 100 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__15);

#line 100 "View.MemoryView"
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 100, __pyx_L1_error)

#line 100 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__16);

#line 100 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "View.MemoryView":101
 * try:
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 */

#line 101 "View.MemoryView"
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_collections_abc); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 101, __pyx_L1_error)

#line 101 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 101 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "View.MemoryView":103
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
 */

#line 103 "View.MemoryView"
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_collections); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 103, __pyx_L1_error)

#line 103 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 103 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":308
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */

#line 308 "View.MemoryView"
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 308, __pyx_L1_error)

#line 308 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__19);

#line 308 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "View.MemoryView":309
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */

#line 309 "View.MemoryView"
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 309, __pyx_L1_error)

#line 309 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 309 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "View.MemoryView":310
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 310 "View.MemoryView"
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 310, __pyx_L1_error)

#line 310 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 310 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "View.MemoryView":313
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */

#line 313 "View.MemoryView"
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 313, __pyx_L1_error)

#line 313 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__22);

#line 313 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":314
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 314 "View.MemoryView"
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 314, __pyx_L1_error)

#line 314 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__23);

#line 314 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"
  __pyx_tuple__24 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 1 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__24);

#line 1 "(tree fragment)"
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return 0;

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return -1;

#line 1 "(tree fragment)"
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  #if CYTHON_USE_MODULE_STATE
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_n_s_ASCII) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_s_AllDb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_s_AllDb___reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_s_AllDb___setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_kp_s_All_dimensions_preceding_dimensi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_AssertionError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_kp_s_Buffer_view_does_not_expose_stri) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_kp_s_Can_only_create_a_buffer_that_is) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_kp_s_Cannot_assign_to_read_only_memor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_kp_s_Cannot_create_writable_memory_vi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_kp_u_Cannot_index_with_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_kp_s_Cannot_transpose_memoryview_with) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_kp_s_Dimension_d_is_not_direct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_EdgeInfo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_Ellipsis) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_kp_s_Empty_shape_tuple_for_cython_arr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_kp_s_Incompatible_checksums_0x_x_vs_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_IndexError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_kp_s_Index_out_of_bounds_axis_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_kp_s_Indirect_dimensions_not_supporte) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_kp_u_Invalid_mode_expected_c_or_fortr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_kp_u_Invalid_shape_in_axis) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_MemoryError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_kp_s_MemoryView_of_r_at_0x_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_kp_s_MemoryView_of_r_object) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_NodeInfo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_b_O) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_kp_u_Out_of_bounds_on_buffer_access_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_PickleError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_Process) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_Sequence) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_kp_s_Step_may_not_be_zero_axis_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_kp_s_Unable_to_convert_item_to_object) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_View_MemoryView) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_kp_u__2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s__26) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s__3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_kp_u__6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_kp_u__7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_abc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_allocate_buffer) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_kp_u_and) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_asarray) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_base) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_u_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_class) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_collections) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_kp_s_collections_abc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_kp_s_contiguous_and_direct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_kp_s_contiguous_and_indirect) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_count) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_db) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_dtype) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_dtype_is_object) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_encode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_enumerate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_error) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_b_feature_float) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_feature_num) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_flags) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_float32) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_format) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_fortran) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_u_fortran) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_get_pointer) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_n_s_getdb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_kp_u_got) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_kp_u_got_differing_extents_in_dimensi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_n_s_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s_index) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_n_s_intp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_s_itemsize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_kp_s_itemsize_0_for_cython_array) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_b_label) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_s_lgraph_db_python) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_kp_s_lgraph_db_python_PyGraphDB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_kp_s_lgraph_db_python_PyOlapOnDB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_n_s_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_n_s_memview) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_n_s_mode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_n_s_ndim) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_n_s_new) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_kp_s_no_default___reduce___due_to_non) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_np) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_numpy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_obj) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_n_s_olapondb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_n_s_pack) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_n_s_pickle) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_s_pyx_PickleError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_n_s_pyx_checksum) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_pyx_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_n_s_pyx_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_n_s_pyx_unpickle_Enum) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_register) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_kp_s_self_active_self_db_self_g_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_shape) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_size_t) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_start) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_step) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_s_stop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_kp_s_strided_and_direct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_kp_s_strided_and_direct_or_indirect) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_kp_s_strided_and_indirect) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_s_struct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_s_sys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_time) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_kp_s_tugraph_db_learn_procedures_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_n_s_uintp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_kp_s_unable_to_allocate_array_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_kp_s_unable_to_allocate_shape_and_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_unpack) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_update) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_version_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_zeros) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_USE_MODULE_STATE
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_collections_abc_Sequence = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5getdb_AllDb = &__pyx_vtable_5getdb_AllDb;
  __pyx_vtable_5getdb_AllDb.MergeList = (void (*)(struct __pyx_obj_5getdb_AllDb *))__pyx_f_5getdb_5AllDb_MergeList;
  __pyx_vtable_5getdb_AllDb.Work = (__pyx_t_9lgraph_db_size_t (*)(struct __pyx_obj_5getdb_AllDb *, __pyx_t_9lgraph_db_size_t))__pyx_f_5getdb_5AllDb_Work;
  __pyx_vtable_5getdb_AllDb.run = (PyObject *(*)(struct __pyx_obj_5getdb_AllDb *, lgraph_api::GraphDB *, lgraph_api::olap::OlapOnDB<struct lgraph_api::olap::Empty>  *, __pyx_t_9lgraph_db_size_t, PyObject *, PyObject *))__pyx_f_5getdb_5AllDb_run;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5getdb_AllDb = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5getdb_AllDb_spec, NULL); if (unlikely(!__pyx_ptype_5getdb_AllDb)) __PYX_ERR(0, 18, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5getdb_AllDb_spec, __pyx_ptype_5getdb_AllDb) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  #else
  __pyx_ptype_5getdb_AllDb = &__pyx_type_5getdb_AllDb;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5getdb_AllDb) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5getdb_AllDb->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5getdb_AllDb->tp_dictoffset && __pyx_ptype_5getdb_AllDb->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5getdb_AllDb->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5getdb_AllDb, __pyx_vtabptr_5getdb_AllDb) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5getdb_AllDb) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AllDb, (PyObject *) __pyx_ptype_5getdb_AllDb) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5getdb_AllDb) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  #endif
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_array_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_array_spec, NULL); if (unlikely(!__pyx_array_type)) __PYX_ERR(1, 113, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_array_type->tp_as_buffer = &__pyx_tp_as_buffer_array;
  if (!__pyx_array_type->tp_as_buffer->bf_releasebuffer && __pyx_array_type->tp_base->tp_as_buffer && __pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_array_type->tp_as_buffer->bf_releasebuffer = __pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_array_spec, __pyx_array_type) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  #else
  __pyx_array_type = &__pyx_type___pyx_array;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_array_type) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_array_type->tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_array_type, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_array_type) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_array_type) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_MemviewEnum_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_MemviewEnum_spec, NULL); if (unlikely(!__pyx_MemviewEnum_type)) __PYX_ERR(1, 301, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_MemviewEnum_spec, __pyx_MemviewEnum_type) < 0) __PYX_ERR(1, 301, __pyx_L1_error)
  #else
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_MemviewEnum_type) < 0) __PYX_ERR(1, 301, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_MemviewEnum_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_MemviewEnum_type->tp_dictoffset && __pyx_MemviewEnum_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_MemviewEnum_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_MemviewEnum_type) < 0) __PYX_ERR(1, 301, __pyx_L1_error)
  #endif
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  __pyx_vtable_memoryview._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryview__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_memoryview_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryview_spec, NULL); if (unlikely(!__pyx_memoryview_type)) __PYX_ERR(1, 351, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_memoryview_type->tp_as_buffer = &__pyx_tp_as_buffer_memoryview;
  if (!__pyx_memoryview_type->tp_as_buffer->bf_releasebuffer && __pyx_memoryview_type->tp_base->tp_as_buffer && __pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_memoryview_type->tp_as_buffer->bf_releasebuffer = __pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryview_spec, __pyx_memoryview_type) < 0) __PYX_ERR(1, 351, __pyx_L1_error)
  #else
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_memoryview_type) < 0) __PYX_ERR(1, 351, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_memoryview_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_memoryview_type->tp_dictoffset && __pyx_memoryview_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_memoryview_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_memoryview_type, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 351, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_memoryview_type) < 0) __PYX_ERR(1, 351, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_memoryview_type) < 0) __PYX_ERR(1, 351, __pyx_L1_error)
  #endif
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_vtable__memoryviewslice.__pyx_base._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryviewslice__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_memoryview_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_memoryviewslice_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryviewslice_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_memoryviewslice_type)) __PYX_ERR(1, 968, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryviewslice_spec, __pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 968, __pyx_L1_error)
  #else
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_memoryviewslice_type->tp_base = __pyx_memoryview_type;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 968, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_memoryviewslice_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_memoryviewslice_type->tp_dictoffset && __pyx_memoryviewslice_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_memoryviewslice_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_memoryviewslice_type, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 968, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 968, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 968, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT(PyBoolObject),
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT(PyComplexObject),
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("array"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType(__pyx_t_1, "array", "array", sizeof(arrayobject), __PYX_GET_STRUCT_ALIGNMENT(arrayobject),
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_5array_array) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_getdb(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_getdb},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "getdb",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgetdb(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgetdb(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_getdb(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_getdb(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_getdb(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  static PyThread_type_lock __pyx_t_8[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'getdb' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("getdb", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_getdb(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_getdb) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "getdb")) {
      if (unlikely((PyDict_SetItemString(modules, "getdb", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "getdb.py":13
 * from cython.cimports.openmp import omp_set_dynamic, omp_get_num_threads, omp_get_thread_num
 * from cython.cimports.libc.string import memcpy
 * import numpy as np             # <<<<<<<<<<<<<<
 * import time
 * import lgraph_db_python
 */

#line 13 "getdb.py"
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)

#line 13 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 13 "getdb.py"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)

#line 13 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "getdb.py":14
 * from cython.cimports.libc.string import memcpy
 * import numpy as np
 * import time             # <<<<<<<<<<<<<<
 * import lgraph_db_python
 * 
 */

#line 14 "getdb.py"
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_time, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)

#line 14 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 14 "getdb.py"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)

#line 14 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "getdb.py":15
 * import numpy as np
 * import time
 * import lgraph_db_python             # <<<<<<<<<<<<<<
 * 
 * @cython.cclass
 */

#line 15 "getdb.py"
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_lgraph_db_python, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)

#line 15 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 15 "getdb.py"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lgraph_db_python, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)

#line 15 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5getdb_5AllDb_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllDb___reduce_cython, NULL, __pyx_n_s_getdb, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_2);

#line 1 "(tree fragment)"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.active,self.db,self.g,self.txn cannot be converted to a Python object for pickling"
 */

#line 3 "(tree fragment)"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5getdb_5AllDb_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllDb___setstate_cython, NULL, __pyx_n_s_getdb, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)

#line 3 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_2);

#line 3 "(tree fragment)"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)

#line 3 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "getdb.py":139
 *         # printf("all_cost = %lf s\n", cython.cast(cython.double, end_cost - start))
 * 
 * @cython.ccall             # <<<<<<<<<<<<<<
 * def Process(db_: lgraph_db_python.PyGraphDB, olapondb:lgraph_db_python.PyOlapOnDB, feature_num: size_t, NodeInfo: list, EdgeInfo: list):
 *     db_addr = cython.declare(cython.Py_ssize_t, db_.get_pointer())
 */

#line 139 "getdb.py"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  __Pyx_GOTREF(__pyx_t_2);

#line 139 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_db, __pyx_kp_s_lgraph_db_python_PyGraphDB) < 0) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_olapondb, __pyx_kp_s_lgraph_db_python_PyOlapOnDB) < 0) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_feature_num, __pyx_n_s_size_t) < 0) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_NodeInfo, __pyx_n_s_list) < 0) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_EdgeInfo, __pyx_n_s_list) < 0) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5getdb_1Process, 0, __pyx_n_s_Process, NULL, __pyx_n_s_getdb, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 139 "getdb.py"
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);

#line 139 "getdb.py"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 139 "getdb.py"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Process, __pyx_t_3) < 0) __PYX_ERR(0, 139, __pyx_L1_error)

#line 139 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "getdb.py":1
 * # cython: language_level=3, cpp_locals=True, boundscheck=False, wraparound=False, initializedcheck=False             # <<<<<<<<<<<<<<
 * # distutils: language = c++
 * 
 */

#line 1 "getdb.py"
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "getdb.py"
  __Pyx_GOTREF(__pyx_t_3);

#line 1 "getdb.py"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "getdb.py"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */

#line 99 "View.MemoryView"
  {

#line 99 "View.MemoryView"
    __Pyx_PyThreadState_declare

#line 99 "View.MemoryView"
    __Pyx_PyThreadState_assign

#line 99 "View.MemoryView"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_4, &__pyx_t_5);

#line 99 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_1);

#line 99 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_4);

#line 99 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_5);

#line 99 "View.MemoryView"
    /*try:*/ {

      /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */

#line 100 "View.MemoryView"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 100, __pyx_L2_error)

#line 100 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 100 "View.MemoryView"
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_version_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 100, __pyx_L2_error)

#line 100 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_2);

#line 100 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 100 "View.MemoryView"
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_tuple__16, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 100, __pyx_L2_error)

#line 100 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 100 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 100, __pyx_L2_error)

#line 100 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 100 "View.MemoryView"
      if (__pyx_t_6) {

        /* "View.MemoryView":101
 * try:
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 */

#line 101 "View.MemoryView"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 101, __pyx_L2_error)

#line 101 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_3);

#line 101 "View.MemoryView"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abc); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 101, __pyx_L2_error)

#line 101 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_2);

#line 101 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 101 "View.MemoryView"
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 101, __pyx_L2_error)

#line 101 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_3);

#line 101 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "View.MemoryView"
        __Pyx_XGOTREF(__pyx_collections_abc_Sequence);

#line 101 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_3);

#line 101 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_3);

#line 101 "View.MemoryView"
        __pyx_t_3 = 0;

        /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */

#line 100 "View.MemoryView"
        goto __pyx_L8;

#line 100 "View.MemoryView"
      }

      /* "View.MemoryView":103
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
 */

#line 103 "View.MemoryView"
      /*else*/ {

#line 103 "View.MemoryView"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 103, __pyx_L2_error)

#line 103 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_3);

#line 103 "View.MemoryView"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L2_error)

#line 103 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_2);

#line 103 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "View.MemoryView"
        __Pyx_XGOTREF(__pyx_collections_abc_Sequence);

#line 103 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_2);

#line 103 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_2);

#line 103 "View.MemoryView"
        __pyx_t_2 = 0;

#line 103 "View.MemoryView"
      }

#line 103 "View.MemoryView"
      __pyx_L8:;

      /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */

#line 99 "View.MemoryView"
    }

#line 99 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 99 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 99 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 99 "View.MemoryView"
    goto __pyx_L7_try_end;

#line 99 "View.MemoryView"
    __pyx_L2_error:;

#line 99 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":104
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 * except:             # <<<<<<<<<<<<<<
 * 
 *     __pyx_collections_abc_Sequence = None
 */

#line 104 "View.MemoryView"
    /*except:*/ {

#line 104 "View.MemoryView"
      __Pyx_AddTraceback("View.MemoryView", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 104 "View.MemoryView"
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_7) < 0) __PYX_ERR(1, 104, __pyx_L4_except_error)

#line 104 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_2);

#line 104 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 104 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_7);

      /* "View.MemoryView":106
 * except:
 * 
 *     __pyx_collections_abc_Sequence = None             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 106 "View.MemoryView"
      __Pyx_INCREF(Py_None);

#line 106 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_collections_abc_Sequence);

#line 106 "View.MemoryView"
      __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, Py_None);

#line 106 "View.MemoryView"
      __Pyx_GIVEREF(Py_None);

#line 106 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 106 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 106 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 106 "View.MemoryView"
      goto __pyx_L3_exception_handled;

#line 106 "View.MemoryView"
    }

#line 106 "View.MemoryView"
    __pyx_L4_except_error:;

    /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */

#line 99 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 99 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 99 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 99 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_4, __pyx_t_5);

#line 99 "View.MemoryView"
    goto __pyx_L1_error;

#line 99 "View.MemoryView"
    __pyx_L3_exception_handled:;

#line 99 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 99 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 99 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 99 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_4, __pyx_t_5);

#line 99 "View.MemoryView"
    __pyx_L7_try_end:;

#line 99 "View.MemoryView"
  }

  /* "View.MemoryView":240
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */

#line 240 "View.MemoryView"
  {

#line 240 "View.MemoryView"
    __Pyx_PyThreadState_declare

#line 240 "View.MemoryView"
    __Pyx_PyThreadState_assign

#line 240 "View.MemoryView"
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_1);

#line 240 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_5);

#line 240 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_4);

#line 240 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_1);

#line 240 "View.MemoryView"
    /*try:*/ {

      /* "View.MemoryView":241
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
 */

#line 241 "View.MemoryView"
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 241, __pyx_L11_error)

#line 241 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_7);

#line 241 "View.MemoryView"
      if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(1, 241, __pyx_L11_error)

#line 241 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 241 "View.MemoryView"
      PyType_Modified(__pyx_array_type);

      /* "View.MemoryView":242
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */

#line 242 "View.MemoryView"
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 242, __pyx_L11_error)

#line 242 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_7);

#line 242 "View.MemoryView"
      if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_index, __pyx_t_7) < 0) __PYX_ERR(1, 242, __pyx_L11_error)

#line 242 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 242 "View.MemoryView"
      PyType_Modified(__pyx_array_type);

      /* "View.MemoryView":240
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */

#line 240 "View.MemoryView"
    }

#line 240 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 240 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 240 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 240 "View.MemoryView"
    goto __pyx_L16_try_end;

#line 240 "View.MemoryView"
    __pyx_L11_error:;

#line 240 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 240 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 240 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":243
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 243 "View.MemoryView"
    /*except:*/ {

#line 243 "View.MemoryView"
      __Pyx_ErrRestore(0,0,0);

#line 243 "View.MemoryView"
      goto __pyx_L12_exception_handled;

#line 243 "View.MemoryView"
    }

#line 243 "View.MemoryView"
    __pyx_L12_exception_handled:;

#line 243 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 243 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 243 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 243 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_1);

#line 243 "View.MemoryView"
    __pyx_L16_try_end:;

#line 243 "View.MemoryView"
  }

  /* "View.MemoryView":308
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */

#line 308 "View.MemoryView"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 308, __pyx_L1_error)

#line 308 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 308 "View.MemoryView"
  __Pyx_XGOTREF(generic);

#line 308 "View.MemoryView"
  __Pyx_DECREF_SET(generic, __pyx_t_7);

#line 308 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_7);

#line 308 "View.MemoryView"
  __pyx_t_7 = 0;

  /* "View.MemoryView":309
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */

#line 309 "View.MemoryView"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 309, __pyx_L1_error)

#line 309 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 309 "View.MemoryView"
  __Pyx_XGOTREF(strided);

#line 309 "View.MemoryView"
  __Pyx_DECREF_SET(strided, __pyx_t_7);

#line 309 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_7);

#line 309 "View.MemoryView"
  __pyx_t_7 = 0;

  /* "View.MemoryView":310
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 310 "View.MemoryView"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 310, __pyx_L1_error)

#line 310 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 310 "View.MemoryView"
  __Pyx_XGOTREF(indirect);

#line 310 "View.MemoryView"
  __Pyx_DECREF_SET(indirect, __pyx_t_7);

#line 310 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_7);

#line 310 "View.MemoryView"
  __pyx_t_7 = 0;

  /* "View.MemoryView":313
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */

#line 313 "View.MemoryView"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 313, __pyx_L1_error)

#line 313 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 313 "View.MemoryView"
  __Pyx_XGOTREF(contiguous);

#line 313 "View.MemoryView"
  __Pyx_DECREF_SET(contiguous, __pyx_t_7);

#line 313 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_7);

#line 313 "View.MemoryView"
  __pyx_t_7 = 0;

  /* "View.MemoryView":314
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 314 "View.MemoryView"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 314, __pyx_L1_error)

#line 314 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_7);

#line 314 "View.MemoryView"
  __Pyx_XGOTREF(indirect_contiguous);

#line 314 "View.MemoryView"
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_7);

#line 314 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_7);

#line 314 "View.MemoryView"
  __pyx_t_7 = 0;

  /* "View.MemoryView":337
 * 
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */

#line 337 "View.MemoryView"
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":338
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */

#line 338 "View.MemoryView"
  __pyx_t_8[0] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[1] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[2] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[3] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[4] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[5] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[6] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  __pyx_t_8[7] = PyThread_allocate_lock();

#line 338 "View.MemoryView"
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_8, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":998
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */

#line 998 "View.MemoryView"
  {

#line 998 "View.MemoryView"
    __Pyx_PyThreadState_declare

#line 998 "View.MemoryView"
    __Pyx_PyThreadState_assign

#line 998 "View.MemoryView"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_4, &__pyx_t_5);

#line 998 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_1);

#line 998 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_4);

#line 998 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_5);

#line 998 "View.MemoryView"
    /*try:*/ {

      /* "View.MemoryView":999
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
 */

#line 999 "View.MemoryView"
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 999, __pyx_L17_error)

#line 999 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_7);

#line 999 "View.MemoryView"
      if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(1, 999, __pyx_L17_error)

#line 999 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 999 "View.MemoryView"
      PyType_Modified(__pyx_memoryviewslice_type);

      /* "View.MemoryView":1000
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */

#line 1000 "View.MemoryView"
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1000, __pyx_L17_error)

#line 1000 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_7);

#line 1000 "View.MemoryView"
      if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_index, __pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L17_error)

#line 1000 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1000 "View.MemoryView"
      PyType_Modified(__pyx_memoryviewslice_type);

      /* "View.MemoryView":998
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */

#line 998 "View.MemoryView"
    }

#line 998 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 998 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 998 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 998 "View.MemoryView"
    goto __pyx_L22_try_end;

#line 998 "View.MemoryView"
    __pyx_L17_error:;

#line 998 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 998 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 998 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":1001
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 1001 "View.MemoryView"
    /*except:*/ {

#line 1001 "View.MemoryView"
      __Pyx_ErrRestore(0,0,0);

#line 1001 "View.MemoryView"
      goto __pyx_L18_exception_handled;

#line 1001 "View.MemoryView"
    }

#line 1001 "View.MemoryView"
    __pyx_L18_exception_handled:;

#line 1001 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1001 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 1001 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 1001 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_4, __pyx_t_5);

#line 1001 "View.MemoryView"
    __pyx_L22_try_end:;

#line 1001 "View.MemoryView"
  }

  /* "View.MemoryView":1004
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
 */

#line 1004 "View.MemoryView"
  {

#line 1004 "View.MemoryView"
    __Pyx_PyThreadState_declare

#line 1004 "View.MemoryView"
    __Pyx_PyThreadState_assign

#line 1004 "View.MemoryView"
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_1);

#line 1004 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_5);

#line 1004 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_4);

#line 1004 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1004 "View.MemoryView"
    /*try:*/ {

      /* "View.MemoryView":1005
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1005 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_collections_abc_Sequence); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1005, __pyx_L23_error)

#line 1005 "View.MemoryView"
      if (__pyx_t_6) {

        /* "View.MemoryView":1009
 * 
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence.register(array)
 * except:
 */

#line 1009 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_register); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1009, __pyx_L23_error)

#line 1009 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 1009 "View.MemoryView"
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_memoryviewslice_type)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1009, __pyx_L23_error)

#line 1009 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_3);

#line 1009 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1009 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "View.MemoryView":1010
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)             # <<<<<<<<<<<<<<
 * except:
 *     pass  # ignore failure, it's a minor issue
 */

#line 1010 "View.MemoryView"
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_register); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1010, __pyx_L23_error)

#line 1010 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_3);

#line 1010 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_array_type)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1010, __pyx_L23_error)

#line 1010 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 1010 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1010 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":1005
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1005 "View.MemoryView"
      }

      /* "View.MemoryView":1004
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
 */

#line 1004 "View.MemoryView"
    }

#line 1004 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1004 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1004 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1004 "View.MemoryView"
    goto __pyx_L28_try_end;

#line 1004 "View.MemoryView"
    __pyx_L23_error:;

#line 1004 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1004 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1004 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":1011
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)
 * except:             # <<<<<<<<<<<<<<
 *     pass  # ignore failure, it's a minor issue
 * 
 */

#line 1011 "View.MemoryView"
    /*except:*/ {

#line 1011 "View.MemoryView"
      __Pyx_ErrRestore(0,0,0);

#line 1011 "View.MemoryView"
      goto __pyx_L24_exception_handled;

#line 1011 "View.MemoryView"
    }

#line 1011 "View.MemoryView"
    __pyx_L24_exception_handled:;

#line 1011 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 1011 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 1011 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1011 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_1);

#line 1011 "View.MemoryView"
    __pyx_L28_try_end:;

#line 1011 "View.MemoryView"
  }

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "(tree fragment)"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  /*--- Wrapped vars code ---*/

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  goto __pyx_L0;

#line 11 "(tree fragment)"
  __pyx_L1_error:;

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_2);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_3);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_7);

#line 11 "(tree fragment)"
  if (__pyx_m) {

#line 11 "(tree fragment)"
    if (__pyx_d && stringtab_initialized) {

#line 11 "(tree fragment)"
      __Pyx_AddTraceback("init getdb", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
    #if !CYTHON_USE_MODULE_STATE

#line 11 "(tree fragment)"
    Py_CLEAR(__pyx_m);

#line 11 "(tree fragment)"
    #endif

#line 11 "(tree fragment)"
  } else if (!PyErr_Occurred()) {

#line 11 "(tree fragment)"
    PyErr_SetString(PyExc_ImportError, "init getdb");

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  __pyx_L0:;

#line 11 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 11 "(tree fragment)"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 11 "(tree fragment)"
  return (__pyx_m != NULL) ? 0 : -1;

#line 11 "(tree fragment)"
  #elif PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  return __pyx_m;

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  return;

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#if _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
#endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        tmp_tb = PyException_GetTraceback(tmp_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__3;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ssize_strlen */
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__2);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    (void) spec;
    (void) type;
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
    for (i = 1; i < n; i++)
    {
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (unlikely(!abi_module)) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    (void) module;
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    (void) module;
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, int ndim, int spec)
{
    CYTHON_UNUSED_VAR(ndim);
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_size_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_9lgraph_db_size_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_9lgraph_db_ssize_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_9lgraph_db_ssize_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_9lgraph_db_ssize_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_9lgraph_db_ssize_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_9lgraph_db_ssize_t(const char *itemp) {
    return (PyObject *) PyInt_FromSsize_t(*(__pyx_t_9lgraph_db_ssize_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_9lgraph_db_ssize_t(const char *itemp, PyObject *obj) {
    __pyx_t_9lgraph_db_ssize_t value = PyInt_AsSsize_t(obj);
    if (unlikely((value == (Py_ssize_t)-1) && PyErr_Occurred()))
        return 0;
    *(__pyx_t_9lgraph_db_ssize_t *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_float(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(float *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_float(const char *itemp, PyObject *obj) {
    float value = __pyx_PyFloat_AsFloat(obj);
    if (unlikely((value == (float)-1) && PyErr_Occurred()))
        return 0;
    *(float *) itemp = value;
    return 1;
}

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
  static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    __pyx_atomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        return;
    }
    old_acquisition_count = __pyx_add_acquisition_count(memview);
    if (unlikely(old_acquisition_count <= 0)) {
        if (likely(old_acquisition_count == 0)) {
            if (have_gil) {
                Py_INCREF((PyObject *) memview);
            } else {
                PyGILState_STATE _gilstate = PyGILState_Ensure();
                Py_INCREF((PyObject *) memview);
                PyGILState_Release(_gilstate);
            }
        } else {
            __pyx_fatalerror("Acquisition count is %d (line %d)",
                             __pyx_get_slice_count(memview), lineno);
        }
    }
}
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    __pyx_atomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    old_acquisition_count = __pyx_sub_acquisition_count(memview);
    memslice->data = NULL;
    if (likely(old_acquisition_count > 1)) {
        memslice->memview = NULL;
    } else if (likely(old_acquisition_count == 1)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(char) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(char) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__26));
    }
    return name;
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#if _MSV_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
